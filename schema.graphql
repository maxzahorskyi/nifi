input BlockchainNetworkMainQueryInput {
  browser_lte: String
  endpoint: String
  endpoint_lt: String
  OR: [BlockchainNetworkMainQueryInput!]
  endpoint_nin: [String]
  endpoint_lte: String
  browser_ne: String
  endpoint_gte: String
  endpoint_gt: String
  browser: String
  browser_in: [String]
  endpoint_ne: String
  browser_gte: String
  endpoint_exists: Boolean
  endpoint_in: [String]
  browser_exists: Boolean
  browser_gt: String
  browser_lt: String
  browser_nin: [String]
  AND: [BlockchainNetworkMainQueryInput!]
}

type EventMessage {
  eventName: String
  parsingTime: Float
  senderAddress: String
  superType: String
  time: Float
  txHash: String
}

input LocaleQueryInput {
  moduleName_nin: [String]
  lang: String
  _id_ne: ObjectId
  stringName_lte: String
  stringName_gt: String
  module: ModuleQueryInput
  updatedAt: Float
  string_gte: String
  createdAt_in: [Float]
  string_exists: Boolean
  _id_gt: ObjectId
  createdAt_lte: Float
  _id_nin: [ObjectId]
  lang_ne: String
  moduleName_ne: String
  moduleName_exists: Boolean
  lang_lt: String
  stringName_nin: [String]
  OR: [LocaleQueryInput!]
  string_lte: String
  lang_nin: [String]
  createdAt_gte: Float
  moduleName_gte: String
  lang_in: [String]
  module_exists: Boolean
  string_ne: String
  lang_lte: String
  _id_in: [ObjectId]
  moduleName: String
  lang_exists: Boolean
  stringName_gte: String
  moduleName_gt: String
  moduleName_in: [String]
  _id_exists: Boolean
  updatedAt_exists: Boolean
  updatedAt_in: [Float]
  stringName_exists: Boolean
  createdAt_exists: Boolean
  _id_gte: ObjectId
  updatedAt_gte: Float
  _id: ObjectId
  lang_gte: String
  AND: [LocaleQueryInput!]
  createdAt_ne: Float
  stringName_ne: String
  updatedAt_gt: Float
  updatedAt_lte: Float
  string: String
  updatedAt_lt: Float
  moduleName_lt: String
  string_gt: String
  lang_gt: String
  createdAt_gt: Float
  stringName_lt: String
  createdAt_nin: [Float]
  moduleName_lte: String
  string_nin: [String]
  stringName_in: [String]
  stringName: String
  _id_lte: ObjectId
  string_lt: String
  updatedAt_nin: [Float]
  updatedAt_ne: Float
  createdAt_lt: Float
  string_in: [String]
  _id_lt: ObjectId
  createdAt: Float
}

input UserIntegrationInsertInput {
  shadowAddresses: [String]
  name: String
  priority: Int
}

input SessionUpdateInput {
  _id: ObjectId
  integrationCode: String
  swiftMessageTime_unset: Boolean
  updatedAt: Float
  _id_unset: Boolean
  accountNumberObject_unset: Boolean
  createdAt: Float
  cookiesHash_unset: Boolean
  createdAt_inc: Float
  updatedAt_inc: Float
  createdAt_unset: Boolean
  address: String
  confirmationHash_unset: Boolean
  isExpired: Boolean
  swiftMessageTime_inc: Float
  cookiesHash: String
  updatedAt_unset: Boolean
  isExpired_unset: Boolean
  confirmationHash: String
  swiftMessageTime: Float
  accountNumberObject: SessionAccountNumberObjectRelationInput
  integrationCode_unset: Boolean
  address_unset: Boolean
}

input Contract_typeParameterInsertInput {
  likesLevel: String
  sharesLevel: String
  hashLevel: String
}

type UserMergedAccount {
  accountNumber: Int
  status: String
}

input ActionColTokenAttributeQueryInput {
  seriesCreator_lt: String
  seriesCreator_nin: [String]
  AND: [ActionColTokenAttributeQueryInput!]
  tokenID_nin: [String]
  seriesID_gt: String
  tokenID_in: [String]
  tokenID_ne: String
  seriesCreator_gt: String
  seriesID_exists: Boolean
  seriesCreator_ne: String
  seriesID_lte: String
  seriesCreator_exists: Boolean
  seriesCreator: String
  seriesCreator_in: [String]
  seriesCreator_lte: String
  seriesID_lt: String
  OR: [ActionColTokenAttributeQueryInput!]
  tokenID_lt: String
  tokenID_exists: Boolean
  tokenID_gt: String
  tokenID_lte: String
  seriesID_gte: String
  seriesID_ne: String
  seriesID: String
  tokenID: String
  seriesID_nin: [String]
  seriesID_in: [String]
  tokenID_gte: String
  seriesCreator_gte: String
}

type ActionCol {
  _id: ObjectId
  actionAttributes: ActionColActionAttribute
  message: ActionColMessage
  tokenAttributes: ActionColTokenAttribute
}

type SeriesRaw {
  blockchain: String
  collectionID: String
  creator: String
  creatorFees: String
  description: String
  hash: String
  media: [SeriesRawMedium]
  numberOfEditions: Int
  qualification: Int
  superType: String
  title: String
  type: String
  usersWhoShared: [Int]
}

input Col1LayerImageQueryInput {
  height_gte: Int
  width_ne: Int
  hash_in: [String]
  width_nin: [Int]
  height_gt: Int
  weight_exists: Boolean
  mimetype_exists: Boolean
  weight_in: [Int]
  rarity_gte: Int
  hash_gt: String
  hash_gte: String
  rarity_exists: Boolean
  height_lte: Int
  mimetype: String
  mimetype_lt: String
  mimetype_gt: String
  hash_ne: String
  weight_gte: Int
  mimetype_lte: String
  mimetype_nin: [String]
  hash_exists: Boolean
  mimetype_gte: String
  height: Int
  hash: String
  weight: Int
  AND: [Col1LayerImageQueryInput!]
  weight_gt: Int
  rarity_ne: Int
  rarity_gt: Int
  height_exists: Boolean
  subtitle: String
  height_nin: [Int]
  weight_ne: Int
  height_lt: Int
  height_in: [Int]
  width_lt: Int
  mimetype_in: [String]
  subtitle_lte: String
  weight_nin: [Int]
  subtitle_exists: Boolean
  rarity_in: [Int]
  weight_lte: Int
  hash_lte: String
  subtitle_gte: String
  subtitle_gt: String
  rarity_lte: Int
  subtitle_nin: [String]
  width_gt: Int
  width_in: [Int]
  weight_lt: Int
  width_exists: Boolean
  mimetype_ne: String
  subtitle_lt: String
  hash_lt: String
  subtitle_in: [String]
  height_ne: Int
  subtitle_ne: String
  rarity_lt: Int
  width: Int
  hash_nin: [String]
  rarity: Int
  width_gte: Int
  rarity_nin: [Int]
  OR: [Col1LayerImageQueryInput!]
  width_lte: Int
}

input BlockchainNetworkUpdateInput {
  main: BlockchainNetworkMainUpdateInput
  main_unset: Boolean
  test: BlockchainNetworkTestUpdateInput
  test_unset: Boolean
}

input TokenRawMediumQueryInput {
  ipfsHash: String
  hash_gt: String
  mimetype: String
  subtitle_gte: String
  role_ne: String
  subtitle_gt: String
  hash: String
  height_gte: Int
  weight_gte: Int
  hash_nin: [String]
  subtitle_nin: [String]
  hash_exists: Boolean
  hash_ne: String
  weight_gt: Int
  OR: [TokenRawMediumQueryInput!]
  height_nin: [Int]
  height_exists: Boolean
  subtitle_exists: Boolean
  width_nin: [Int]
  role_gt: String
  weight_in: [Int]
  subtitle_lt: String
  weight_nin: [Int]
  role_exists: Boolean
  ipfsHash_in: [String]
  mimetype_lte: String
  subtitle_in: [String]
  role_gte: String
  weight_lte: Int
  weight_exists: Boolean
  mimetype_ne: String
  width_lte: Int
  subtitle_lte: String
  height_ne: Int
  mimetype_lt: String
  width_in: [Int]
  height_in: [Int]
  mimetype_exists: Boolean
  ipfsHash_gte: String
  height: Int
  height_lt: Int
  ipfsHash_ne: String
  ipfsHash_nin: [String]
  hash_lt: String
  role_lte: String
  ipfsHash_lte: String
  role_lt: String
  mimetype_gte: String
  role_in: [String]
  ipfsHash_gt: String
  mimetype_nin: [String]
  width: Int
  width_exists: Boolean
  mimetype_in: [String]
  role_nin: [String]
  mimetype_gt: String
  width_gte: Int
  AND: [TokenRawMediumQueryInput!]
  height_gt: Int
  height_lte: Int
  ipfsHash_exists: Boolean
  weight_lt: Int
  width_lt: Int
  hash_lte: String
  hash_gte: String
  weight_ne: Int
  width_gt: Int
  subtitle_ne: String
  width_ne: Int
  subtitle: String
  role: String
  hash_in: [String]
  weight: Int
  ipfsHash_lt: String
}

input TokenDeployedSeriesIDRelationInput {
  link: String
  create: SeriesInsertInput
}

input UserUpdateInput {
  language: String
  nickname: String
  nickname_unset: Boolean
  walletAddress: String
  createdAt_inc: Float
  createdAt_unset: Boolean
  accountNumber: Int
  registeredWallet_unset: Boolean
  photoHash_unset: Boolean
  managingAccount_unset: Boolean
  defaultWallet: String
  _id_unset: Boolean
  settings: UserSettingUpdateInput
  managingAccount_inc: Int
  language_unset: Boolean
  avatarHash: String
  avatarHash_unset: Boolean
  qualification_unset: Boolean
  about: String
  blockchain_unset: Boolean
  mergedAccounts_unset: Boolean
  accountNumber_inc: Int
  managingAccount: Int
  username: String
  updatedAt: Float
  mergedAccounts: [UserMergedAccountUpdateInput]
  registeredWallet: String
  defaultWallet_unset: Boolean
  wallpaperHash: String
  integrations_unset: Boolean
  username_unset: Boolean
  _id: ObjectId
  integrations: [UserIntegrationUpdateInput]
  walletAddress_unset: Boolean
  wallpaperHash_unset: Boolean
  qualification: Int
  photoHash: String
  qualification_inc: Int
  about_unset: Boolean
  blockchain: String
  settings_unset: Boolean
  createdAt: Float
  updatedAt_unset: Boolean
  accountNumber_unset: Boolean
  updatedAt_inc: Float
}

input Col1UpdateInput {
  layers: [Col1LayerUpdateInput]
  supply: Int
  maximum_inc: Int
  hash: String
  mintCost_inc: Int
  name_unset: Boolean
  description: String
  creator: String
  createdAt_unset: Boolean
  _id_unset: Boolean
  address: String
  maximum_unset: Boolean
  createdAt_inc: Float
  layers_unset: Boolean
  creator_unset: Boolean
  updatedAt_inc: Float
  address_unset: Boolean
  mintCost: Int
  description_unset: Boolean
  updatedAt: Float
  name: String
  maximum: Int
  mintCost_unset: Boolean
  createdAt: Float
  updatedAt_unset: Boolean
  hash_unset: Boolean
  _id: ObjectId
  supply_inc: Int
  seriesId_unset: Boolean
  supply_unset: Boolean
  seriesId: String
}

input LikeQueryInput {
  userAccountNumber_nin: [Int]
  _id: ObjectId
  _id_lt: ObjectId
  tokenID_lte: String
  status_exists: Boolean
  _id_nin: [ObjectId]
  _id_lte: ObjectId
  userAccountNumber_exists: Boolean
  seriesID_nin: [String]
  seriesID_in: [String]
  userAccountNumber: Int
  seriesID: String
  tokenID_ne: String
  seriesID_gt: String
  tokenID_lt: String
  AND: [LikeQueryInput!]
  _id_exists: Boolean
  seriesID_gte: String
  tokenID_in: [String]
  userAccountNumber_lt: Int
  userAccountNumber_gt: Int
  status_ne: Boolean
  userAccountNumber_in: [Int]
  tokenID: String
  seriesID_lte: String
  _id_gte: ObjectId
  userAccountNumber_ne: Int
  seriesID_exists: Boolean
  tokenID_gte: String
  _id_in: [ObjectId]
  status: Boolean
  tokenID_exists: Boolean
  seriesID_lt: String
  tokenID_nin: [String]
  userAccountNumber_lte: Int
  OR: [LikeQueryInput!]
  seriesID_ne: String
  _id_ne: ObjectId
  userAccountNumber_gte: Int
  tokenID_gt: String
  _id_gt: ObjectId
}

enum ActionSortByInput {
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
  BLOCKCHAIN_ASC
  BLOCKCHAIN_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
}

input PaginationModule {
  limit: Float
  skip: Float
}

input Address_abiUpdateInput {
  _id_unset: Boolean
  address: String
  address_unset: Boolean
  level: String
  level_unset: Boolean
  superType: String
  superType_unset: Boolean
  _id: ObjectId
}

input OpendatumPermissionInsertInput {
  functions: [String]
  root: String
}

input BidDeployedQueryInput {
  bidAddress: String
  status_in: [String]
  endTime_exists: Boolean
  tokenAddress_lte: String
  tokenAddress_nin: [String]
  tokenID_gte: String
  bidAddress_exists: Boolean
  bidAddress_gte: String
  tokenID_lte: String
  bidAddress_nin: [String]
  endTime_nin: [Float]
  status_nin: [String]
  tokenAddress_lt: String
  bidValue_ne: String
  superType: String
  endTime: Float
  bidValue_lt: String
  bidAddress_lte: String
  bidCreator_gte: String
  bidValue_exists: Boolean
  bidCreator_lt: String
  tokenID_nin: [String]
  tokenID_gt: String
  tokenAddress_in: [String]
  bidCreator_lte: String
  OR: [BidDeployedQueryInput!]
  bidValue_gte: String
  status_ne: String
  bidValue_nin: [String]
  bidCreator_exists: Boolean
  bidCreator_nin: [String]
  status_lte: String
  superType_exists: Boolean
  bidCreator_gt: String
  bidValue_in: [String]
  tokenAddress_ne: String
  bidCreator_ne: String
  status_gt: String
  status_exists: Boolean
  superType_ne: String
  bidValue: String
  superType_lte: String
  status: String
  AND: [BidDeployedQueryInput!]
  tokenID_lt: String
  endTime_lte: Float
  status_gte: String
  endTime_gt: Float
  tokenID: String
  tokenID_ne: String
  tokenID_exists: Boolean
  bidValue_lte: String
  endTime_ne: Float
  status_lt: String
  superType_nin: [String]
  tokenAddress_exists: Boolean
  bidAddress_ne: String
  tokenAddress: String
  tokenAddress_gte: String
  bidAddress_in: [String]
  bidValue_gt: String
  tokenID_in: [String]
  bidAddress_gt: String
  superType_gt: String
  tokenAddress_gt: String
  endTime_in: [Float]
  superType_lt: String
  superType_in: [String]
  bidCreator: String
  endTime_lt: Float
  superType_gte: String
  endTime_gte: Float
  bidAddress_lt: String
  bidCreator_in: [String]
}

type Opendatum {
  _id: ObjectId
  createdAt: Float
  key: String
  permissions: [OpendatumPermission]
  updatedAt: Float
}

enum AskSortByInput {
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  _ID_ASC
  _ID_DESC
  ASKID_ASC
  ASKID_DESC
}

input Contract_typeHashFieldMediumUpdateInput {
  weight: String
  subtitle: String
  hash: String
  height_unset: Boolean
  mimetype: String
  role_unset: Boolean
  weight_unset: Boolean
  width_unset: Boolean
  subtitle_unset: Boolean
  hash_unset: Boolean
  height: String
  role: String
  mimetype_unset: Boolean
  width: String
}

type TokenDeployed {
  address: String
  blockchain: String
  collectionID: String
  creator: String
  creatorFees: String
  creatorObject: User
  foreverID: String
  foreverStatus: String
  frontStatus: String
  hash: String
  index: Int
  isEndorsed: Boolean
  lastSalePrice: Float
  lastSaleTime: Float
  manager: String
  managerExpirationTime: Float
  owner: String
  ownerObject: User
  seal: String
  sealPosition: String
  seriesID: Series
  seriesObject: Series
  stamps: [TokenDeployedStamp]
  superType: String
  type: String
}

enum SessionSortByInput {
  INTEGRATIONCODE_ASC
  COOKIESHASH_DESC
  ACCOUNTNUMBEROBJECT_ASC
  _ID_DESC
  ADDRESS_DESC
  CREATEDAT_DESC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  COOKIESHASH_ASC
  SWIFTMESSAGETIME_ASC
  SWIFTMESSAGETIME_DESC
  ACCOUNTNUMBEROBJECT_DESC
  UPDATEDAT_ASC
  _ID_ASC
  CONFIRMATIONHASH_ASC
  CONFIRMATIONHASH_DESC
  ADDRESS_ASC
  INTEGRATIONCODE_DESC
}

input ActionTokenAttributeSeriesIDRelationInput {
  create: SeriesInsertInput
  link: String
}

input FormatUpdateInput {
  width: Int
  width_inc: Int
  _id_unset: Boolean
  formatName: String
  formatName_unset: Boolean
  _id: ObjectId
  height_inc: Int
  width_unset: Boolean
  height_unset: Boolean
  height: Int
}

input Swift_messageUpdateInput {
  parameters_unset: Boolean
  message_unset: Boolean
  hash: String
  updatedAt: Float
  updatedAt_inc: Float
  _id: ObjectId
  status: String
  createdAt_unset: Boolean
  _id_unset: Boolean
  createdAt: Float
  parameters: Swift_messageParameterUpdateInput
  message: Swift_messageMessageUpdateInput
  updatedAt_unset: Boolean
  status_unset: Boolean
  createdAt_inc: Float
  hash_unset: Boolean
}

input EventParameterQueryInput {
  sealAddress_exists: Boolean
  masterAddress: String
  tokenAddress: String
  masterAddress_exists: Boolean
  masterAddress_gte: String
  expiresAt_in: [Float]
  sealPossibleCorners_lte: Int
  masterAddress_lt: String
  tokenAddress_lt: String
  sealPossibleCorners_in: [Int]
  expiresAt_ne: Float
  sealPossibleCorners: Int
  price_gte: Float
  sealPossibleCorners_gte: Int
  expiresAt_lt: Float
  tokenNftId_lt: Int
  masterNftId_lte: Int
  price: Float
  price_nin: [Float]
  tokenAddress_gte: String
  sealAddress_in: [String]
  tokenNftId_ne: Int
  sealPossibleCorners_nin: [Int]
  tokenNftId: Int
  sealNftId_gte: Int
  tokenAddress_lte: String
  masterNftId_lt: Int
  sealNftId_lte: Int
  expiresAt: Float
  masterAddress_gt: String
  sealPossibleCorners_exists: Boolean
  sealPossibleCorners_gt: Int
  price_ne: Float
  masterAddress_lte: String
  sealNftId_in: [Int]
  sealNftId_ne: Int
  price_exists: Boolean
  expiresAt_gte: Float
  masterNftId_gt: Int
  price_in: [Float]
  masterNftId: Int
  tokenAddress_gt: String
  tokenNftId_exists: Boolean
  expiresAt_nin: [Float]
  price_gt: Float
  sealAddress_ne: String
  masterNftId_gte: Int
  price_lte: Float
  OR: [EventParameterQueryInput!]
  sealAddress: String
  sealAddress_gt: String
  masterNftId_nin: [Int]
  sealAddress_gte: String
  sealAddress_nin: [String]
  sealNftId_exists: Boolean
  masterAddress_in: [String]
  tokenNftId_gte: Int
  sealNftId_lt: Int
  sealAddress_lt: String
  tokenAddress_exists: Boolean
  sealNftId_gt: Int
  expiresAt_gt: Float
  sealNftId_nin: [Int]
  tokenAddress_nin: [String]
  tokenNftId_lte: Int
  sealPossibleCorners_lt: Int
  sealNftId: Int
  expiresAt_exists: Boolean
  AND: [EventParameterQueryInput!]
  sealAddress_lte: String
  masterAddress_nin: [String]
  masterAddress_ne: String
  expiresAt_lte: Float
  masterNftId_in: [Int]
  tokenNftId_gt: Int
  tokenAddress_ne: String
  tokenNftId_in: [Int]
  sealPossibleCorners_ne: Int
  masterNftId_ne: Int
  tokenNftId_nin: [Int]
  masterNftId_exists: Boolean
  price_lt: Float
  tokenAddress_in: [String]
}

type New_session {
  _id: ObjectId
  token: String
  walletAddress: String
}

input AskRawInsertInput {
  tokenID: String
  blockchain: String
  currentAskValue: String
  superType: String
  showcaseFee: String
  values: [AskRawValueInsertInput]
  endTime: Float
  tokenAddress: String
  askCreator: String
}

enum Ui_chartSortByInput {
  FIELD_DESC
  FUNCTION_ASC
  SORT_DESC
  MODULEID_DESC
  CREATEDAT_DESC
  FUNCTION_DESC
  LIMIT_DESC
  LINKSUFFIX_DESC
  UPDATEDAT_ASC
  DATAOBJECT_DESC
  OUTPUTOBJECT_ASC
  FIELD_ASC
  SORT_ASC
  AIRTABLEID_DESC
  UPDATEDAT_DESC
  NAME_DESC
  AGGREGATIONFIELD_ASC
  OUTPUTOBJECT_DESC
  AGGREGATIONFIELD_DESC
  LIMIT_ASC
  _ID_ASC
  MODULEID_ASC
  DATAOBJECT_ASC
  CREATEDAT_ASC
  NAME_ASC
  LINKSUFFIX_ASC
  AIRTABLEID_ASC
  _ID_DESC
}

input BidDeployedUpdateInput {
  tokenID: String
  bidAddress: String
  status_unset: Boolean
  bidCreator: String
  status: String
  superType: String
  endTime: Float
  bidValue: String
  endTime_unset: Boolean
  endTime_inc: Float
  tokenAddress: String
  tokenAddress_unset: Boolean
  bidAddress_unset: Boolean
  bidCreator_unset: Boolean
  superType_unset: Boolean
  bidValue_unset: Boolean
  tokenID_unset: Boolean
}

input Contract_typeHashFieldLayerUpdateInput {
  images_unset: Boolean
  layerIndex: String
  layerIndex_unset: Boolean
  images: Contract_typeHashFieldLayerImageUpdateInput
}

input CollectionCount {
  creator: String
  search: String
  created_lt: Float
}

input SeriesDeployedInsertInput {
  address: String
  creatorFees: String
  hash: String
  maximum: Int
  superType: String
  supply: Int
  blockchain: String
  creator: String
  owner: String
  type: String
}

input BlockchainNetworkMainInsertInput {
  browser: String
  endpoint: String
}

input NetworkInsertInput {
  _id: ObjectId
  integration: String
  name: String
  type: String
}

input CollectionMediumQueryInput {
  mimetype_lte: String
  role: String
  height_lte: Int
  hash_lt: String
  height_ne: Int
  mimetype_lt: String
  subtitle_exists: Boolean
  width: Int
  role_gt: String
  mimetype_gte: String
  hash: String
  weight_gte: Int
  height_exists: Boolean
  weight_exists: Boolean
  mimetype: String
  width_lt: Int
  weight_nin: [Int]
  mimetype_exists: Boolean
  hash_gte: String
  subtitle_lt: String
  height_in: [Int]
  mimetype_nin: [String]
  hash_gt: String
  mimetype_ne: String
  role_gte: String
  mimetype_gt: String
  weight_ne: Int
  width_exists: Boolean
  hash_in: [String]
  weight_lt: Int
  weight_in: [Int]
  subtitle_gte: String
  weight_lte: Int
  subtitle_nin: [String]
  OR: [CollectionMediumQueryInput!]
  weight: Int
  width_nin: [Int]
  width_lte: Int
  height_nin: [Int]
  role_lt: String
  width_gte: Int
  subtitle_ne: String
  height_gte: Int
  subtitle_gt: String
  width_ne: Int
  height_lt: Int
  hash_ne: String
  role_nin: [String]
  weight_gt: Int
  width_gt: Int
  height_gt: Int
  hash_exists: Boolean
  hash_lte: String
  role_ne: String
  hash_nin: [String]
  subtitle_lte: String
  mimetype_in: [String]
  height: Int
  role_in: [String]
  AND: [CollectionMediumQueryInput!]
  role_exists: Boolean
  subtitle_in: [String]
  role_lte: String
  subtitle: String
  width_in: [Int]
}

input DailyQueryInput {
  totalSalesSum_nin: [Float]
  endorsementAverage_nin: [Float]
  endorsementAverage_gte: Float
  totalSum_ne: Float
  date_ne: Float
  endorsementMin_gte: Float
  _id_exists: Boolean
  endorsementMax_nin: [Float]
  saleAverage_in: [Float]
  date_lt: Float
  saleMin_lt: Float
  OR: [DailyQueryInput!]
  saleAverage_ne: Float
  saleMax_lte: Float
  date_nin: [Float]
  saleAverage_lt: Float
  tokensCreated_exists: Boolean
  totalSalesSum_exists: Boolean
  saleAverage: Float
  saleAverage_exists: Boolean
  saleMax_lt: Float
  totalSalesSum_ne: Float
  updatedAt: Float
  endorsementMax_lt: Float
  endorsementMax_gt: Float
  totalSalesSum_lt: Float
  totalEndorsementsSum_in: [Float]
  createdAt_gte: Float
  endorsementAverage_gt: Float
  _id_ne: ObjectId
  tokensSold_exists: Boolean
  saleMin: Float
  updatedAt_gt: Float
  saleMin_ne: Float
  endorsementMax_exists: Boolean
  totalSum_gt: Float
  tokensSold: Int
  tokensCreated_lte: Int
  saleMin_exists: Boolean
  saleMin_in: [Float]
  totalSalesSum: Float
  date_in: [Float]
  updatedAt_exists: Boolean
  _id_nin: [ObjectId]
  totalSum_in: [Float]
  totalEndorsementsSum: Float
  endorsementMin_lte: Float
  blockchain_ne: String
  blockchain_lte: String
  blockchain_nin: [String]
  tokensSold_lte: Int
  updatedAt_gte: Float
  updatedAt_nin: [Float]
  endorsementMin_ne: Float
  date_gte: Float
  blockchain_gte: String
  createdAt_lt: Float
  date_exists: Boolean
  saleMin_gt: Float
  AND: [DailyQueryInput!]
  tokensCreated_gte: Int
  saleMin_nin: [Float]
  endorsementAverage: Float
  endorsementAverage_ne: Float
  date: Float
  tokensCreated: Int
  endorsementMax_gte: Float
  totalSum_nin: [Float]
  tokensSold_lt: Int
  tokensCreated_gt: Int
  tokensCreated_in: [Int]
  updatedAt_in: [Float]
  tokensEndorsed_in: [Int]
  tokensSold_in: [Int]
  tokensEndorsed_gte: Int
  endorsementMax_lte: Float
  tokensEndorsed: Int
  saleMax_in: [Float]
  tokensEndorsed_ne: Int
  tokensCreated_lt: Int
  endorsementMin: Float
  tokensEndorsed_lte: Int
  saleMax_gt: Float
  _id: ObjectId
  tokensSold_ne: Int
  blockchain_exists: Boolean
  updatedAt_ne: Float
  totalEndorsementsSum_exists: Boolean
  endorsementMin_exists: Boolean
  totalSum: Float
  totalSalesSum_lte: Float
  createdAt_nin: [Float]
  createdAt_gt: Float
  totalSum_exists: Boolean
  blockchain: String
  _id_lt: ObjectId
  blockchain_gt: String
  endorsementMin_nin: [Float]
  endorsementAverage_in: [Float]
  _id_in: [ObjectId]
  saleMax_nin: [Float]
  tokensSold_gt: Int
  tokensEndorsed_gt: Int
  _id_gte: ObjectId
  updatedAt_lt: Float
  totalEndorsementsSum_ne: Float
  totalEndorsementsSum_gte: Float
  createdAt: Float
  _id_gt: ObjectId
  blockchain_in: [String]
  totalSum_lte: Float
  saleAverage_gt: Float
  endorsementAverage_lt: Float
  endorsementMax_ne: Float
  endorsementMin_lt: Float
  totalSalesSum_gt: Float
  tokensEndorsed_lt: Int
  tokensSold_gte: Int
  _id_lte: ObjectId
  totalSalesSum_in: [Float]
  saleMin_gte: Float
  endorsementMin_gt: Float
  saleMax_exists: Boolean
  saleAverage_nin: [Float]
  tokensEndorsed_nin: [Int]
  totalEndorsementsSum_lt: Float
  totalSum_lt: Float
  saleAverage_gte: Float
  tokensCreated_ne: Int
  tokensCreated_nin: [Int]
  endorsementMin_in: [Float]
  blockchain_lt: String
  saleMax_ne: Float
  totalSum_gte: Float
  endorsementAverage_exists: Boolean
  endorsementMax_in: [Float]
  updatedAt_lte: Float
  totalSalesSum_gte: Float
  createdAt_lte: Float
  date_lte: Float
  saleMin_lte: Float
  tokensEndorsed_exists: Boolean
  totalEndorsementsSum_gt: Float
  saleMax_gte: Float
  totalEndorsementsSum_lte: Float
  createdAt_exists: Boolean
  createdAt_in: [Float]
  createdAt_ne: Float
  saleMax: Float
  saleAverage_lte: Float
  endorsementAverage_lte: Float
  date_gt: Float
  endorsementMax: Float
  totalEndorsementsSum_nin: [Float]
  tokensSold_nin: [Int]
}

type AuctionRawBid {
  bidCreator: String
  bidValue: String
}

input Col1LayerQueryInput {
  layer_exists: Boolean
  images_in: [Col1LayerImageQueryInput]
  layer_nin: [String]
  points_nin: [Col1LayerPointQueryInput]
  images_exists: Boolean
  layer_ne: String
  layer_in: [String]
  points_exists: Boolean
  layer_gte: String
  OR: [Col1LayerQueryInput!]
  images_nin: [Col1LayerImageQueryInput]
  points_in: [Col1LayerPointQueryInput]
  points: [Col1LayerPointQueryInput]
  layer: String
  layer_lte: String
  layer_lt: String
  AND: [Col1LayerQueryInput!]
  layer_gt: String
  images: [Col1LayerImageQueryInput]
}

input ModuleUpdateInput {
  updatedAt: Float
  createdAt_unset: Boolean
  module: String
  nameType: String
  createdAt_inc: Float
  updatedAt_unset: Boolean
  updatedAt_inc: Float
  type_unset: Boolean
  createdAt: Float
  page_unset: Boolean
  module_unset: Boolean
  nameType_unset: Boolean
  _id_unset: Boolean
  type: String
  _id: ObjectId
  page: String
}

type TokenCol {
  _id: ObjectId
  address: String
  createdAt: Float
  images: [TokenColImage]
  merged: String
  owner: String
  seriesId: String
  tokenId: String
  updatedAt: Float
}

type SeriesDeployed {
  address: String
  blockchain: String
  creator: String
  creatorFees: String
  hash: String
  maximum: Int
  owner: String
  superType: String
  supply: Int
  type: String
}

type Collection {
  _id: ObjectId
  about: String
  collectionID: String
  createdAt: Float
  creator: String
  creatorAccountNumber: Int
  deployed: CollectionDeployed
  media: [CollectionMedium]
  qualification: Int
  raw: CollectionRaw
  title: String
  tokensInCollection: Int
  updatedAt: Float
}

input TokenRawQueryInput {
  title_gt: String
  seriesID_lte: String
  owner_gte: String
  type_lte: String
  creator_gt: String
  type_in: [String]
  creator_exists: Boolean
  numberOfEditions_in: [Int]
  description: String
  blockchain_nin: [String]
  title_gte: String
  height_in: [String]
  numberOfEditions_gt: Int
  blockchain_gte: String
  hash_gte: String
  height_lte: String
  numberOfEditions_lt: Int
  height_exists: Boolean
  title_lt: String
  superType_in: [String]
  creatorFees: String
  qualification_ne: Int
  seriesID_exists: Boolean
  qualification_nin: [Int]
  AND: [TokenRawQueryInput!]
  type_ne: String
  hash_exists: Boolean
  description_lt: String
  qualification_exists: Boolean
  owner_nin: [String]
  width_in: [String]
  seriesID_nin: [String]
  qualification_in: [Int]
  height_gt: String
  creatorFees_gt: String
  blockchain_lte: String
  description_ne: String
  type_gte: String
  collectionID_ne: String
  creator_lt: String
  description_nin: [String]
  width_lte: String
  height_nin: [String]
  width_ne: String
  blockchain_exists: Boolean
  type_exists: Boolean
  creatorFees_exists: Boolean
  creator: String
  title_exists: Boolean
  owner_lte: String
  owner_in: [String]
  collectionID_gt: String
  blockchain_ne: String
  height: String
  collectionID_in: [String]
  blockchain_gt: String
  collectionID: String
  superType_exists: Boolean
  title_lte: String
  title_in: [String]
  media_in: [TokenRawMediumQueryInput]
  creator_gte: String
  creatorFees_in: [String]
  collectionID_lt: String
  superType_lt: String
  height_ne: String
  owner: String
  title_nin: [String]
  seriesID_gt: String
  width_exists: Boolean
  creatorFees_gte: String
  type: String
  collectionID_exists: Boolean
  usersWhoShared: [Int]
  width_lt: String
  owner_exists: Boolean
  superType_gte: String
  height_gte: String
  numberOfEditions: Int
  qualification: Int
  creatorFees_lte: String
  title: String
  OR: [TokenRawQueryInput!]
  blockchain_lt: String
  owner_ne: String
  hash_nin: [String]
  blockchain: String
  hash_gt: String
  creator_lte: String
  numberOfEditions_exists: Boolean
  seriesID_gte: String
  superType_gt: String
  superType_lte: String
  hash_lt: String
  numberOfEditions_ne: Int
  creatorFees_nin: [String]
  width: String
  hash_ne: String
  usersWhoShared_in: [Int]
  blockchain_in: [String]
  hash: String
  width_gt: String
  media: [TokenRawMediumQueryInput]
  seriesID: String
  width_gte: String
  description_gte: String
  title_ne: String
  numberOfEditions_nin: [Int]
  qualification_gt: Int
  numberOfEditions_gte: Int
  type_gt: String
  usersWhoShared_exists: Boolean
  type_lt: String
  qualification_lte: Int
  collectionID_nin: [String]
  collectionID_gte: String
  width_nin: [String]
  description_in: [String]
  collectionID_lte: String
  creator_nin: [String]
  description_lte: String
  height_lt: String
  owner_lt: String
  hash_lte: String
  hash_in: [String]
  numberOfEditions_lte: Int
  type_nin: [String]
  usersWhoShared_nin: [Int]
  creatorFees_ne: String
  superType_ne: String
  seriesID_in: [String]
  superType_nin: [String]
  description_gt: String
  superType: String
  description_exists: Boolean
  media_exists: Boolean
  creatorFees_lt: String
  owner_gt: String
  media_nin: [TokenRawMediumQueryInput]
  seriesID_lt: String
  qualification_gte: Int
  seriesID_ne: String
  creator_ne: String
  qualification_lt: Int
  creator_in: [String]
}

input IpfQueryInput {
  mediaHash_gt: String
  mediaHash_exists: Boolean
  _id_lt: ObjectId
  createdAt_gte: Float
  _id_lte: ObjectId
  ipfsHash_in: [String]
  mediaHash_lt: String
  AND: [IpfQueryInput!]
  createdAt_gt: Float
  createdAt_in: [Float]
  createdAt: Float
  ipfsHash_exists: Boolean
  mediaHash_nin: [String]
  _id_in: [ObjectId]
  mediaHash_ne: String
  mediaHash_lte: String
  ipfsHash_lt: String
  _id_nin: [ObjectId]
  ipfsHash_gte: String
  _id_exists: Boolean
  _id_gt: ObjectId
  mediaHash: String
  ipfsHash_ne: String
  mediaHash_in: [String]
  ipfsHash_lte: String
  _id_ne: ObjectId
  OR: [IpfQueryInput!]
  createdAt_lt: Float
  createdAt_nin: [Float]
  createdAt_lte: Float
  ipfsHash_gt: String
  _id: ObjectId
  createdAt_ne: Float
  mediaHash_gte: String
  createdAt_exists: Boolean
  ipfsHash: String
  ipfsHash_nin: [String]
  _id_gte: ObjectId
}

input Swift_codeInsertInput {
  code: String
  description: String
  _id: ObjectId
  actionCapture: String
  actorField: String
  additionalInfo: String
  applicableBlockchains: [String]
  applicableContractType: [String]
}

enum LocaleSortByInput {
  _ID_ASC
  _ID_DESC
  LANG_DESC
  MODULENAME_DESC
  STRINGNAME_DESC
  STRING_DESC
  CREATEDAT_ASC
  UPDATEDAT_ASC
  MODULE_ASC
  STRINGNAME_ASC
  STRING_ASC
  CREATEDAT_DESC
  LANG_ASC
  MODULE_DESC
  MODULENAME_ASC
  UPDATEDAT_DESC
}

input RoyaltyQueryInput {
  upperValue_exists: Boolean
  AND: [RoyaltyQueryInput!]
  upperValue_ne: Float
  count_lt: Int
  percentage_gte: Float
  upperValue_nin: [Float]
  _id_gt: ObjectId
  percentage_exists: Boolean
  _id_gte: ObjectId
  lowerValue_nin: [Float]
  upperValue_lt: Float
  upperValue_in: [Float]
  percentage_nin: [Float]
  lowerValue_exists: Boolean
  _id_in: [ObjectId]
  count: Int
  count_nin: [Int]
  count_gte: Int
  _id: ObjectId
  percentage_lte: Float
  upperValue: Float
  _id_lte: ObjectId
  _id_nin: [ObjectId]
  count_lte: Int
  upperValue_gte: Float
  _id_exists: Boolean
  percentage_in: [Float]
  count_in: [Int]
  lowerValue_lte: Float
  _id_ne: ObjectId
  lowerValue_in: [Float]
  percentage_ne: Float
  count_exists: Boolean
  lowerValue_gte: Float
  count_ne: Int
  percentage_lt: Float
  OR: [RoyaltyQueryInput!]
  percentage: Float
  count_gt: Int
  upperValue_lte: Float
  lowerValue_gt: Float
  upperValue_gt: Float
  lowerValue_lt: Float
  lowerValue_ne: Float
  _id_lt: ObjectId
  lowerValue: Float
  percentage_gt: Float
}

enum Contract_typeSortByInput {
  OBJECTTYPE_ASC
  STATUS_ASC
  _ID_ASC
  _ID_DESC
  NUMBEROFLEVELS_ASC
  LONGTYPE_DESC
  NUMBEROFLEVELS_DESC
  OBJECTTYPE_DESC
  STATUS_DESC
  FRONTENDNAME_ASC
  FRONTENDNAME_DESC
  LONGTYPE_ASC
}

input AuctionRawInsertInput {
  auctionCreator: String
  tokenAddress: String
  tokenID: String
  endTime: Float
  showcaseFee: String
  startTime: Float
  superType: String
  bids: [AuctionRawBidInsertInput]
  startBid: String
  bidStep: String
}

input ActionQueryInput {
  actionAttributes_exists: Boolean
  blockchain_gt: String
  updatedAt_nin: [Float]
  createdAt_gte: Float
  OR: [ActionQueryInput!]
  _id_ne: ObjectId
  AND: [ActionQueryInput!]
  updatedAt_gte: Float
  updatedAt_in: [Float]
  _id_in: [ObjectId]
  updatedAt_lt: Float
  createdAt_gt: Float
  blockchain_gte: String
  updatedAt: Float
  _id_gt: ObjectId
  tokenAttributes_exists: Boolean
  updatedAt_lte: Float
  createdAt_lte: Float
  updatedAt_gt: Float
  createdAt_in: [Float]
  blockchain_nin: [String]
  _id_lte: ObjectId
  blockchain_in: [String]
  actionAttributes: ActionActionAttributeQueryInput
  updatedAt_ne: Float
  createdAt_lt: Float
  tokenAttributes: ActionTokenAttributeQueryInput
  _id_nin: [ObjectId]
  blockchain_ne: String
  createdAt_exists: Boolean
  createdAt_nin: [Float]
  _id: ObjectId
  blockchain: String
  _id_gte: ObjectId
  _id_exists: Boolean
  message: ActionMessageQueryInput
  message_exists: Boolean
  blockchain_exists: Boolean
  _id_lt: ObjectId
  blockchain_lt: String
  blockchain_lte: String
  updatedAt_exists: Boolean
  createdAt: Float
  createdAt_ne: Float
}

input ActionColActionAttributeUpdateInput {
  actionCapture_unset: Boolean
  actionCapture: String
}

input TokenColInsertInput {
  _id: ObjectId
  tokenId: String
  seriesId: String
  updatedAt: Float
  address: String
  images: [TokenColImageInsertInput]
  merged: String
  createdAt: Float
  owner: String
}

type CollectionMedium {
  hash: String
  height: Int
  mimetype: String
  role: String
  subtitle: String
  weight: Int
  width: Int
}

enum RoyaltySortByInput {
  COUNT_ASC
  LOWERVALUE_ASC
  PERCENTAGE_DESC
  PERCENTAGE_ASC
  UPPERVALUE_ASC
  UPPERVALUE_DESC
  _ID_ASC
  _ID_DESC
  COUNT_DESC
  LOWERVALUE_DESC
}

enum PaginationCollectionSort {
  CREATED_ASC
  CREATED_DESC
}

input ActionColTokenAttributeInsertInput {
  seriesCreator: String
  seriesID: String
  tokenID: String
}

input Swift_codeQueryInput {
  code_lt: String
  actionCapture_in: [String]
  description_gte: String
  additionalInfo_in: [String]
  applicableContractType_nin: [String]
  additionalInfo_gte: String
  code_in: [String]
  additionalInfo_lte: String
  applicableContractType: [String]
  _id_gte: ObjectId
  actorField_ne: String
  actionCapture_ne: String
  applicableBlockchains_in: [String]
  description_gt: String
  actionCapture_gte: String
  description_exists: Boolean
  _id_in: [ObjectId]
  _id_lte: ObjectId
  actorField_exists: Boolean
  actorField_gt: String
  applicableBlockchains: [String]
  actorField_nin: [String]
  _id_nin: [ObjectId]
  applicableBlockchains_nin: [String]
  _id_gt: ObjectId
  AND: [Swift_codeQueryInput!]
  code_lte: String
  code_gt: String
  actionCapture_gt: String
  additionalInfo_lt: String
  additionalInfo_ne: String
  OR: [Swift_codeQueryInput!]
  applicableContractType_exists: Boolean
  actionCapture: String
  actorField_in: [String]
  description_in: [String]
  description: String
  actorField_lte: String
  applicableBlockchains_exists: Boolean
  description_nin: [String]
  _id: ObjectId
  actorField_lt: String
  _id_ne: ObjectId
  additionalInfo_gt: String
  description_lt: String
  description_ne: String
  code_exists: Boolean
  actionCapture_exists: Boolean
  _id_exists: Boolean
  additionalInfo_exists: Boolean
  actorField: String
  code_ne: String
  code_gte: String
  code_nin: [String]
  actionCapture_nin: [String]
  description_lte: String
  code: String
  applicableContractType_in: [String]
  actionCapture_lte: String
  actorField_gte: String
  additionalInfo_nin: [String]
  actionCapture_lt: String
  additionalInfo: String
  _id_lt: ObjectId
}

input IntegrationQueryInput {
  subType_gt: String
  _id_ne: ObjectId
  code_lte: String
  status_ne: String
  subType_exists: Boolean
  _id_lt: ObjectId
  blockchain_lt: String
  code_nin: [String]
  blockchain_gt: String
  subType_lt: String
  _id: ObjectId
  type_gte: String
  subType_nin: [String]
  name_in: [String]
  type_lte: String
  type_exists: Boolean
  subType: String
  subType_lte: String
  status: String
  _id_gte: ObjectId
  blockchain_ne: String
  code_gt: String
  blockchain_in: [String]
  code_gte: String
  type: String
  code_in: [String]
  AND: [IntegrationQueryInput!]
  _id_gt: ObjectId
  code: String
  name_gte: String
  status_in: [String]
  blockchain_gte: String
  name: String
  status_lt: String
  blockchain_lte: String
  _id_nin: [ObjectId]
  type_gt: String
  status_gt: String
  blockchain: String
  subType_in: [String]
  name_gt: String
  _id_in: [ObjectId]
  status_lte: String
  name_ne: String
  type_lt: String
  OR: [IntegrationQueryInput!]
  code_exists: Boolean
  type_in: [String]
  code_lt: String
  subType_ne: String
  blockchain_exists: Boolean
  status_nin: [String]
  code_ne: String
  name_lte: String
  type_nin: [String]
  status_gte: String
  _id_lte: ObjectId
  name_lt: String
  name_nin: [String]
  status_exists: Boolean
  name_exists: Boolean
  _id_exists: Boolean
  type_ne: String
  blockchain_nin: [String]
  subType_gte: String
}

input CollectionRawMediumInsertInput {
  hash: String
  height: Int
  mimetype: String
  role: String
  subtitle: String
  weight: Int
  width: Int
}

input Ui_assetQueryInput {
  _id_gt: ObjectId
  imageLanding_nin: [String]
  managementIDs: String
  createdAt_in: [Float]
  image_gte: String
  imageLanding_lt: String
  managementIDs_gt: String
  _id: ObjectId
  _id_exists: Boolean
  imageLanding: String
  textLanding_lte: String
  updatedAt: Float
  assetSubtitle_exists: Boolean
  assetTitle_gte: String
  image_lt: String
  assetSubtitle_gte: String
  assetSubtitle_gt: String
  _id_lt: ObjectId
  textLanding: String
  createdAt_ne: Float
  AND: [Ui_assetQueryInput!]
  airtableId_ne: String
  textLanding_exists: Boolean
  createdAt_nin: [Float]
  image: String
  assetTitle_lte: String
  updatedAt_ne: Float
  assetID: String
  image_gt: String
  assetSubtitle_lte: String
  assetSubtitle_in: [String]
  image_nin: [String]
  _id_gte: ObjectId
  _id_lte: ObjectId
  createdAt_exists: Boolean
  image_in: [String]
  assetTitle_nin: [String]
  assetID_lt: String
  airtableId_exists: Boolean
  managementIDs_lte: String
  updatedAt_lte: Float
  airtableId_lte: String
  imageLanding_in: [String]
  assetID_exists: Boolean
  managementIDs_in: [String]
  createdAt_lte: Float
  image_exists: Boolean
  createdAt_gte: Float
  updatedAt_gte: Float
  updatedAt_exists: Boolean
  managementIDs_ne: String
  OR: [Ui_assetQueryInput!]
  textLanding_lt: String
  createdAt: Float
  updatedAt_gt: Float
  updatedAt_nin: [Float]
  updatedAt_lt: Float
  assetID_lte: String
  managementIDs_gte: String
  imageLanding_gte: String
  managementIDs_exists: Boolean
  assetTitle_in: [String]
  assetSubtitle_ne: String
  updatedAt_in: [Float]
  assetTitle_ne: String
  airtableId_nin: [String]
  assetTitle_exists: Boolean
  textLanding_ne: String
  assetSubtitle_lt: String
  airtableId_in: [String]
  createdAt_lt: Float
  textLanding_gt: String
  airtableId_gt: String
  assetTitle_gt: String
  createdAt_gt: Float
  textLanding_gte: String
  imageLanding_exists: Boolean
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
  managementIDs_nin: [String]
  assetTitle: String
  image_lte: String
  _id_ne: ObjectId
  image_ne: String
  textLanding_nin: [String]
  imageLanding_gt: String
  assetID_gte: String
  assetID_gt: String
  airtableId_gte: String
  assetSubtitle: String
  assetID_nin: [String]
  managementIDs_lt: String
  imageLanding_lte: String
  textLanding_in: [String]
  airtableId: String
  assetID_in: [String]
  imageLanding_ne: String
  assetID_ne: String
  airtableId_lt: String
  assetTitle_lt: String
  assetSubtitle_nin: [String]
}

input HourlyUpdateInput {
  time_inc: Float
  BNBtoUSD: Float
  time_unset: Boolean
  EVERtoUSD: Float
  blockchain_unset: Boolean
  USD_unset: Boolean
  time: Float
  EVERtoUSD_unset: Boolean
  BNBtoUSD_unset: Boolean
  USD: Float
  USD_inc: Float
  BNBtoUSD_inc: Float
  EVERtoUSD_inc: Float
  _id: ObjectId
  _id_unset: Boolean
  blockchain: String
}

input Contract_typeHashFieldLayerImageInsertInput {
  hash: String
  imageIndex: String
  mimetype: String
  rarityWeight: String
  weight: String
}

input TriggerQueryInput {
  OR: [TriggerQueryInput!]
  lastDate_lt: Float
  lastDate_ne: Float
  name_nin: [String]
  lastDate_in: [Float]
  name_exists: Boolean
  name_in: [String]
  _id_lt: ObjectId
  _id_in: [ObjectId]
  lastDate_lte: Float
  name_lte: String
  _id_nin: [ObjectId]
  AND: [TriggerQueryInput!]
  name_lt: String
  _id_exists: Boolean
  _id_gte: ObjectId
  name: String
  lastDate_exists: Boolean
  name_ne: String
  lastDate: Float
  _id_lte: ObjectId
  _id_ne: ObjectId
  name_gte: String
  _id_gt: ObjectId
  lastDate_gte: Float
  lastDate_nin: [Float]
  name_gt: String
  lastDate_gt: Float
  _id: ObjectId
}

type Auction {
  _id: ObjectId
  auctionID: String
  createdAt: Float
  deployed: AuctionDeployed
  raw: AuctionRaw
  updatedAt: Float
}

input IntegrationInsertInput {
  blockchain: String
  code: String
  name: String
  status: String
  subType: String
  type: String
  _id: ObjectId
}

type Primary_json {
  _id: ObjectId
  createdAt: Float
  hash: String
  jsonString: String
}

input AskRawUpdateInput {
  blockchain_unset: Boolean
  tokenAddress: String
  endTime_inc: Float
  superType: String
  superType_unset: Boolean
  tokenAddress_unset: Boolean
  currentAskValue: String
  endTime: Float
  showcaseFee: String
  askCreator: String
  blockchain: String
  currentAskValue_unset: Boolean
  endTime_unset: Boolean
  askCreator_unset: Boolean
  showcaseFee_unset: Boolean
  values_unset: Boolean
  tokenID: String
  tokenID_unset: Boolean
  values: [AskRawValueUpdateInput]
}

input CollectionDeployedQueryInput {
  hash_nin: [String]
  privacy_gte: String
  supply: Int
  hash_ne: String
  address: String
  hash_lte: String
  creator_lte: String
  supply_gt: Int
  privacy_ne: String
  blockchain_in: [String]
  superType_gt: String
  type_in: [String]
  type_lt: String
  privacy_gt: String
  superType_gte: String
  hash_gt: String
  superType_ne: String
  blockNumber_lte: Long
  supply_lt: Int
  blockNumber: Long
  hash_lt: String
  OR: [CollectionDeployedQueryInput!]
  supply_gte: Int
  blockNumber_nin: [Long]
  blockchain: String
  creator_ne: String
  supply_in: [Int]
  address_lt: String
  privacy_in: [String]
  hash_in: [String]
  type_gt: String
  type_ne: String
  hash_exists: Boolean
  superType_exists: Boolean
  supply_lte: Int
  AND: [CollectionDeployedQueryInput!]
  superType_lt: String
  type_nin: [String]
  address_gte: String
  superType: String
  blockchain_nin: [String]
  creator_in: [String]
  type_lte: String
  creator_exists: Boolean
  blockchain_gt: String
  address_ne: String
  blockchain_lt: String
  blockNumber_lt: Long
  type_exists: Boolean
  address_gt: String
  hash: String
  hash_gte: String
  privacy_lt: String
  type_gte: String
  address_exists: Boolean
  superType_lte: String
  blockchain_ne: String
  supply_nin: [Int]
  creator_gt: String
  blockNumber_exists: Boolean
  blockNumber_ne: Long
  privacy_nin: [String]
  superType_nin: [String]
  creator_gte: String
  blockchain_gte: String
  creator: String
  privacy_lte: String
  privacy: String
  supply_ne: Int
  blockNumber_gt: Long
  blockchain_lte: String
  supply_exists: Boolean
  blockchain_exists: Boolean
  blockNumber_gte: Long
  creator_nin: [String]
  type: String
  address_lte: String
  creator_lt: String
  superType_in: [String]
  privacy_exists: Boolean
  address_in: [String]
  address_nin: [String]
  blockNumber_in: [Long]
}

input Ui_moduleInsertInput {
  mode: String
  scope: String
  mainLink: String
  buttonType: String
  timerVisible: Boolean
  managementIDs: String
  status: String
  updatedAt: Float
  buttonName: String
  moduleID: String
  autoStart: Float
  autoFinish: Float
  page: String
  buttonLink: String
  name: String
  _id: ObjectId
  specialFeature: String
  comment: String
  airtableId: String
  createdAt: Float
  itemType: String
  buttonAction: String
}

input CollectionMediumUpdateInput {
  width: Int
  subtitle: String
  hash_unset: Boolean
  role: String
  hash: String
  height_inc: Int
  weight_unset: Boolean
  weight_inc: Int
  width_inc: Int
  mimetype_unset: Boolean
  mimetype: String
  role_unset: Boolean
  subtitle_unset: Boolean
  width_unset: Boolean
  weight: Int
  height_unset: Boolean
  height: Int
}

input ActionColMessageQueryInput {
  time_gte: Float
  AND: [ActionColMessageQueryInput!]
  time_lt: Float
  superType_exists: Boolean
  superType_lt: String
  senderID_exists: Boolean
  actionCode: String
  actionCode_ne: String
  senderAddress_in: [String]
  senderID_gt: String
  actionCode_nin: [String]
  time: Float
  senderAddress_lt: String
  superType_ne: String
  time_lte: Float
  senderID_ne: String
  actionCode_lte: String
  superType_nin: [String]
  hash: String
  hash_lte: String
  time_nin: [Float]
  senderID_nin: [String]
  actionCode_in: [String]
  superType_lte: String
  actionCode_lt: String
  actionCode_gte: String
  senderID: String
  time_in: [Float]
  senderID_lte: String
  hash_gte: String
  senderAddress_lte: String
  senderAddress_ne: String
  senderAddress_nin: [String]
  senderID_in: [String]
  time_ne: Float
  actionCode_gt: String
  senderID_lt: String
  time_gt: Float
  superType_gt: String
  hash_lt: String
  hash_exists: Boolean
  senderID_gte: String
  hash_ne: String
  hash_nin: [String]
  hash_gt: String
  senderAddress_gte: String
  senderAddress_gt: String
  hash_in: [String]
  actionCode_exists: Boolean
  senderAddress_exists: Boolean
  time_exists: Boolean
  senderAddress: String
  superType_gte: String
  OR: [ActionColMessageQueryInput!]
  superType_in: [String]
  superType: String
}

enum CollectionSortByInput {
  CREATEDAT_DESC
  CREATORACCOUNTNUMBER_ASC
  COLLECTIONID_ASC
  CREATEDAT_ASC
  CREATOR_ASC
  CREATOR_DESC
  TOKENSINCOLLECTION_ASC
  UPDATEDAT_ASC
  ABOUT_ASC
  ABOUT_DESC
  CREATORACCOUNTNUMBER_DESC
  QUALIFICATION_ASC
  QUALIFICATION_DESC
  UPDATEDAT_DESC
  _ID_DESC
  COLLECTIONID_DESC
  TITLE_DESC
  TOKENSINCOLLECTION_DESC
  _ID_ASC
  TITLE_ASC
}

enum ActionColSortByInput {
  _ID_ASC
  _ID_DESC
}

type Contract_typeHashFieldLayer {
  images: Contract_typeHashFieldLayerImage
  layerIndex: String
}

input BlockchainNetworkTestQueryInput {
  browser_exists: Boolean
  endpoint_gte: String
  OR: [BlockchainNetworkTestQueryInput!]
  endpoint_gt: String
  endpoint_ne: String
  browser: String
  browser_gte: String
  endpoint: String
  endpoint_lte: String
  browser_nin: [String]
  browser_lte: String
  endpoint_exists: Boolean
  AND: [BlockchainNetworkTestQueryInput!]
  browser_ne: String
  browser_in: [String]
  browser_lt: String
  endpoint_lt: String
  endpoint_in: [String]
  endpoint_nin: [String]
  browser_gt: String
}

type AskDeployedValue {
  askTime: Float
  askValue: String
}

type Integration {
  _id: ObjectId
  blockchain: String
  code: String
  name: String
  status: String
  subType: String
  type: String
}

input ActionMessageQueryInput {
  resolution_ne: String
  resolution_nin: [String]
  time_exists: Boolean
  superType_ne: String
  senderID_ne: String
  time_gt: Float
  senderAddress_ne: String
  superType_lt: String
  senderID_gte: String
  senderAddress_in: [String]
  hash: String
  AND: [ActionMessageQueryInput!]
  senderID_lte: String
  hash_ne: String
  resolution_in: [String]
  time_lt: Float
  actionCode: Swift_codeQueryInput
  senderID_in: [String]
  hash_exists: Boolean
  superType_gt: String
  hash_lte: String
  superType_nin: [String]
  superType_gte: String
  time_ne: Float
  resolution_lte: String
  resolution_lt: String
  senderID_lt: String
  senderID_nin: [String]
  hash_gt: String
  senderAddress_lt: String
  senderAddress_lte: String
  time: Float
  hash_gte: String
  hash_lt: String
  senderAddress_gt: String
  senderID_exists: Boolean
  hash_in: [String]
  OR: [ActionMessageQueryInput!]
  superType_lte: String
  resolution: String
  senderID_gt: String
  time_gte: Float
  resolution_gte: String
  senderAddress_nin: [String]
  senderID: String
  time_lte: Float
  senderAddress_gte: String
  time_nin: [Float]
  superType_exists: Boolean
  actionCode_exists: Boolean
  hash_nin: [String]
  superType_in: [String]
  senderAddress_exists: Boolean
  resolution_exists: Boolean
  time_in: [Float]
  superType: String
  resolution_gt: String
  senderAddress: String
}

type Mutation {
  deleteManyActionCols(query: ActionColQueryInput): DeleteManyPayload
  deleteManyActions(query: ActionQueryInput): DeleteManyPayload
  deleteManyAddress_abis(query: Address_abiQueryInput): DeleteManyPayload
  deleteManyAsks(query: AskQueryInput): DeleteManyPayload
  deleteManyAuctions(query: AuctionQueryInput): DeleteManyPayload
  deleteManyBids(query: BidQueryInput): DeleteManyPayload
  deleteManyBlockchains(query: BlockchainQueryInput): DeleteManyPayload
  deleteManyCol1s(query: Col1QueryInput): DeleteManyPayload
  deleteManyCollections(query: CollectionQueryInput): DeleteManyPayload
  deleteManyCommissions(query: CommissionQueryInput): DeleteManyPayload
  deleteManyContract_types(query: Contract_typeQueryInput): DeleteManyPayload
  deleteManyContracts(query: ContractQueryInput): DeleteManyPayload
  deleteManyDailies(query: DailyQueryInput): DeleteManyPayload
  deleteManyEndorsements(query: EndorsementQueryInput): DeleteManyPayload
  deleteManyEvents(query: EventQueryInput): DeleteManyPayload
  deleteManyFormats(query: FormatQueryInput): DeleteManyPayload
  deleteManyHourlies(query: HourlyQueryInput): DeleteManyPayload
  deleteManyIntegrations(query: IntegrationQueryInput): DeleteManyPayload
  deleteManyIpfs(query: IpfQueryInput): DeleteManyPayload
  deleteManyLikes(query: LikeQueryInput): DeleteManyPayload
  deleteManyLocales(query: LocaleQueryInput): DeleteManyPayload
  deleteManyModules(query: ModuleQueryInput): DeleteManyPayload
  deleteManyNetworks(query: NetworkQueryInput): DeleteManyPayload
  deleteManyNew_sessions(query: New_sessionQueryInput): DeleteManyPayload
  deleteManyOpendata(query: OpendatumQueryInput): DeleteManyPayload
  deleteManyPrimary_jsons(query: Primary_jsonQueryInput): DeleteManyPayload
  deleteManyRoyalties(query: RoyaltyQueryInput): DeleteManyPayload
  deleteManySeriess(query: SeriesQueryInput): DeleteManyPayload
  deleteManySessions(query: SessionQueryInput): DeleteManyPayload
  deleteManySubscriptions(query: SubscriptionQueryInput): DeleteManyPayload
  deleteManySwift_codes(query: Swift_codeQueryInput): DeleteManyPayload
  deleteManySwift_messages(query: Swift_messageQueryInput): DeleteManyPayload
  deleteManyTests(query: TestQueryInput): DeleteManyPayload
  deleteManyTokenCols(query: TokenColQueryInput): DeleteManyPayload
  deleteManyTokens(query: TokenQueryInput): DeleteManyPayload
  deleteManyTriggers(query: TriggerQueryInput): DeleteManyPayload
  deleteManyUi_assets(query: Ui_assetQueryInput): DeleteManyPayload
  deleteManyUi_charts(query: Ui_chartQueryInput): DeleteManyPayload
  deleteManyUi_managements(query: Ui_managementQueryInput): DeleteManyPayload
  deleteManyUi_modules(query: Ui_moduleQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneAction(query: ActionQueryInput!): Action
  deleteOneActionCol(query: ActionColQueryInput!): ActionCol
  deleteOneAddress_abi(query: Address_abiQueryInput!): Address_abi
  deleteOneAsk(query: AskQueryInput!): Ask
  deleteOneAuction(query: AuctionQueryInput!): Auction
  deleteOneBid(query: BidQueryInput!): Bid
  deleteOneBlockchain(query: BlockchainQueryInput!): Blockchain
  deleteOneCol1(query: Col1QueryInput!): Col1
  deleteOneCollection(query: CollectionQueryInput!): Collection
  deleteOneCommission(query: CommissionQueryInput!): Commission
  deleteOneContract(query: ContractQueryInput!): Contract
  deleteOneContract_type(query: Contract_typeQueryInput!): Contract_type
  deleteOneDaily(query: DailyQueryInput!): Daily
  deleteOneEndorsement(query: EndorsementQueryInput!): Endorsement
  deleteOneEvent(query: EventQueryInput!): Event
  deleteOneFormat(query: FormatQueryInput!): Format
  deleteOneHourly(query: HourlyQueryInput!): Hourly
  deleteOneIntegration(query: IntegrationQueryInput!): Integration
  deleteOneIpf(query: IpfQueryInput!): Ipf
  deleteOneLike(query: LikeQueryInput!): Like
  deleteOneLocale(query: LocaleQueryInput!): Locale
  deleteOneModule(query: ModuleQueryInput!): Module
  deleteOneNetwork(query: NetworkQueryInput!): Network
  deleteOneNew_session(query: New_sessionQueryInput!): New_session
  deleteOneOpendatum(query: OpendatumQueryInput!): Opendatum
  deleteOnePrimary_json(query: Primary_jsonQueryInput!): Primary_json
  deleteOneRoyalty(query: RoyaltyQueryInput!): Royalty
  deleteOneSeries(query: SeriesQueryInput!): Series
  deleteOneSession(query: SessionQueryInput!): Session
  deleteOneSubscription(query: SubscriptionQueryInput!): Subscription
  deleteOneSwift_code(query: Swift_codeQueryInput!): Swift_code
  deleteOneSwift_message(query: Swift_messageQueryInput!): Swift_message
  deleteOneTest(query: TestQueryInput!): Test
  deleteOneToken(query: TokenQueryInput!): Token
  deleteOneTokenCol(query: TokenColQueryInput!): TokenCol
  deleteOneTrigger(query: TriggerQueryInput!): Trigger
  deleteOneUi_asset(query: Ui_assetQueryInput!): Ui_asset
  deleteOneUi_chart(query: Ui_chartQueryInput!): Ui_chart
  deleteOneUi_management(query: Ui_managementQueryInput!): Ui_management
  deleteOneUi_module(query: Ui_moduleQueryInput!): Ui_module
  deleteOneUser(query: UserQueryInput!): User
  insertManyActionCols(data: [ActionColInsertInput!]!): InsertManyPayload
  insertManyActions(data: [ActionInsertInput!]!): InsertManyPayload
  insertManyAddress_abis(data: [Address_abiInsertInput!]!): InsertManyPayload
  insertManyAsks(data: [AskInsertInput!]!): InsertManyPayload
  insertManyAuctions(data: [AuctionInsertInput!]!): InsertManyPayload
  insertManyBids(data: [BidInsertInput!]!): InsertManyPayload
  insertManyBlockchains(data: [BlockchainInsertInput!]!): InsertManyPayload
  insertManyCol1s(data: [Col1InsertInput!]!): InsertManyPayload
  insertManyCollections(data: [CollectionInsertInput!]!): InsertManyPayload
  insertManyCommissions(data: [CommissionInsertInput!]!): InsertManyPayload
  insertManyContract_types(data: [Contract_typeInsertInput!]!): InsertManyPayload
  insertManyContracts(data: [ContractInsertInput!]!): InsertManyPayload
  insertManyDailies(data: [DailyInsertInput!]!): InsertManyPayload
  insertManyEndorsements(data: [EndorsementInsertInput!]!): InsertManyPayload
  insertManyEvents(data: [EventInsertInput!]!): InsertManyPayload
  insertManyFormats(data: [FormatInsertInput!]!): InsertManyPayload
  insertManyHourlies(data: [HourlyInsertInput!]!): InsertManyPayload
  insertManyIntegrations(data: [IntegrationInsertInput!]!): InsertManyPayload
  insertManyIpfs(data: [IpfInsertInput!]!): InsertManyPayload
  insertManyLikes(data: [LikeInsertInput!]!): InsertManyPayload
  insertManyLocales(data: [LocaleInsertInput!]!): InsertManyPayload
  insertManyModules(data: [ModuleInsertInput!]!): InsertManyPayload
  insertManyNetworks(data: [NetworkInsertInput!]!): InsertManyPayload
  insertManyNew_sessions(data: [New_sessionInsertInput!]!): InsertManyPayload
  insertManyOpendata(data: [OpendatumInsertInput!]!): InsertManyPayload
  insertManyPrimary_jsons(data: [Primary_jsonInsertInput!]!): InsertManyPayload
  insertManyRoyalties(data: [RoyaltyInsertInput!]!): InsertManyPayload
  insertManySeriess(data: [SeriesInsertInput!]!): InsertManyPayload
  insertManySessions(data: [SessionInsertInput!]!): InsertManyPayload
  insertManySubscriptions(data: [SubscriptionInsertInput!]!): InsertManyPayload
  insertManySwift_codes(data: [Swift_codeInsertInput!]!): InsertManyPayload
  insertManySwift_messages(data: [Swift_messageInsertInput!]!): InsertManyPayload
  insertManyTests(data: [TestInsertInput!]!): InsertManyPayload
  insertManyTokenCols(data: [TokenColInsertInput!]!): InsertManyPayload
  insertManyTokens(data: [TokenInsertInput!]!): InsertManyPayload
  insertManyTriggers(data: [TriggerInsertInput!]!): InsertManyPayload
  insertManyUi_assets(data: [Ui_assetInsertInput!]!): InsertManyPayload
  insertManyUi_charts(data: [Ui_chartInsertInput!]!): InsertManyPayload
  insertManyUi_managements(data: [Ui_managementInsertInput!]!): InsertManyPayload
  insertManyUi_modules(data: [Ui_moduleInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneAction(data: ActionInsertInput!): Action
  insertOneActionCol(data: ActionColInsertInput!): ActionCol
  insertOneAddress_abi(data: Address_abiInsertInput!): Address_abi
  insertOneAsk(data: AskInsertInput!): Ask
  insertOneAuction(data: AuctionInsertInput!): Auction
  insertOneBid(data: BidInsertInput!): Bid
  insertOneBlockchain(data: BlockchainInsertInput!): Blockchain
  insertOneCol1(data: Col1InsertInput!): Col1
  insertOneCollection(data: CollectionInsertInput!): Collection
  insertOneCommission(data: CommissionInsertInput!): Commission
  insertOneContract(data: ContractInsertInput!): Contract
  insertOneContract_type(data: Contract_typeInsertInput!): Contract_type
  insertOneDaily(data: DailyInsertInput!): Daily
  insertOneEndorsement(data: EndorsementInsertInput!): Endorsement
  insertOneEvent(data: EventInsertInput!): Event
  insertOneFormat(data: FormatInsertInput!): Format
  insertOneHourly(data: HourlyInsertInput!): Hourly
  insertOneIntegration(data: IntegrationInsertInput!): Integration
  insertOneIpf(data: IpfInsertInput!): Ipf
  insertOneLike(data: LikeInsertInput!): Like
  insertOneLocale(data: LocaleInsertInput!): Locale
  insertOneModule(data: ModuleInsertInput!): Module
  insertOneNetwork(data: NetworkInsertInput!): Network
  insertOneNew_session(data: New_sessionInsertInput!): New_session
  insertOneOpendatum(data: OpendatumInsertInput!): Opendatum
  insertOnePrimary_json(data: Primary_jsonInsertInput!): Primary_json
  insertOneRoyalty(data: RoyaltyInsertInput!): Royalty
  insertOneSeries(data: SeriesInsertInput!): Series
  insertOneSession(data: SessionInsertInput!): Session
  insertOneSubscription(data: SubscriptionInsertInput!): Subscription
  insertOneSwift_code(data: Swift_codeInsertInput!): Swift_code
  insertOneSwift_message(data: Swift_messageInsertInput!): Swift_message
  insertOneTest(data: TestInsertInput!): Test
  insertOneToken(data: TokenInsertInput!): Token
  insertOneTokenCol(data: TokenColInsertInput!): TokenCol
  insertOneTrigger(data: TriggerInsertInput!): Trigger
  insertOneUi_asset(data: Ui_assetInsertInput!): Ui_asset
  insertOneUi_chart(data: Ui_chartInsertInput!): Ui_chart
  insertOneUi_management(data: Ui_managementInsertInput!): Ui_management
  insertOneUi_module(data: Ui_moduleInsertInput!): Ui_module
  insertOneUser(data: UserInsertInput!): User
  replaceOneAction(query: ActionQueryInput, data: ActionInsertInput!): Action
  replaceOneActionCol(query: ActionColQueryInput, data: ActionColInsertInput!): ActionCol
  replaceOneAddress_abi(query: Address_abiQueryInput, data: Address_abiInsertInput!): Address_abi
  replaceOneAsk(query: AskQueryInput, data: AskInsertInput!): Ask
  replaceOneAuction(query: AuctionQueryInput, data: AuctionInsertInput!): Auction
  replaceOneBid(query: BidQueryInput, data: BidInsertInput!): Bid
  replaceOneBlockchain(query: BlockchainQueryInput, data: BlockchainInsertInput!): Blockchain
  replaceOneCol1(query: Col1QueryInput, data: Col1InsertInput!): Col1
  replaceOneCollection(query: CollectionQueryInput, data: CollectionInsertInput!): Collection
  replaceOneCommission(query: CommissionQueryInput, data: CommissionInsertInput!): Commission
  replaceOneContract(query: ContractQueryInput, data: ContractInsertInput!): Contract
  replaceOneContract_type(query: Contract_typeQueryInput, data: Contract_typeInsertInput!): Contract_type
  replaceOneDaily(query: DailyQueryInput, data: DailyInsertInput!): Daily
  replaceOneEndorsement(query: EndorsementQueryInput, data: EndorsementInsertInput!): Endorsement
  replaceOneEvent(query: EventQueryInput, data: EventInsertInput!): Event
  replaceOneFormat(query: FormatQueryInput, data: FormatInsertInput!): Format
  replaceOneHourly(data: HourlyInsertInput!, query: HourlyQueryInput): Hourly
  replaceOneIntegration(query: IntegrationQueryInput, data: IntegrationInsertInput!): Integration
  replaceOneIpf(data: IpfInsertInput!, query: IpfQueryInput): Ipf
  replaceOneLike(query: LikeQueryInput, data: LikeInsertInput!): Like
  replaceOneLocale(query: LocaleQueryInput, data: LocaleInsertInput!): Locale
  replaceOneModule(query: ModuleQueryInput, data: ModuleInsertInput!): Module
  replaceOneNetwork(query: NetworkQueryInput, data: NetworkInsertInput!): Network
  replaceOneNew_session(query: New_sessionQueryInput, data: New_sessionInsertInput!): New_session
  replaceOneOpendatum(query: OpendatumQueryInput, data: OpendatumInsertInput!): Opendatum
  replaceOnePrimary_json(query: Primary_jsonQueryInput, data: Primary_jsonInsertInput!): Primary_json
  replaceOneRoyalty(query: RoyaltyQueryInput, data: RoyaltyInsertInput!): Royalty
  replaceOneSeries(data: SeriesInsertInput!, query: SeriesQueryInput): Series
  replaceOneSession(query: SessionQueryInput, data: SessionInsertInput!): Session
  replaceOneSubscription(query: SubscriptionQueryInput, data: SubscriptionInsertInput!): Subscription
  replaceOneSwift_code(query: Swift_codeQueryInput, data: Swift_codeInsertInput!): Swift_code
  replaceOneSwift_message(query: Swift_messageQueryInput, data: Swift_messageInsertInput!): Swift_message
  replaceOneTest(query: TestQueryInput, data: TestInsertInput!): Test
  replaceOneToken(data: TokenInsertInput!, query: TokenQueryInput): Token
  replaceOneTokenCol(query: TokenColQueryInput, data: TokenColInsertInput!): TokenCol
  replaceOneTrigger(query: TriggerQueryInput, data: TriggerInsertInput!): Trigger
  replaceOneUi_asset(query: Ui_assetQueryInput, data: Ui_assetInsertInput!): Ui_asset
  replaceOneUi_chart(query: Ui_chartQueryInput, data: Ui_chartInsertInput!): Ui_chart
  replaceOneUi_management(query: Ui_managementQueryInput, data: Ui_managementInsertInput!): Ui_management
  replaceOneUi_module(query: Ui_moduleQueryInput, data: Ui_moduleInsertInput!): Ui_module
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  updateManyActionCols(query: ActionColQueryInput, set: ActionColUpdateInput!): UpdateManyPayload
  updateManyActions(query: ActionQueryInput, set: ActionUpdateInput!): UpdateManyPayload
  updateManyAddress_abis(query: Address_abiQueryInput, set: Address_abiUpdateInput!): UpdateManyPayload
  updateManyAsks(query: AskQueryInput, set: AskUpdateInput!): UpdateManyPayload
  updateManyAuctions(query: AuctionQueryInput, set: AuctionUpdateInput!): UpdateManyPayload
  updateManyBids(query: BidQueryInput, set: BidUpdateInput!): UpdateManyPayload
  updateManyBlockchains(query: BlockchainQueryInput, set: BlockchainUpdateInput!): UpdateManyPayload
  updateManyCol1s(query: Col1QueryInput, set: Col1UpdateInput!): UpdateManyPayload
  updateManyCollections(query: CollectionQueryInput, set: CollectionUpdateInput!): UpdateManyPayload
  updateManyCommissions(query: CommissionQueryInput, set: CommissionUpdateInput!): UpdateManyPayload
  updateManyContract_types(query: Contract_typeQueryInput, set: Contract_typeUpdateInput!): UpdateManyPayload
  updateManyContracts(query: ContractQueryInput, set: ContractUpdateInput!): UpdateManyPayload
  updateManyDailies(query: DailyQueryInput, set: DailyUpdateInput!): UpdateManyPayload
  updateManyEndorsements(query: EndorsementQueryInput, set: EndorsementUpdateInput!): UpdateManyPayload
  updateManyEvents(query: EventQueryInput, set: EventUpdateInput!): UpdateManyPayload
  updateManyFormats(query: FormatQueryInput, set: FormatUpdateInput!): UpdateManyPayload
  updateManyHourlies(query: HourlyQueryInput, set: HourlyUpdateInput!): UpdateManyPayload
  updateManyIntegrations(query: IntegrationQueryInput, set: IntegrationUpdateInput!): UpdateManyPayload
  updateManyIpfs(set: IpfUpdateInput!, query: IpfQueryInput): UpdateManyPayload
  updateManyLikes(query: LikeQueryInput, set: LikeUpdateInput!): UpdateManyPayload
  updateManyLocales(query: LocaleQueryInput, set: LocaleUpdateInput!): UpdateManyPayload
  updateManyModules(query: ModuleQueryInput, set: ModuleUpdateInput!): UpdateManyPayload
  updateManyNetworks(query: NetworkQueryInput, set: NetworkUpdateInput!): UpdateManyPayload
  updateManyNew_sessions(query: New_sessionQueryInput, set: New_sessionUpdateInput!): UpdateManyPayload
  updateManyOpendata(query: OpendatumQueryInput, set: OpendatumUpdateInput!): UpdateManyPayload
  updateManyPrimary_jsons(query: Primary_jsonQueryInput, set: Primary_jsonUpdateInput!): UpdateManyPayload
  updateManyRoyalties(set: RoyaltyUpdateInput!, query: RoyaltyQueryInput): UpdateManyPayload
  updateManySeriess(query: SeriesQueryInput, set: SeriesUpdateInput!): UpdateManyPayload
  updateManySessions(query: SessionQueryInput, set: SessionUpdateInput!): UpdateManyPayload
  updateManySubscriptions(query: SubscriptionQueryInput, set: SubscriptionUpdateInput!): UpdateManyPayload
  updateManySwift_codes(set: Swift_codeUpdateInput!, query: Swift_codeQueryInput): UpdateManyPayload
  updateManySwift_messages(set: Swift_messageUpdateInput!, query: Swift_messageQueryInput): UpdateManyPayload
  updateManyTests(query: TestQueryInput, set: TestUpdateInput!): UpdateManyPayload
  updateManyTokenCols(query: TokenColQueryInput, set: TokenColUpdateInput!): UpdateManyPayload
  updateManyTokens(query: TokenQueryInput, set: TokenUpdateInput!): UpdateManyPayload
  updateManyTriggers(query: TriggerQueryInput, set: TriggerUpdateInput!): UpdateManyPayload
  updateManyUi_assets(query: Ui_assetQueryInput, set: Ui_assetUpdateInput!): UpdateManyPayload
  updateManyUi_charts(query: Ui_chartQueryInput, set: Ui_chartUpdateInput!): UpdateManyPayload
  updateManyUi_managements(set: Ui_managementUpdateInput!, query: Ui_managementQueryInput): UpdateManyPayload
  updateManyUi_modules(query: Ui_moduleQueryInput, set: Ui_moduleUpdateInput!): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneAction(set: ActionUpdateInput!, query: ActionQueryInput): Action
  updateOneActionCol(query: ActionColQueryInput, set: ActionColUpdateInput!): ActionCol
  updateOneAddress_abi(query: Address_abiQueryInput, set: Address_abiUpdateInput!): Address_abi
  updateOneAsk(query: AskQueryInput, set: AskUpdateInput!): Ask
  updateOneAuction(query: AuctionQueryInput, set: AuctionUpdateInput!): Auction
  updateOneBid(query: BidQueryInput, set: BidUpdateInput!): Bid
  updateOneBlockchain(query: BlockchainQueryInput, set: BlockchainUpdateInput!): Blockchain
  updateOneCol1(set: Col1UpdateInput!, query: Col1QueryInput): Col1
  updateOneCollection(query: CollectionQueryInput, set: CollectionUpdateInput!): Collection
  updateOneCommission(query: CommissionQueryInput, set: CommissionUpdateInput!): Commission
  updateOneContract(query: ContractQueryInput, set: ContractUpdateInput!): Contract
  updateOneContract_type(set: Contract_typeUpdateInput!, query: Contract_typeQueryInput): Contract_type
  updateOneDaily(query: DailyQueryInput, set: DailyUpdateInput!): Daily
  updateOneEndorsement(query: EndorsementQueryInput, set: EndorsementUpdateInput!): Endorsement
  updateOneEvent(set: EventUpdateInput!, query: EventQueryInput): Event
  updateOneFormat(set: FormatUpdateInput!, query: FormatQueryInput): Format
  updateOneHourly(query: HourlyQueryInput, set: HourlyUpdateInput!): Hourly
  updateOneIntegration(query: IntegrationQueryInput, set: IntegrationUpdateInput!): Integration
  updateOneIpf(set: IpfUpdateInput!, query: IpfQueryInput): Ipf
  updateOneLike(query: LikeQueryInput, set: LikeUpdateInput!): Like
  updateOneLocale(query: LocaleQueryInput, set: LocaleUpdateInput!): Locale
  updateOneModule(set: ModuleUpdateInput!, query: ModuleQueryInput): Module
  updateOneNetwork(query: NetworkQueryInput, set: NetworkUpdateInput!): Network
  updateOneNew_session(set: New_sessionUpdateInput!, query: New_sessionQueryInput): New_session
  updateOneOpendatum(query: OpendatumQueryInput, set: OpendatumUpdateInput!): Opendatum
  updateOnePrimary_json(query: Primary_jsonQueryInput, set: Primary_jsonUpdateInput!): Primary_json
  updateOneRoyalty(query: RoyaltyQueryInput, set: RoyaltyUpdateInput!): Royalty
  updateOneSeries(query: SeriesQueryInput, set: SeriesUpdateInput!): Series
  updateOneSession(query: SessionQueryInput, set: SessionUpdateInput!): Session
  updateOneSubscription(query: SubscriptionQueryInput, set: SubscriptionUpdateInput!): Subscription
  updateOneSwift_code(query: Swift_codeQueryInput, set: Swift_codeUpdateInput!): Swift_code
  updateOneSwift_message(query: Swift_messageQueryInput, set: Swift_messageUpdateInput!): Swift_message
  updateOneTest(query: TestQueryInput, set: TestUpdateInput!): Test
  updateOneToken(query: TokenQueryInput, set: TokenUpdateInput!): Token
  updateOneTokenCol(query: TokenColQueryInput, set: TokenColUpdateInput!): TokenCol
  updateOneTrigger(query: TriggerQueryInput, set: TriggerUpdateInput!): Trigger
  updateOneUi_asset(query: Ui_assetQueryInput, set: Ui_assetUpdateInput!): Ui_asset
  updateOneUi_chart(query: Ui_chartQueryInput, set: Ui_chartUpdateInput!): Ui_chart
  updateOneUi_management(query: Ui_managementQueryInput, set: Ui_managementUpdateInput!): Ui_management
  updateOneUi_module(query: Ui_moduleQueryInput, set: Ui_moduleUpdateInput!): Ui_module
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneAction(query: ActionQueryInput, data: ActionInsertInput!): Action
  upsertOneActionCol(query: ActionColQueryInput, data: ActionColInsertInput!): ActionCol
  upsertOneAddress_abi(query: Address_abiQueryInput, data: Address_abiInsertInput!): Address_abi
  upsertOneAsk(data: AskInsertInput!, query: AskQueryInput): Ask
  upsertOneAuction(query: AuctionQueryInput, data: AuctionInsertInput!): Auction
  upsertOneBid(query: BidQueryInput, data: BidInsertInput!): Bid
  upsertOneBlockchain(query: BlockchainQueryInput, data: BlockchainInsertInput!): Blockchain
  upsertOneCol1(query: Col1QueryInput, data: Col1InsertInput!): Col1
  upsertOneCollection(query: CollectionQueryInput, data: CollectionInsertInput!): Collection
  upsertOneCommission(query: CommissionQueryInput, data: CommissionInsertInput!): Commission
  upsertOneContract(query: ContractQueryInput, data: ContractInsertInput!): Contract
  upsertOneContract_type(query: Contract_typeQueryInput, data: Contract_typeInsertInput!): Contract_type
  upsertOneDaily(query: DailyQueryInput, data: DailyInsertInput!): Daily
  upsertOneEndorsement(query: EndorsementQueryInput, data: EndorsementInsertInput!): Endorsement
  upsertOneEvent(query: EventQueryInput, data: EventInsertInput!): Event
  upsertOneFormat(query: FormatQueryInput, data: FormatInsertInput!): Format
  upsertOneHourly(query: HourlyQueryInput, data: HourlyInsertInput!): Hourly
  upsertOneIntegration(query: IntegrationQueryInput, data: IntegrationInsertInput!): Integration
  upsertOneIpf(data: IpfInsertInput!, query: IpfQueryInput): Ipf
  upsertOneLike(query: LikeQueryInput, data: LikeInsertInput!): Like
  upsertOneLocale(query: LocaleQueryInput, data: LocaleInsertInput!): Locale
  upsertOneModule(query: ModuleQueryInput, data: ModuleInsertInput!): Module
  upsertOneNetwork(query: NetworkQueryInput, data: NetworkInsertInput!): Network
  upsertOneNew_session(query: New_sessionQueryInput, data: New_sessionInsertInput!): New_session
  upsertOneOpendatum(query: OpendatumQueryInput, data: OpendatumInsertInput!): Opendatum
  upsertOnePrimary_json(query: Primary_jsonQueryInput, data: Primary_jsonInsertInput!): Primary_json
  upsertOneRoyalty(data: RoyaltyInsertInput!, query: RoyaltyQueryInput): Royalty
  upsertOneSeries(query: SeriesQueryInput, data: SeriesInsertInput!): Series
  upsertOneSession(query: SessionQueryInput, data: SessionInsertInput!): Session
  upsertOneSubscription(query: SubscriptionQueryInput, data: SubscriptionInsertInput!): Subscription
  upsertOneSwift_code(query: Swift_codeQueryInput, data: Swift_codeInsertInput!): Swift_code
  upsertOneSwift_message(query: Swift_messageQueryInput, data: Swift_messageInsertInput!): Swift_message
  upsertOneTest(query: TestQueryInput, data: TestInsertInput!): Test
  upsertOneToken(data: TokenInsertInput!, query: TokenQueryInput): Token
  upsertOneTokenCol(query: TokenColQueryInput, data: TokenColInsertInput!): TokenCol
  upsertOneTrigger(data: TriggerInsertInput!, query: TriggerQueryInput): Trigger
  upsertOneUi_asset(query: Ui_assetQueryInput, data: Ui_assetInsertInput!): Ui_asset
  upsertOneUi_chart(query: Ui_chartQueryInput, data: Ui_chartInsertInput!): Ui_chart
  upsertOneUi_management(data: Ui_managementInsertInput!, query: Ui_managementQueryInput): Ui_management
  upsertOneUi_module(query: Ui_moduleQueryInput, data: Ui_moduleInsertInput!): Ui_module
  upsertOneUser(data: UserInsertInput!, query: UserQueryInput): User
}

input ContractUpdateInput {
  address: String
  abiFile_unset: Boolean
  abiPath_unset: Boolean
  superType: String
  address_unset: Boolean
  environment: String
  abiFile: String
  abiPath: String
  longType_unset: Boolean
  environment_unset: Boolean
  _id: ObjectId
  network: String
  network_unset: Boolean
  status_unset: Boolean
  longType: String
  privacy_unset: Boolean
  superType_unset: Boolean
  privacy: String
  status: String
  blockchain: String
  blockchain_unset: Boolean
  _id_unset: Boolean
}

type Ui_chart {
  _id: ObjectId
  aggregationField: String
  airtableId: String
  createdAt: Float
  dataObject: String
  field: String
  function: String
  limit: Int
  linkSuffix: String
  moduleID: String
  name: String
  outputObject: String
  sort: String
  updatedAt: Float
}

type Test {
  _id: ObjectId
  crossEndorsement: TestCrossEndorsement
  temporaryEndorsements: [TestTemporaryEndorsement]
}

type Series {
  _id: ObjectId
  createdAt: Float
  deployed: SeriesDeployed
  raw: SeriesRaw
  seriesID: String
  updatedAt: Float
}

input SubscriptionInsertInput {
  _id: ObjectId
  abiFileUrl: String
  address: String
  blockchain: String
  lastBlockRead: Long
  status: String
  superType: String
}

input Ui_chartUpdateInput {
  linkSuffix_unset: Boolean
  aggregationField_unset: Boolean
  limit: Int
  createdAt_unset: Boolean
  _id_unset: Boolean
  outputObject: String
  field: String
  linkSuffix: String
  updatedAt_inc: Float
  name_unset: Boolean
  function_unset: Boolean
  moduleID: String
  updatedAt_unset: Boolean
  dataObject_unset: Boolean
  sort: String
  function: String
  airtableId_unset: Boolean
  limit_inc: Int
  updatedAt: Float
  name: String
  createdAt_inc: Float
  _id: ObjectId
  aggregationField: String
  sort_unset: Boolean
  moduleID_unset: Boolean
  createdAt: Float
  outputObject_unset: Boolean
  dataObject: String
  field_unset: Boolean
  limit_unset: Boolean
  airtableId: String
}

input AskDeployedUpdateInput {
  askCreator_unset: Boolean
  showcaseFee: String
  blockchain_unset: Boolean
  values: [AskDeployedValueUpdateInput]
  status_unset: Boolean
  currentAskValue_unset: Boolean
  status: String
  tokenID_unset: Boolean
  tokenAddress_unset: Boolean
  askAddress: String
  values_unset: Boolean
  tokenAddress: String
  superType: String
  askCreator: String
  endTime_inc: Float
  currentAskValue: String
  tokenID: String
  blockchain: String
  superType_unset: Boolean
  askAddress_unset: Boolean
  showcaseFee_unset: Boolean
  endTime_unset: Boolean
  endTime: Float
}

type Col1 {
  _id: ObjectId
  address: String
  createdAt: Float
  creator: String
  description: String
  hash: String
  layers: [Col1Layer]
  maximum: Int
  mintCost: Int
  name: String
  seriesId: String
  supply: Int
  updatedAt: Float
}

input TokensDistinct {
  type: String
}

input RoyaltyInsertInput {
  lowerValue: Float
  percentage: Float
  upperValue: Float
  _id: ObjectId
  count: Int
}

input BlockchainNetworkTestInsertInput {
  endpoint: String
  browser: String
}

input CollectionRawMediumUpdateInput {
  role: String
  width_inc: Int
  hash_unset: Boolean
  mimetype_unset: Boolean
  height_unset: Boolean
  subtitle: String
  width_unset: Boolean
  width: Int
  weight: Int
  weight_inc: Int
  role_unset: Boolean
  weight_unset: Boolean
  subtitle_unset: Boolean
  height: Int
  mimetype: String
  height_inc: Int
  hash: String
}

input SeriesQueryInput {
  updatedAt_ne: Float
  seriesID_ne: String
  _id_ne: ObjectId
  updatedAt_gte: Float
  _id_gt: ObjectId
  _id_in: [ObjectId]
  seriesID_lt: String
  seriesID_nin: [String]
  AND: [SeriesQueryInput!]
  updatedAt_lte: Float
  updatedAt_nin: [Float]
  updatedAt_lt: Float
  _id_lte: ObjectId
  _id_gte: ObjectId
  createdAt: Float
  raw: SeriesRawQueryInput
  updatedAt_in: [Float]
  createdAt_exists: Boolean
  _id_nin: [ObjectId]
  _id_lt: ObjectId
  seriesID: String
  createdAt_gte: Float
  seriesID_gt: String
  createdAt_lt: Float
  seriesID_in: [String]
  createdAt_gt: Float
  deployed: SeriesDeployedQueryInput
  OR: [SeriesQueryInput!]
  updatedAt_exists: Boolean
  _id: ObjectId
  createdAt_nin: [Float]
  seriesID_exists: Boolean
  updatedAt_gt: Float
  createdAt_ne: Float
  seriesID_gte: String
  seriesID_lte: String
  updatedAt: Float
  _id_exists: Boolean
  deployed_exists: Boolean
  createdAt_lte: Float
  createdAt_in: [Float]
  raw_exists: Boolean
}

input AuctionQueryInput {
  _id_exists: Boolean
  createdAt_nin: [Float]
  _id_in: [ObjectId]
  updatedAt_nin: [Float]
  _id_nin: [ObjectId]
  auctionID_ne: String
  updatedAt_gt: Float
  updatedAt_gte: Float
  updatedAt: Float
  auctionID_exists: Boolean
  createdAt_gt: Float
  createdAt_ne: Float
  deployed_exists: Boolean
  createdAt_in: [Float]
  updatedAt_exists: Boolean
  createdAt: Float
  AND: [AuctionQueryInput!]
  _id_lt: ObjectId
  _id_gte: ObjectId
  auctionID_lt: String
  _id_ne: ObjectId
  updatedAt_lt: Float
  createdAt_lt: Float
  _id_gt: ObjectId
  auctionID_gt: String
  raw: AuctionRawQueryInput
  raw_exists: Boolean
  auctionID_gte: String
  updatedAt_ne: Float
  auctionID_nin: [String]
  deployed: AuctionDeployedQueryInput
  createdAt_lte: Float
  createdAt_gte: Float
  auctionID_in: [String]
  updatedAt_in: [Float]
  createdAt_exists: Boolean
  auctionID: String
  auctionID_lte: String
  _id: ObjectId
  _id_lte: ObjectId
  updatedAt_lte: Float
  OR: [AuctionQueryInput!]
}

input Primary_jsonInsertInput {
  createdAt: Float
  hash: String
  jsonString: String
  _id: ObjectId
}

enum AuctionSortByInput {
  AUCTIONID_ASC
  AUCTIONID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

input BlockchainNetworkMainUpdateInput {
  browser_unset: Boolean
  endpoint: String
  endpoint_unset: Boolean
  browser: String
}

input BidUpdateInput {
  createdAt_unset: Boolean
  updatedAt_inc: Float
  deployed: BidDeployedUpdateInput
  deployed_unset: Boolean
  _id_unset: Boolean
  bidID: String
  createdAt: Float
  createdAt_inc: Float
  raw: BidRawUpdateInput
  bidID_unset: Boolean
  updatedAt: Float
  updatedAt_unset: Boolean
  raw_unset: Boolean
  _id: ObjectId
}

input CommissionQueryInput {
  type_ne: String
  blockchain_exists: Boolean
  commissionId_ne: String
  blockchain_gt: String
  valueBNB_lte: String
  commissionId_nin: [String]
  valueBNB_nin: [String]
  valueBNB_lt: String
  value_ne: String
  valueBNB_in: [String]
  blockchain_lte: String
  value_lte: String
  _id: ObjectId
  commissionId_in: [String]
  value_nin: [String]
  commissionId_gte: String
  value: String
  commissionId_lt: String
  valueBNB_ne: String
  commissionId_gt: String
  type_exists: Boolean
  description_ne: String
  value_gt: String
  _id_in: [ObjectId]
  description_gte: String
  type_gte: String
  _id_gt: ObjectId
  value_in: [String]
  valueBNB: String
  _id_ne: ObjectId
  type_lt: String
  _id_lte: ObjectId
  valueBNB_gt: String
  value_lt: String
  blockchain_in: [String]
  blockchain_ne: String
  valueBNB_exists: Boolean
  commissionId_exists: Boolean
  commissionId_lte: String
  value_gte: String
  type_in: [String]
  type_nin: [String]
  type: String
  OR: [CommissionQueryInput!]
  description: String
  description_lt: String
  blockchain: String
  value_exists: Boolean
  description_lte: String
  type_gt: String
  _id_nin: [ObjectId]
  blockchain_lt: String
  _id_lt: ObjectId
  description_nin: [String]
  _id_exists: Boolean
  valueBNB_gte: String
  blockchain_gte: String
  blockchain_nin: [String]
  description_in: [String]
  description_gt: String
  _id_gte: ObjectId
  type_lte: String
  AND: [CommissionQueryInput!]
  description_exists: Boolean
  commissionId: String
}

input PaginationAction {
  time_gt: Float
  isAsc: Boolean
  skip: Float
  limit: Float
}

input AskQueryInput {
  askID_gt: String
  createdAt_in: [Float]
  _id_gte: ObjectId
  AND: [AskQueryInput!]
  OR: [AskQueryInput!]
  _id_lte: ObjectId
  askID_gte: String
  createdAt_ne: Float
  _id_lt: ObjectId
  askID_lt: String
  updatedAt_ne: Float
  updatedAt_in: [Float]
  updatedAt_exists: Boolean
  createdAt_lte: Float
  updatedAt_nin: [Float]
  askID_exists: Boolean
  _id_nin: [ObjectId]
  askID: String
  updatedAt_lte: Float
  createdAt: Float
  raw: AskRawQueryInput
  createdAt_gt: Float
  updatedAt_gte: Float
  raw_exists: Boolean
  askID_ne: String
  _id_exists: Boolean
  askID_in: [String]
  updatedAt_lt: Float
  deployed_exists: Boolean
  updatedAt_gt: Float
  _id: ObjectId
  askID_nin: [String]
  updatedAt: Float
  createdAt_gte: Float
  _id_in: [ObjectId]
  askID_lte: String
  createdAt_nin: [Float]
  _id_gt: ObjectId
  createdAt_exists: Boolean
  createdAt_lt: Float
  _id_ne: ObjectId
  deployed: AskDeployedQueryInput
}

input TokenColImageUpdateInput {
  height_unset: Boolean
  width: Int
  height: Int
  mimetype_unset: Boolean
  weight_inc: Int
  height_inc: Int
  rarity_unset: Boolean
  mimetype: String
  rarity: Int
  width_inc: Int
  width_unset: Boolean
  subtitle_unset: Boolean
  weight: Int
  hash_unset: Boolean
  weight_unset: Boolean
  hash: String
  subtitle: String
  rarity_inc: Int
}

input PaginationCollection {
  skip: Float
  created_lt: Float
  limit: Float
  search: String
  creator: String
  sort: PaginationCollectionSort
}

input ActionActionAttributeUpdateInput {
  bidStep_unset: Boolean
  endorsementCreator_unset: Boolean
  managerSuperType: String
  managerSuperType_unset: Boolean
  auctionStartTime: Float
  actionCapture: String
  askValue: String
  showcaseFee: String
  actionStatus: String
  sealCreator: String
  showcaseFee_unset: Boolean
  minimalBid_unset: Boolean
  submittedBidOwner_unset: Boolean
  askValue_unset: Boolean
  auctionCreator: String
  releasedBidValue: String
  managerExpirationTime_inc: Float
  submittedBidValue_unset: Boolean
  bidCreator: String
  releasedBidValue_unset: Boolean
  minimalBid: String
  auctionEndTime: Float
  auctionEndTime_inc: Float
  bidCreator_unset: Boolean
  submittedBidValue: String
  bidValue_unset: Boolean
  askEndTime_inc: Float
  managerExpirationTime: Float
  usdValue_unset: Boolean
  auctionStartTime_unset: Boolean
  finalBidValue_unset: Boolean
  usdValue: Float
  releasedBidOwner: String
  bidEndTime: Float
  bidValue: String
  managerExpirationTime_unset: Boolean
  sealCreator_unset: Boolean
  submittedBidOwner: String
  bidEndTime_inc: Float
  usdValue_inc: Float
  releasedBidOwner_unset: Boolean
  askEndTime_unset: Boolean
  auctionStartTime_inc: Float
  bidStep: String
  askEndTime: Float
  auctionEndTime_unset: Boolean
  askCreator_unset: Boolean
  bidEndTime_unset: Boolean
  actionCapture_unset: Boolean
  finalBidValue: String
  askCreator: String
  endorsementCreator: String
  auctionCreator_unset: Boolean
  actionStatus_unset: Boolean
}

type Contract_typeAbi {
  root: String
  series: String
  token: String
  trx: String
}

type AuctionDeployed {
  auctionAddress: String
  bidStep: String
  bids: [AuctionDeployedBid]
  endTime: Float
  finalBid: String
  showcaseFee: String
  startBid: String
  startTime: Float
  status: String
  superType: String
  tokenAddress: String
  tokenID: String
}

input DailyUpdateInput {
  tokensEndorsed: Int
  date: Float
  saleMin_inc: Float
  tokensCreated: Int
  tokensCreated_unset: Boolean
  totalEndorsementsSum_unset: Boolean
  totalSum_inc: Float
  totalEndorsementsSum_inc: Float
  blockchain: String
  tokensCreated_inc: Int
  saleAverage: Float
  tokensEndorsed_inc: Int
  date_unset: Boolean
  totalSum_unset: Boolean
  saleMax: Float
  createdAt: Float
  tokensEndorsed_unset: Boolean
  saleMax_unset: Boolean
  tokensSold_inc: Int
  totalSum: Float
  saleMax_inc: Float
  totalSalesSum_unset: Boolean
  _id: ObjectId
  totalEndorsementsSum: Float
  updatedAt_inc: Float
  endorsementMax_unset: Boolean
  updatedAt_unset: Boolean
  _id_unset: Boolean
  updatedAt: Float
  saleAverage_unset: Boolean
  tokensSold_unset: Boolean
  endorsementMax_inc: Float
  totalSalesSum_inc: Float
  createdAt_inc: Float
  endorsementMin_unset: Boolean
  saleMin: Float
  totalSalesSum: Float
  endorsementMax: Float
  endorsementMin_inc: Float
  endorsementAverage: Float
  endorsementAverage_inc: Float
  endorsementAverage_unset: Boolean
  createdAt_unset: Boolean
  saleAverage_inc: Float
  blockchain_unset: Boolean
  endorsementMin: Float
  date_inc: Float
  saleMin_unset: Boolean
  tokensSold: Int
}

input PaginationUiManagement {
  skip: Float
  limit: Float
}

input BlockchainNetworkQueryInput {
  test_exists: Boolean
  AND: [BlockchainNetworkQueryInput!]
  OR: [BlockchainNetworkQueryInput!]
  main: BlockchainNetworkMainQueryInput
  main_exists: Boolean
  test: BlockchainNetworkTestQueryInput
}

input ActionTokenAttributeInsertInput {
  maximum: Int
  newOwner: String
  ownerPublicKey: String
  tokenCreator: String
  collectionID: String
  creatorFees: String
  supply: Int
  collectionCreator: String
  hash: String
  manager: String
  owner: String
  tokenID: String
  seriesCreator: String
  oldOwner: String
  seriesID: ActionTokenAttributeSeriesIDRelationInput
}

input Swift_messageMessageQueryInput {
  superType_nin: [String]
  superType_in: [String]
  discoveryTime_gt: Float
  resolution_exists: Boolean
  actionCode_gte: String
  senderAddress_lte: String
  discoveryTime_gte: Float
  parsingTime_nin: [Float]
  discoveryTime: Float
  senderAddress_ne: String
  time_nin: [Float]
  resolution_nin: [String]
  senderAddress_lt: String
  resolution_lte: String
  superType_gt: String
  actionCode_nin: [String]
  discoveryTime_ne: Float
  actionCode_ne: String
  discoveryTime_in: [Float]
  discoveryTime_exists: Boolean
  discoveryTime_lte: Float
  AND: [Swift_messageMessageQueryInput!]
  actionCode_gt: String
  actionCode_exists: Boolean
  time_lt: Float
  discoveryTime_nin: [Float]
  time: Float
  resolution: String
  actionCode_lte: String
  senderAddress_nin: [String]
  time_ne: Float
  discoveryTime_lt: Float
  senderAddress_gt: String
  time_gte: Float
  parsingTime_gte: Float
  superType_lt: String
  parsingTime_in: [Float]
  senderAddress_exists: Boolean
  senderAddress_in: [String]
  resolution_gt: String
  parsingTime_lte: Float
  parsingTime: Float
  senderAddress: String
  actionCode: String
  superType: String
  superType_exists: Boolean
  parsingTime_gt: Float
  actionCode_lt: String
  superType_ne: String
  resolution_lt: String
  superType_lte: String
  time_lte: Float
  parsingTime_lt: Float
  OR: [Swift_messageMessageQueryInput!]
  parsingTime_exists: Boolean
  resolution_gte: String
  superType_gte: String
  senderAddress_gte: String
  resolution_ne: String
  resolution_in: [String]
  time_exists: Boolean
  parsingTime_ne: Float
  actionCode_in: [String]
  time_in: [Float]
  time_gt: Float
}

input OpendatumUpdateInput {
  key_unset: Boolean
  _id_unset: Boolean
  updatedAt_inc: Float
  permissions: [OpendatumPermissionUpdateInput]
  createdAt_unset: Boolean
  updatedAt: Float
  updatedAt_unset: Boolean
  key: String
  permissions_unset: Boolean
  createdAt: Float
  createdAt_inc: Float
  _id: ObjectId
}

input Ui_chartInsertInput {
  function: String
  airtableId: String
  linkSuffix: String
  limit: Int
  moduleID: String
  outputObject: String
  updatedAt: Float
  sort: String
  createdAt: Float
  _id: ObjectId
  field: String
  name: String
  aggregationField: String
  dataObject: String
}

input TestQueryInput {
  _id: ObjectId
  _id_exists: Boolean
  _id_gt: ObjectId
  _id_nin: [ObjectId]
  _id_gte: ObjectId
  crossEndorsement: TestCrossEndorsementQueryInput
  OR: [TestQueryInput!]
  temporaryEndorsements_exists: Boolean
  crossEndorsement_exists: Boolean
  temporaryEndorsements_in: [TestTemporaryEndorsementQueryInput]
  _id_in: [ObjectId]
  _id_ne: ObjectId
  _id_lt: ObjectId
  temporaryEndorsements: [TestTemporaryEndorsementQueryInput]
  temporaryEndorsements_nin: [TestTemporaryEndorsementQueryInput]
  AND: [TestQueryInput!]
  _id_lte: ObjectId
}

input BidQueryInput {
  _id_exists: Boolean
  bidID_gt: String
  deployed: BidDeployedQueryInput
  AND: [BidQueryInput!]
  createdAt_gte: Float
  createdAt_lte: Float
  createdAt_in: [Float]
  deployed_exists: Boolean
  updatedAt: Float
  bidID_nin: [String]
  updatedAt_gte: Float
  createdAt_lt: Float
  bidID_gte: String
  bidID_ne: String
  bidID_exists: Boolean
  createdAt_nin: [Float]
  updatedAt_in: [Float]
  bidID_lte: String
  _id_gt: ObjectId
  raw_exists: Boolean
  createdAt_gt: Float
  createdAt_exists: Boolean
  OR: [BidQueryInput!]
  updatedAt_ne: Float
  updatedAt_lt: Float
  updatedAt_nin: [Float]
  _id: ObjectId
  _id_ne: ObjectId
  updatedAt_gt: Float
  _id_gte: ObjectId
  bidID_lt: String
  createdAt: Float
  createdAt_ne: Float
  updatedAt_exists: Boolean
  _id_nin: [ObjectId]
  raw: BidRawQueryInput
  _id_lt: ObjectId
  bidID_in: [String]
  _id_in: [ObjectId]
  _id_lte: ObjectId
  bidID: String
  updatedAt_lte: Float
}

type AskDeployed {
  askAddress: String
  askCreator: String
  blockchain: String
  currentAskValue: String
  endTime: Float
  showcaseFee: String
  status: String
  superType: String
  tokenAddress: String
  tokenID: String
  values: [AskDeployedValue]
}

input CommissionUpdateInput {
  description: String
  valueBNB: String
  commissionId: String
  description_unset: Boolean
  blockchain_unset: Boolean
  value: String
  value_unset: Boolean
  type_unset: Boolean
  type: String
  commissionId_unset: Boolean
  valueBNB_unset: Boolean
  _id_unset: Boolean
  _id: ObjectId
  blockchain: String
}

input Contract_typeAbiUpdateInput {
  root_unset: Boolean
  series: String
  series_unset: Boolean
  token: String
  token_unset: Boolean
  trx: String
  trx_unset: Boolean
  root: String
}

enum EndorsementSortByInput {
  ENDORSEMENTID_ASC
  ENDORSEMENTID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

input Primary_jsonQueryInput {
  hash_ne: String
  _id_lte: ObjectId
  hash_exists: Boolean
  _id_in: [ObjectId]
  createdAt_lt: Float
  _id_gt: ObjectId
  hash_lt: String
  jsonString_ne: String
  createdAt_in: [Float]
  AND: [Primary_jsonQueryInput!]
  hash_gt: String
  hash_gte: String
  jsonString_gt: String
  createdAt_ne: Float
  createdAt_nin: [Float]
  createdAt_gte: Float
  jsonString_in: [String]
  createdAt_gt: Float
  createdAt_exists: Boolean
  _id_ne: ObjectId
  _id_gte: ObjectId
  _id: ObjectId
  createdAt_lte: Float
  _id_exists: Boolean
  jsonString_lt: String
  OR: [Primary_jsonQueryInput!]
  hash_nin: [String]
  jsonString_nin: [String]
  createdAt: Float
  hash_lte: String
  jsonString_exists: Boolean
  jsonString_gte: String
  hash_in: [String]
  jsonString: String
  jsonString_lte: String
  hash: String
  _id_lt: ObjectId
  _id_nin: [ObjectId]
}

input HourlyQueryInput {
  BNBtoUSD_gte: Float
  EVERtoUSD: Float
  EVERtoUSD_gte: Float
  USD_exists: Boolean
  USD_nin: [Float]
  BNBtoUSD_gt: Float
  time_in: [Float]
  _id_ne: ObjectId
  BNBtoUSD_ne: Float
  _id_nin: [ObjectId]
  blockchain_ne: String
  BNBtoUSD_exists: Boolean
  _id_gte: ObjectId
  USD_in: [Float]
  _id_exists: Boolean
  USD_ne: Float
  BNBtoUSD_lte: Float
  blockchain_gt: String
  USD_gt: Float
  _id_in: [ObjectId]
  EVERtoUSD_nin: [Float]
  blockchain_in: [String]
  time_gte: Float
  EVERtoUSD_in: [Float]
  BNBtoUSD: Float
  time_nin: [Float]
  OR: [HourlyQueryInput!]
  BNBtoUSD_lt: Float
  blockchain_lte: String
  blockchain_exists: Boolean
  USD_lt: Float
  blockchain_lt: String
  time: Float
  _id_gt: ObjectId
  EVERtoUSD_exists: Boolean
  EVERtoUSD_gt: Float
  blockchain_gte: String
  EVERtoUSD_ne: Float
  _id_lte: ObjectId
  USD: Float
  _id: ObjectId
  EVERtoUSD_lt: Float
  _id_lt: ObjectId
  USD_gte: Float
  time_lte: Float
  AND: [HourlyQueryInput!]
  EVERtoUSD_lte: Float
  USD_lte: Float
  time_lt: Float
  time_ne: Float
  blockchain: String
  blockchain_nin: [String]
  time_gt: Float
  time_exists: Boolean
  BNBtoUSD_nin: [Float]
  BNBtoUSD_in: [Float]
}

input LikeInsertInput {
  userAccountNumber: Int
  _id: ObjectId
  seriesID: String
  status: Boolean
  tokenID: String
}

enum Col1SortByInput {
  SUPPLY_ASC
  MINTCOST_ASC
  CREATOR_DESC
  HASH_ASC
  MAXIMUM_ASC
  MAXIMUM_DESC
  CREATEDAT_ASC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  SUPPLY_DESC
  DESCRIPTION_DESC
  CREATEDAT_DESC
  NAME_ASC
  DESCRIPTION_ASC
  HASH_DESC
  SERIESID_DESC
  _ID_ASC
  _ID_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  MINTCOST_DESC
  CREATOR_ASC
  NAME_DESC
  SERIESID_ASC
}

type Subscription {
  _id: ObjectId
  abiFileUrl: String
  address: String
  blockchain: String
  lastBlockRead: Long
  status: String
  superType: String
}

enum IntegrationSortByInput {
  _ID_ASC
  BLOCKCHAIN_DESC
  CODE_ASC
  NAME_ASC
  _ID_DESC
  CODE_DESC
  STATUS_DESC
  SUBTYPE_DESC
  TYPE_DESC
  BLOCKCHAIN_ASC
  STATUS_ASC
  TYPE_ASC
  NAME_DESC
  SUBTYPE_ASC
}

enum TokenPaginationSort {
  CREATED_ASC
  CREATED_DESC
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

input Address_abiInsertInput {
  superType: String
  _id: ObjectId
  address: String
  level: String
}

input UserIntegrationQueryInput {
  priority_lt: Int
  shadowAddresses: [String]
  name_in: [String]
  name_ne: String
  priority_in: [Int]
  shadowAddresses_exists: Boolean
  priority: Int
  name: String
  priority_ne: Int
  priority_exists: Boolean
  name_gt: String
  name_nin: [String]
  priority_gte: Int
  priority_lte: Int
  priority_gt: Int
  AND: [UserIntegrationQueryInput!]
  name_lte: String
  shadowAddresses_nin: [String]
  shadowAddresses_in: [String]
  name_gte: String
  OR: [UserIntegrationQueryInput!]
  name_exists: Boolean
  name_lt: String
  priority_nin: [Int]
}

type Col1Layer {
  images: [Col1LayerImage]
  layer: String
  points: [Col1LayerPoint]
}

type Contract_typeHashField {
  collectionID: String
  creator: String
  creatorFee: String
  description: String
  height: String
  layers: Contract_typeHashFieldLayer
  media: Contract_typeHashFieldMedium
  minimalMintFee: String
  numberOfEditions: String
  title: String
  type: String
  width: String
}

input TokenColUpdateInput {
  address: String
  address_unset: Boolean
  tokenId_unset: Boolean
  createdAt_inc: Float
  seriesId_unset: Boolean
  _id: ObjectId
  images_unset: Boolean
  updatedAt_inc: Float
  merged_unset: Boolean
  seriesId: String
  createdAt_unset: Boolean
  images: [TokenColImageUpdateInput]
  createdAt: Float
  updatedAt: Float
  updatedAt_unset: Boolean
  owner_unset: Boolean
  owner: String
  merged: String
  _id_unset: Boolean
  tokenId: String
}

enum OpendatumSortByInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  KEY_ASC
  KEY_DESC
  _ID_ASC
  _ID_DESC
}

input Col1LayerImageUpdateInput {
  width_unset: Boolean
  mimetype: String
  subtitle: String
  weight: Int
  rarity_inc: Int
  height: Int
  hash_unset: Boolean
  height_inc: Int
  mimetype_unset: Boolean
  rarity: Int
  subtitle_unset: Boolean
  height_unset: Boolean
  hash: String
  weight_inc: Int
  weight_unset: Boolean
  width_inc: Int
  width: Int
  rarity_unset: Boolean
}

input TokenDeployedSeriesObjectRelationInput {
  create: SeriesInsertInput
  link: String
}

type Contract {
  _id: ObjectId
  abiFile: String
  abiPath: String
  address: String
  blockchain: String
  environment: String
  longType: String
  network: String
  privacy: String
  status: String
  superType: String
}

input CollectionQueryInput {
  collectionID_in: [String]
  title_in: [String]
  createdAt_nin: [Float]
  creator_exists: Boolean
  about_lte: String
  qualification_ne: Int
  creatorAccountNumber_in: [Int]
  _id_lte: ObjectId
  updatedAt: Float
  collectionID_exists: Boolean
  deployed: CollectionDeployedQueryInput
  about: String
  _id_nin: [ObjectId]
  creatorAccountNumber_exists: Boolean
  AND: [CollectionQueryInput!]
  title_gt: String
  updatedAt_in: [Float]
  _id_lt: ObjectId
  updatedAt_lte: Float
  raw: CollectionRawQueryInput
  qualification_exists: Boolean
  title_lte: String
  creator_ne: String
  updatedAt_nin: [Float]
  creator_nin: [String]
  tokensInCollection_exists: Boolean
  media_in: [CollectionMediumQueryInput]
  collectionID_lt: String
  title_nin: [String]
  collectionID_lte: String
  qualification_nin: [Int]
  qualification_lt: Int
  updatedAt_gt: Float
  creator_gt: String
  qualification_gte: Int
  title_gte: String
  about_nin: [String]
  createdAt_ne: Float
  creatorAccountNumber_gte: Int
  createdAt_lt: Float
  creator_lt: String
  collectionID_gte: String
  creatorAccountNumber_gt: Int
  collectionID_ne: String
  creatorAccountNumber: Int
  about_in: [String]
  creator_in: [String]
  _id_ne: ObjectId
  _id_exists: Boolean
  creatorAccountNumber_lt: Int
  updatedAt_gte: Float
  qualification_gt: Int
  collectionID_gt: String
  title: String
  _id: ObjectId
  tokensInCollection: Int
  about_lt: String
  deployed_exists: Boolean
  media: [CollectionMediumQueryInput]
  tokensInCollection_ne: Int
  _id_in: [ObjectId]
  createdAt_gt: Float
  creator_lte: String
  collectionID: String
  createdAt: Float
  updatedAt_lt: Float
  media_exists: Boolean
  creator_gte: String
  tokensInCollection_gte: Int
  _id_gte: ObjectId
  creatorAccountNumber_lte: Int
  tokensInCollection_nin: [Int]
  creatorAccountNumber_ne: Int
  tokensInCollection_in: [Int]
  about_ne: String
  title_exists: Boolean
  media_nin: [CollectionMediumQueryInput]
  updatedAt_exists: Boolean
  about_gt: String
  qualification_lte: Int
  about_gte: String
  createdAt_exists: Boolean
  updatedAt_ne: Float
  collectionID_nin: [String]
  title_lt: String
  tokensInCollection_lt: Int
  createdAt_lte: Float
  qualification_in: [Int]
  createdAt_in: [Float]
  qualification: Int
  raw_exists: Boolean
  creatorAccountNumber_nin: [Int]
  tokensInCollection_gt: Int
  _id_gt: ObjectId
  creator: String
  title_ne: String
  tokensInCollection_lte: Int
  about_exists: Boolean
  OR: [CollectionQueryInput!]
  createdAt_gte: Float
}

input TokenInsertInput {
  tokenID: String
  updatedAt: Float
  _id: ObjectId
  createdAt: Float
  deployed: TokenDeployedInsertInput
  raw: TokenRawInsertInput
}

input Contract_typeAbiInsertInput {
  token: String
  trx: String
  root: String
  series: String
}

input Ui_moduleUpdateInput {
  buttonLink_unset: Boolean
  buttonName_unset: Boolean
  mode_unset: Boolean
  updatedAt_inc: Float
  status_unset: Boolean
  itemType_unset: Boolean
  moduleID: String
  page: String
  _id: ObjectId
  status: String
  managementIDs: String
  name_unset: Boolean
  autoFinish: Float
  managementIDs_unset: Boolean
  autoFinish_unset: Boolean
  timerVisible: Boolean
  specialFeature_unset: Boolean
  comment_unset: Boolean
  updatedAt_unset: Boolean
  buttonAction_unset: Boolean
  buttonLink: String
  comment: String
  autoStart_inc: Float
  mainLink_unset: Boolean
  timerVisible_unset: Boolean
  airtableId: String
  createdAt: Float
  autoStart_unset: Boolean
  page_unset: Boolean
  autoFinish_inc: Float
  mode: String
  moduleID_unset: Boolean
  buttonName: String
  mainLink: String
  _id_unset: Boolean
  createdAt_unset: Boolean
  buttonAction: String
  buttonType: String
  buttonType_unset: Boolean
  scope: String
  specialFeature: String
  scope_unset: Boolean
  airtableId_unset: Boolean
  autoStart: Float
  itemType: String
  updatedAt: Float
  createdAt_inc: Float
  name: String
}

input Col1LayerPointInsertInput {
  hash: String
  point: Float
}

enum New_sessionSortByInput {
  _ID_ASC
  _ID_DESC
  TOKEN_ASC
  TOKEN_DESC
  WALLETADDRESS_ASC
  WALLETADDRESS_DESC
}

input UserQueryInput {
  avatarHash_in: [String]
  defaultWallet_lt: String
  blockchain_exists: Boolean
  managingAccount_nin: [Int]
  wallpaperHash_gte: String
  registeredWallet_lt: String
  photoHash_lte: String
  wallpaperHash_gt: String
  registeredWallet_lte: String
  integrations_exists: Boolean
  username_gte: String
  walletAddress_ne: String
  wallpaperHash_nin: [String]
  createdAt_exists: Boolean
  nickname_gte: String
  blockchain_gte: String
  createdAt_nin: [Float]
  wallpaperHash_in: [String]
  mergedAccounts: [UserMergedAccountQueryInput]
  createdAt_lt: Float
  avatarHash: String
  _id_lt: ObjectId
  about_nin: [String]
  updatedAt_gte: Float
  about_in: [String]
  accountNumber: Int
  _id_exists: Boolean
  username_lt: String
  username_nin: [String]
  managingAccount_lt: Int
  _id: ObjectId
  qualification_lte: Int
  photoHash_in: [String]
  registeredWallet_exists: Boolean
  language_gte: String
  walletAddress_in: [String]
  blockchain_gt: String
  createdAt_lte: Float
  createdAt_in: [Float]
  wallpaperHash: String
  language_in: [String]
  managingAccount_ne: Int
  settings_exists: Boolean
  username_in: [String]
  username_ne: String
  about_ne: String
  _id_gte: ObjectId
  integrations_nin: [UserIntegrationQueryInput]
  nickname_exists: Boolean
  username_gt: String
  nickname: String
  avatarHash_ne: String
  accountNumber_exists: Boolean
  createdAt_gte: Float
  managingAccount_lte: Int
  registeredWallet_nin: [String]
  updatedAt_nin: [Float]
  settings: UserSettingQueryInput
  walletAddress_lte: String
  managingAccount_gt: Int
  language_gt: String
  defaultWallet_gte: String
  mergedAccounts_exists: Boolean
  integrations: [UserIntegrationQueryInput]
  blockchain: String
  createdAt_ne: Float
  nickname_in: [String]
  managingAccount_in: [Int]
  blockchain_lte: String
  avatarHash_exists: Boolean
  _id_lte: ObjectId
  nickname_gt: String
  walletAddress_gte: String
  defaultWallet: String
  accountNumber_nin: [Int]
  photoHash_ne: String
  qualification_ne: Int
  registeredWallet_ne: String
  defaultWallet_in: [String]
  qualification: Int
  qualification_lt: Int
  walletAddress: String
  updatedAt_gt: Float
  avatarHash_lte: String
  walletAddress_gt: String
  _id_ne: ObjectId
  managingAccount_gte: Int
  nickname_lte: String
  walletAddress_nin: [String]
  _id_nin: [ObjectId]
  username_exists: Boolean
  registeredWallet_gt: String
  blockchain_nin: [String]
  username: String
  wallpaperHash_ne: String
  wallpaperHash_lt: String
  accountNumber_lte: Int
  about_gt: String
  username_lte: String
  updatedAt_in: [Float]
  AND: [UserQueryInput!]
  language_exists: Boolean
  blockchain_lt: String
  accountNumber_ne: Int
  walletAddress_lt: String
  managingAccount_exists: Boolean
  qualification_in: [Int]
  OR: [UserQueryInput!]
  qualification_nin: [Int]
  updatedAt: Float
  updatedAt_exists: Boolean
  avatarHash_gte: String
  language_nin: [String]
  managingAccount: Int
  photoHash_exists: Boolean
  about_lt: String
  accountNumber_in: [Int]
  language_lt: String
  avatarHash_nin: [String]
  wallpaperHash_lte: String
  updatedAt_ne: Float
  nickname_lt: String
  about_exists: Boolean
  photoHash: String
  nickname_nin: [String]
  defaultWallet_gt: String
  language_ne: String
  walletAddress_exists: Boolean
  integrations_in: [UserIntegrationQueryInput]
  photoHash_gte: String
  photoHash_gt: String
  avatarHash_lt: String
  blockchain_ne: String
  updatedAt_lt: Float
  updatedAt_lte: Float
  photoHash_lt: String
  about_lte: String
  photoHash_nin: [String]
  qualification_exists: Boolean
  registeredWallet: String
  language: String
  about_gte: String
  accountNumber_lt: Int
  registeredWallet_gte: String
  defaultWallet_exists: Boolean
  defaultWallet_lte: String
  accountNumber_gt: Int
  _id_in: [ObjectId]
  wallpaperHash_exists: Boolean
  mergedAccounts_in: [UserMergedAccountQueryInput]
  defaultWallet_nin: [String]
  language_lte: String
  _id_gt: ObjectId
  createdAt_gt: Float
  qualification_gt: Int
  registeredWallet_in: [String]
  qualification_gte: Int
  about: String
  accountNumber_gte: Int
  defaultWallet_ne: String
  nickname_ne: String
  createdAt: Float
  mergedAccounts_nin: [UserMergedAccountQueryInput]
  avatarHash_gt: String
  blockchain_in: [String]
}

type Ui_management {
  _id: ObjectId
  airtableId: String
  assetID: Ui_asset
  assetTitle: String
  createdAt: Float
  image: String
  itemID: String
  itemLink: String
  moduleID: Ui_module
  moduleItemType: String
  moduleName: String
  moduleScope: String
  recordID: String
  tag: [String]
  updatedAt: Float
  visibilityStatus: String
}

input AskRawValueInsertInput {
  askTime: Float
  askValue: String
}

input ActionColTokenAttributeUpdateInput {
  seriesCreator: String
  seriesCreator_unset: Boolean
  seriesID: String
  seriesID_unset: Boolean
  tokenID: String
  tokenID_unset: Boolean
}

input LocaleModuleRelationInput {
  create: ModuleInsertInput
  link: String
}

input Contract_typeHashFieldLayerImageUpdateInput {
  hash: String
  mimetype: String
  rarityWeight: String
  rarityWeight_unset: Boolean
  mimetype_unset: Boolean
  imageIndex: String
  imageIndex_unset: Boolean
  weight_unset: Boolean
  hash_unset: Boolean
  weight: String
}

input EndorsementDeployedUpdateInput {
  expiresAt: Float
  blockchain_unset: Boolean
  masterMediaType_unset: Boolean
  sealID_unset: Boolean
  sealID: String
  status: String
  corner: String
  value_unset: Boolean
  requestedCorners: Int
  masterID_unset: Boolean
  corner_unset: Boolean
  superType_unset: Boolean
  type_unset: Boolean
  value: String
  tokenID_unset: Boolean
  creator_unset: Boolean
  blockchain: String
  masterMediaType: String
  superType: String
  type: String
  expiresAt_inc: Float
  expiresAt_unset: Boolean
  masterID: String
  requestedCorners_unset: Boolean
  status_unset: Boolean
  creator: String
  tokenID: String
  requestedCorners_inc: Int
}

input New_sessionQueryInput {
  _id_lte: ObjectId
  walletAddress_ne: String
  walletAddress_gt: String
  token_gt: String
  _id_in: [ObjectId]
  _id_gt: ObjectId
  token: String
  AND: [New_sessionQueryInput!]
  walletAddress_gte: String
  _id: ObjectId
  _id_gte: ObjectId
  walletAddress_lte: String
  OR: [New_sessionQueryInput!]
  _id_lt: ObjectId
  walletAddress_nin: [String]
  _id_exists: Boolean
  _id_ne: ObjectId
  token_nin: [String]
  token_lt: String
  walletAddress: String
  token_gte: String
  walletAddress_exists: Boolean
  _id_nin: [ObjectId]
  token_in: [String]
  token_exists: Boolean
  walletAddress_in: [String]
  token_lte: String
  walletAddress_lt: String
  token_ne: String
}

type ActionColActionAttribute {
  actionCapture: String
}

type Contract_typeHashFieldMedium {
  hash: String
  height: String
  mimetype: String
  role: String
  subtitle: String
  weight: String
  width: String
}

input ModuleInsertInput {
  _id: ObjectId
  page: String
  module: String
  nameType: String
  type: String
  createdAt: Float
  updatedAt: Float
}

input AuctionRawUpdateInput {
  tokenID: String
  endTime_inc: Float
  showcaseFee_unset: Boolean
  endTime_unset: Boolean
  bids: [AuctionRawBidUpdateInput]
  tokenAddress_unset: Boolean
  endTime: Float
  superType: String
  startBid_unset: Boolean
  startBid: String
  tokenAddress: String
  bidStep: String
  bids_unset: Boolean
  bidStep_unset: Boolean
  startTime_inc: Float
  tokenID_unset: Boolean
  startTime: Float
  startTime_unset: Boolean
  auctionCreator_unset: Boolean
  showcaseFee: String
  auctionCreator: String
  superType_unset: Boolean
}

enum FormatSortByInput {
  WIDTH_ASC
  WIDTH_DESC
  _ID_ASC
  _ID_DESC
  FORMATNAME_ASC
  FORMATNAME_DESC
  HEIGHT_ASC
  HEIGHT_DESC
}

type Blockchain {
  _id: ObjectId
  contractsRepo: String
  name: String
  network: BlockchainNetwork
}

input Ui_managementModuleIDRelationInput {
  create: Ui_moduleInsertInput
  link: String
}

input Swift_messageMessageUpdateInput {
  senderAddress_unset: Boolean
  discoveryTime: Float
  time: Float
  resolution_unset: Boolean
  time_unset: Boolean
  discoveryTime_inc: Float
  superType: String
  parsingTime_unset: Boolean
  senderAddress: String
  parsingTime_inc: Float
  time_inc: Float
  discoveryTime_unset: Boolean
  parsingTime: Float
  actionCode_unset: Boolean
  superType_unset: Boolean
  actionCode: String
  resolution: String
}

input CollectionDeployedUpdateInput {
  superType: String
  type: String
  superType_unset: Boolean
  supply_unset: Boolean
  address: String
  hash_unset: Boolean
  privacy_unset: Boolean
  supply_inc: Int
  address_unset: Boolean
  creator_unset: Boolean
  blockchain: String
  hash: String
  blockchain_unset: Boolean
  supply: Int
  privacy: String
  type_unset: Boolean
  blockNumber_unset: Boolean
  blockNumber: Long
  creator: String
}

input Col1LayerInsertInput {
  layer: String
  points: [Col1LayerPointInsertInput]
  images: [Col1LayerImageInsertInput]
}

input TokenColImageQueryInput {
  rarity_ne: Int
  mimetype_lt: String
  height_gt: Int
  width_gt: Int
  height_lt: Int
  mimetype_gte: String
  mimetype_ne: String
  rarity_gt: Int
  width_nin: [Int]
  width_exists: Boolean
  width_lt: Int
  AND: [TokenColImageQueryInput!]
  hash: String
  OR: [TokenColImageQueryInput!]
  width_lte: Int
  weight_lt: Int
  weight_in: [Int]
  subtitle_in: [String]
  width_in: [Int]
  hash_in: [String]
  hash_lte: String
  height: Int
  hash_nin: [String]
  height_lte: Int
  subtitle_nin: [String]
  rarity_gte: Int
  subtitle_exists: Boolean
  subtitle_lte: String
  mimetype_gt: String
  height_ne: Int
  rarity_lt: Int
  height_gte: Int
  width_gte: Int
  mimetype_exists: Boolean
  subtitle_lt: String
  subtitle_gt: String
  mimetype_nin: [String]
  mimetype: String
  weight_exists: Boolean
  weight_ne: Int
  height_in: [Int]
  mimetype_in: [String]
  rarity_exists: Boolean
  hash_gt: String
  rarity_nin: [Int]
  subtitle_ne: String
  hash_lt: String
  width: Int
  width_ne: Int
  subtitle_gte: String
  weight_lte: Int
  height_exists: Boolean
  height_nin: [Int]
  hash_exists: Boolean
  weight_gte: Int
  subtitle: String
  mimetype_lte: String
  weight_gt: Int
  weight: Int
  rarity_lte: Int
  hash_gte: String
  weight_nin: [Int]
  hash_ne: String
  rarity: Int
  rarity_in: [Int]
}

type User {
  _id: ObjectId
  about: String
  accountNumber: Int
  avatarHash: String
  blockchain: String
  createdAt: Float
  defaultWallet: String
  integrations: [UserIntegration]
  language: String
  managingAccount: Int
  mergedAccounts: [UserMergedAccount]
  nickname: String
  photoHash: String
  qualification: Int
  registeredWallet: String
  settings: UserSetting
  updatedAt: Float
  username: String
  walletAddress: String
  wallpaperHash: String
}

input UserInsertInput {
  walletAddress: String
  createdAt: Float
  photoHash: String
  nickname: String
  language: String
  integrations: [UserIntegrationInsertInput]
  managingAccount: Int
  avatarHash: String
  blockchain: String
  updatedAt: Float
  _id: ObjectId
  accountNumber: Int
  settings: UserSettingInsertInput
  defaultWallet: String
  registeredWallet: String
  wallpaperHash: String
  about: String
  qualification: Int
  username: String
  mergedAccounts: [UserMergedAccountInsertInput]
}

enum Primary_jsonSortByInput {
  JSONSTRING_DESC
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  HASH_ASC
  HASH_DESC
  JSONSTRING_ASC
}

type OpendatumPermission {
  functions: [String]
  root: String
}

input AuctionRawQueryInput {
  tokenAddress_lte: String
  tokenAddress_gt: String
  startBid: String
  endTime_nin: [Float]
  bids_in: [AuctionRawBidQueryInput]
  showcaseFee_gt: String
  bidStep_lt: String
  tokenAddress_lt: String
  tokenAddress_nin: [String]
  superType: String
  startTime: Float
  endTime_lt: Float
  tokenID_lte: String
  bids_exists: Boolean
  startTime_gte: Float
  AND: [AuctionRawQueryInput!]
  bidStep: String
  superType_exists: Boolean
  startTime_in: [Float]
  showcaseFee_in: [String]
  tokenAddress_ne: String
  tokenID_gt: String
  auctionCreator_ne: String
  showcaseFee: String
  bidStep_lte: String
  startTime_gt: Float
  bidStep_nin: [String]
  startBid_exists: Boolean
  tokenID_gte: String
  endTime_exists: Boolean
  auctionCreator_lt: String
  tokenID_in: [String]
  superType_gte: String
  startBid_lte: String
  startBid_nin: [String]
  startTime_nin: [Float]
  tokenID_exists: Boolean
  showcaseFee_lt: String
  tokenAddress_gte: String
  endTime_gt: Float
  bids: [AuctionRawBidQueryInput]
  tokenAddress_exists: Boolean
  auctionCreator_gte: String
  tokenID_ne: String
  auctionCreator: String
  endTime_gte: Float
  startTime_ne: Float
  endTime_in: [Float]
  auctionCreator_nin: [String]
  tokenAddress_in: [String]
  auctionCreator_gt: String
  bidStep_ne: String
  bids_nin: [AuctionRawBidQueryInput]
  showcaseFee_ne: String
  auctionCreator_in: [String]
  bidStep_gte: String
  startBid_lt: String
  bidStep_exists: Boolean
  showcaseFee_gte: String
  startBid_in: [String]
  auctionCreator_lte: String
  auctionCreator_exists: Boolean
  endTime_ne: Float
  tokenID_nin: [String]
  startTime_exists: Boolean
  superType_in: [String]
  superType_nin: [String]
  startBid_gte: String
  superType_lte: String
  showcaseFee_lte: String
  superType_ne: String
  startTime_lte: Float
  showcaseFee_exists: Boolean
  tokenAddress: String
  superType_lt: String
  OR: [AuctionRawQueryInput!]
  startBid_ne: String
  tokenID_lt: String
  bidStep_gt: String
  endTime_lte: Float
  startBid_gt: String
  superType_gt: String
  startTime_lt: Float
  tokenID: String
  showcaseFee_nin: [String]
  endTime: Float
  bidStep_in: [String]
}

input BidInsertInput {
  bidID: String
  createdAt: Float
  deployed: BidDeployedInsertInput
  raw: BidRawInsertInput
  updatedAt: Float
  _id: ObjectId
}

input BidRawInsertInput {
  tokenAddress: String
  tokenID: String
  bidCreator: String
  bidValue: String
  endTime: Float
  superType: String
}

input CollectionRawInsertInput {
  txHash: String
  hash: String
  privacy: String
  type: String
  about: String
  creator: String
  blockchain: String
  media: [CollectionRawMediumInsertInput]
  superType: String
  title: String
}

input GetSession {
  swiftMessageTime: Float
  confirmationHash: String
  cookiesHash: String
}

type Bid {
  _id: ObjectId
  bidID: String
  createdAt: Float
  deployed: BidDeployed
  raw: BidRaw
  updatedAt: Float
}

input SeriesRawQueryInput {
  media_exists: Boolean
  qualification: Int
  title: String
  qualification_lt: Int
  type_lt: String
  creatorFees_in: [String]
  collectionID_lte: String
  creator_gte: String
  creatorFees_lt: String
  type_lte: String
  hash_gte: String
  qualification_exists: Boolean
  hash_nin: [String]
  usersWhoShared_exists: Boolean
  type_in: [String]
  blockchain_lte: String
  usersWhoShared: [Int]
  creator_lte: String
  media_nin: [SeriesRawMediumQueryInput]
  AND: [SeriesRawQueryInput!]
  numberOfEditions_lt: Int
  type_nin: [String]
  usersWhoShared_in: [Int]
  description_in: [String]
  superType_nin: [String]
  numberOfEditions_ne: Int
  title_gte: String
  blockchain_exists: Boolean
  collectionID_gte: String
  type: String
  blockchain_gte: String
  superType_lte: String
  creatorFees_nin: [String]
  description_exists: Boolean
  title_exists: Boolean
  collectionID_nin: [String]
  blockchain_in: [String]
  title_lt: String
  blockchain_ne: String
  title_gt: String
  creator_nin: [String]
  numberOfEditions: Int
  superType_gt: String
  creator_lt: String
  superType_exists: Boolean
  usersWhoShared_nin: [Int]
  creatorFees: String
  numberOfEditions_nin: [Int]
  blockchain_gt: String
  creatorFees_gte: String
  hash_exists: Boolean
  numberOfEditions_in: [Int]
  hash_in: [String]
  creator_in: [String]
  superType_in: [String]
  type_gt: String
  description: String
  OR: [SeriesRawQueryInput!]
  blockchain_nin: [String]
  superType_gte: String
  creator: String
  creator_gt: String
  media_in: [SeriesRawMediumQueryInput]
  numberOfEditions_gt: Int
  creatorFees_ne: String
  creator_ne: String
  hash: String
  superType: String
  title_nin: [String]
  collectionID_lt: String
  collectionID_ne: String
  description_lt: String
  description_nin: [String]
  numberOfEditions_lte: Int
  title_lte: String
  superType_ne: String
  qualification_gt: Int
  qualification_gte: Int
  title_ne: String
  superType_lt: String
  hash_lt: String
  hash_gt: String
  collectionID_gt: String
  type_ne: String
  media: [SeriesRawMediumQueryInput]
  qualification_nin: [Int]
  numberOfEditions_gte: Int
  blockchain_lt: String
  hash_ne: String
  numberOfEditions_exists: Boolean
  blockchain: String
  description_gt: String
  hash_lte: String
  collectionID: String
  creatorFees_exists: Boolean
  collectionID_exists: Boolean
  collectionID_in: [String]
  description_ne: String
  qualification_lte: Int
  qualification_in: [Int]
  qualification_ne: Int
  type_gte: String
  type_exists: Boolean
  description_gte: String
  title_in: [String]
  creatorFees_gt: String
  creatorFees_lte: String
  creator_exists: Boolean
  description_lte: String
}

input AuctionRawBidInsertInput {
  bidCreator: String
  bidValue: String
}

input Ui_managementInsertInput {
  visibilityStatus: String
  moduleScope: String
  recordID: String
  assetID: Ui_managementAssetIDRelationInput
  updatedAt: Float
  itemID: String
  tag: [String]
  assetTitle: String
  createdAt: Float
  image: String
  moduleID: Ui_managementModuleIDRelationInput
  moduleItemType: String
  moduleName: String
  itemLink: String
  airtableId: String
  _id: ObjectId
}

input SeriesRawMediumUpdateInput {
  subtitle_unset: Boolean
  role: String
  ipfsHash_unset: Boolean
  width_unset: Boolean
  mimetype: String
  width: Int
  height_unset: Boolean
  height: Int
  weight: Int
  height_inc: Int
  weight_inc: Int
  hash_unset: Boolean
  ipfsHash: String
  mimetype_unset: Boolean
  weight_unset: Boolean
  width_inc: Int
  role_unset: Boolean
  subtitle: String
  hash: String
}

type ActionColMessage {
  actionCode: String
  hash: String
  senderAddress: String
  senderID: String
  superType: String
  time: Float
}

type Contract_typeParameter {
  hashLevel: String
  likesLevel: String
  sharesLevel: String
}

enum Swift_messageSortByInput {
  UPDATEDAT_DESC
  HASH_ASC
  HASH_DESC
  STATUS_ASC
  _ID_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  _ID_DESC
  CREATEDAT_ASC
  STATUS_DESC
}

type CollectionRaw {
  about: String
  blockchain: String
  creator: String
  hash: String
  media: [CollectionRawMedium]
  privacy: String
  superType: String
  title: String
  txHash: String
  type: String
}

type ActionColTokenAttribute {
  seriesCreator: String
  seriesID: String
  tokenID: String
}

input ContractInsertInput {
  abiPath: String
  blockchain: String
  environment: String
  abiFile: String
  network: String
  status: String
  superType: String
  _id: ObjectId
  longType: String
  privacy: String
  address: String
}

type Hourly {
  BNBtoUSD: Float
  EVERtoUSD: Float
  USD: Float
  _id: ObjectId
  blockchain: String
  time: Float
}

input ActionActionAttributeInsertInput {
  showcaseFee: String
  submittedBidValue: String
  managerExpirationTime: Float
  auctionStartTime: Float
  managerSuperType: String
  submittedBidOwner: String
  askValue: String
  usdValue: Float
  askEndTime: Float
  auctionEndTime: Float
  bidCreator: String
  releasedBidValue: String
  releasedBidOwner: String
  sealCreator: String
  bidEndTime: Float
  actionStatus: String
  bidStep: String
  auctionCreator: String
  finalBidValue: String
  actionCapture: String
  askCreator: String
  minimalBid: String
  bidValue: String
  endorsementCreator: String
}

input DailyInsertInput {
  blockchain: String
  tokensSold: Int
  saleMin: Float
  totalSalesSum: Float
  createdAt: Float
  saleAverage: Float
  endorsementAverage: Float
  saleMax: Float
  totalSum: Float
  tokensEndorsed: Int
  totalEndorsementsSum: Float
  tokensCreated: Int
  _id: ObjectId
  date: Float
  updatedAt: Float
  endorsementMax: Float
  endorsementMin: Float
}

input EndorsementRawInsertInput {
  masterID: String
  sealID: String
  cornerSE: Boolean
  masterMediaType: String
  superType: String
  blockchain: String
  expiresAt: Float
  cornerNE: Boolean
  tokenID: String
  cornerNW: Boolean
  type: String
  value: String
  creator: String
  cornerSW: Boolean
}

input Col1QueryInput {
  mintCost_in: [Int]
  hash: String
  creator_in: [String]
  _id_lt: ObjectId
  creator_nin: [String]
  mintCost_exists: Boolean
  updatedAt_ne: Float
  address_lt: String
  creator: String
  createdAt_gte: Float
  hash_ne: String
  description_exists: Boolean
  name_exists: Boolean
  description_in: [String]
  updatedAt_gte: Float
  name_in: [String]
  name_nin: [String]
  _id_exists: Boolean
  updatedAt_in: [Float]
  name_gt: String
  _id_gt: ObjectId
  hash_lt: String
  _id_lte: ObjectId
  supply_lte: Int
  supply_lt: Int
  address_nin: [String]
  createdAt_gt: Float
  seriesId_lt: String
  hash_exists: Boolean
  creator_exists: Boolean
  address_gte: String
  maximum: Int
  name_lt: String
  mintCost_nin: [Int]
  maximum_exists: Boolean
  createdAt_ne: Float
  hash_gt: String
  address_in: [String]
  description_gte: String
  layers: [Col1LayerQueryInput]
  seriesId_nin: [String]
  description_gt: String
  _id: ObjectId
  mintCost_ne: Int
  mintCost_gte: Int
  description_lte: String
  createdAt_lt: Float
  maximum_gt: Int
  mintCost_lt: Int
  createdAt_lte: Float
  hash_gte: String
  _id_nin: [ObjectId]
  _id_ne: ObjectId
  description_ne: String
  layers_in: [Col1LayerQueryInput]
  layers_nin: [Col1LayerQueryInput]
  updatedAt_exists: Boolean
  supply_exists: Boolean
  maximum_lt: Int
  supply_in: [Int]
  hash_in: [String]
  name: String
  seriesId_exists: Boolean
  createdAt_nin: [Float]
  OR: [Col1QueryInput!]
  supply_gte: Int
  updatedAt_lt: Float
  supply_gt: Int
  maximum_ne: Int
  creator_lte: String
  layers_exists: Boolean
  name_ne: String
  seriesId: String
  maximum_lte: Int
  createdAt: Float
  _id_gte: ObjectId
  updatedAt: Float
  mintCost_gt: Int
  mintCost_lte: Int
  supply_nin: [Int]
  _id_in: [ObjectId]
  AND: [Col1QueryInput!]
  maximum_in: [Int]
  supply: Int
  updatedAt_lte: Float
  updatedAt_nin: [Float]
  updatedAt_gt: Float
  description_lt: String
  seriesId_gt: String
  creator_ne: String
  creator_gte: String
  address_gt: String
  seriesId_in: [String]
  maximum_nin: [Int]
  seriesId_ne: String
  description_nin: [String]
  address_ne: String
  address: String
  supply_ne: Int
  createdAt_exists: Boolean
  hash_nin: [String]
  seriesId_gte: String
  maximum_gte: Int
  name_gte: String
  seriesId_lte: String
  address_lte: String
  address_exists: Boolean
  creator_gt: String
  createdAt_in: [Float]
  name_lte: String
  mintCost: Int
  creator_lt: String
  description: String
  hash_lte: String
}

type Action {
  _id: ObjectId
  actionAttributes: ActionActionAttribute
  blockchain: String
  createdAt: Float
  message: ActionMessage
  tokenAttributes: ActionTokenAttribute
  updatedAt: Float
}

input SeriesPagination {
  skip: Float
  limit: Float
  search: String
  creator: String
  created_lt: Float
  sort: SeriesPaginationSort
}

input ActionColUpdateInput {
  _id_unset: Boolean
  actionAttributes: ActionColActionAttributeUpdateInput
  actionAttributes_unset: Boolean
  message: ActionColMessageUpdateInput
  message_unset: Boolean
  tokenAttributes: ActionColTokenAttributeUpdateInput
  tokenAttributes_unset: Boolean
  _id: ObjectId
}

input TokenDeployedInsertInput {
  frontStatus: String
  foreverID: String
  creatorFees: String
  superType: String
  foreverStatus: String
  hash: String
  address: String
  collectionID: String
  creatorObject: TokenDeployedCreatorObjectRelationInput
  ownerObject: TokenDeployedOwnerObjectRelationInput
  seriesID: TokenDeployedSeriesIDRelationInput
  seriesObject: TokenDeployedSeriesObjectRelationInput
  index: Int
  seal: String
  sealPosition: String
  lastSalePrice: Float
  blockchain: String
  managerExpirationTime: Float
  stamps: [TokenDeployedStampInsertInput]
  lastSaleTime: Float
  manager: String
  owner: String
  isEndorsed: Boolean
  creator: String
  type: String
}

input BidRawQueryInput {
  bidValue_ne: String
  bidValue_exists: Boolean
  bidCreator_exists: Boolean
  tokenAddress_lt: String
  superType_exists: Boolean
  tokenID_lte: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  endTime_lt: Float
  bidCreator_in: [String]
  endTime: Float
  bidCreator_gte: String
  bidValue_lt: String
  superType_lte: String
  bidValue_nin: [String]
  tokenAddress_ne: String
  endTime_exists: Boolean
  endTime_gte: Float
  bidCreator_ne: String
  bidValue: String
  bidCreator_lte: String
  endTime_gt: Float
  superType_lt: String
  tokenID_gte: String
  tokenID_in: [String]
  tokenAddress_exists: Boolean
  bidValue_lte: String
  OR: [BidRawQueryInput!]
  tokenID: String
  tokenID_nin: [String]
  tokenAddress_gt: String
  tokenAddress_in: [String]
  tokenAddress: String
  superType: String
  tokenID_exists: Boolean
  AND: [BidRawQueryInput!]
  bidValue_gt: String
  endTime_ne: Float
  tokenAddress_nin: [String]
  endTime_nin: [Float]
  tokenID_ne: String
  bidCreator: String
  tokenID_lt: String
  bidCreator_nin: [String]
  bidValue_gte: String
  superType_ne: String
  bidCreator_gt: String
  bidCreator_lt: String
  superType_in: [String]
  bidValue_in: [String]
  superType_nin: [String]
  endTime_in: [Float]
  superType_gte: String
  endTime_lte: Float
  superType_gt: String
  tokenID_gt: String
}

type Contract_typeHashFieldLayerImage {
  hash: String
  imageIndex: String
  mimetype: String
  rarityWeight: String
  weight: String
}

input AskInsertInput {
  raw: AskRawInsertInput
  _id: ObjectId
  askID: String
  updatedAt: Float
  createdAt: Float
  deployed: AskDeployedInsertInput
}

input Contract_typeHashFieldUpdateInput {
  creatorFee: String
  description_unset: Boolean
  layers_unset: Boolean
  creator: String
  collectionID: String
  media_unset: Boolean
  width: String
  collectionID_unset: Boolean
  creator_unset: Boolean
  numberOfEditions_unset: Boolean
  height: String
  title_unset: Boolean
  minimalMintFee: String
  type_unset: Boolean
  height_unset: Boolean
  title: String
  type: String
  creatorFee_unset: Boolean
  media: Contract_typeHashFieldMediumUpdateInput
  description: String
  numberOfEditions: String
  layers: Contract_typeHashFieldLayerUpdateInput
  minimalMintFee_unset: Boolean
  width_unset: Boolean
}

input OpendatumInsertInput {
  key: String
  permissions: [OpendatumPermissionInsertInput]
  _id: ObjectId
  createdAt: Float
  updatedAt: Float
}

type Locale {
  _id: ObjectId
  createdAt: Float
  lang: String
  module: Module
  moduleName: String
  string: String
  stringName: String
  updatedAt: Float
}

enum TokenSortByInput {
  TOKENID_ASC
  TOKENID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

input AuctionUpdateInput {
  deployed: AuctionDeployedUpdateInput
  raw_unset: Boolean
  _id: ObjectId
  createdAt_inc: Float
  createdAt: Float
  updatedAt_inc: Float
  raw: AuctionRawUpdateInput
  updatedAt: Float
  auctionID_unset: Boolean
  updatedAt_unset: Boolean
  _id_unset: Boolean
  auctionID: String
  createdAt_unset: Boolean
  deployed_unset: Boolean
}

input Contract_typeUpdateInput {
  abi: Contract_typeAbiUpdateInput
  hashFields_unset: Boolean
  status: String
  applicableBlockchains_unset: Boolean
  objectType: String
  objectType_unset: Boolean
  _id: ObjectId
  numberOfLevels_unset: Boolean
  numberOfLevels: String
  abi_unset: Boolean
  frontendName: String
  applicableBlockchains: [String]
  parameters: Contract_typeParameterUpdateInput
  collectionDeployAvailable_unset: Boolean
  _id_unset: Boolean
  hashFields: Contract_typeHashFieldUpdateInput
  frontendName_unset: Boolean
  parameters_unset: Boolean
  longType: String
  longType_unset: Boolean
  collectionDeployAvailable: Boolean
  status_unset: Boolean
}

input TestTemporaryEndorsementUpdateInput {
  sealID_unset: Boolean
  expiresAt: Float
  expiresAt_inc: Float
  expiresAt_unset: Boolean
  sealID: String
}

input ModuleQueryInput {
  updatedAt_gte: Float
  page_exists: Boolean
  updatedAt_gt: Float
  module_nin: [String]
  type_lte: String
  type_nin: [String]
  updatedAt_exists: Boolean
  page_gte: String
  page: String
  _id_ne: ObjectId
  updatedAt: Float
  createdAt_gt: Float
  _id_lt: ObjectId
  module_ne: String
  module_exists: Boolean
  createdAt_lte: Float
  _id_exists: Boolean
  OR: [ModuleQueryInput!]
  type_exists: Boolean
  nameType_gt: String
  nameType_nin: [String]
  _id_gt: ObjectId
  createdAt_in: [Float]
  _id_gte: ObjectId
  updatedAt_lte: Float
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
  module_lte: String
  nameType_ne: String
  module_lt: String
  createdAt_lt: Float
  type_in: [String]
  updatedAt_in: [Float]
  updatedAt_lt: Float
  page_lte: String
  page_gt: String
  page_in: [String]
  type_lt: String
  nameType_exists: Boolean
  type_ne: String
  type_gt: String
  _id: ObjectId
  createdAt_gte: Float
  _id_lte: ObjectId
  module_gte: String
  page_lt: String
  type: String
  createdAt_nin: [Float]
  nameType_gte: String
  module_gt: String
  page_nin: [String]
  createdAt: Float
  nameType_lt: String
  module_in: [String]
  module: String
  nameType_lte: String
  createdAt_exists: Boolean
  type_gte: String
  createdAt_ne: Float
  nameType_in: [String]
  updatedAt_nin: [Float]
  AND: [ModuleQueryInput!]
  nameType: String
  page_ne: String
  updatedAt_ne: Float
}

input SeriesRawMediumQueryInput {
  mimetype_lt: String
  mimetype_lte: String
  subtitle_gte: String
  hash_in: [String]
  height_lte: Int
  width: Int
  subtitle_nin: [String]
  weight_exists: Boolean
  ipfsHash_exists: Boolean
  weight_gte: Int
  height_exists: Boolean
  subtitle_ne: String
  width_gte: Int
  height: Int
  subtitle_lt: String
  ipfsHash_gte: String
  ipfsHash_lte: String
  mimetype_gt: String
  ipfsHash_nin: [String]
  width_lte: Int
  width_in: [Int]
  hash_exists: Boolean
  weight_in: [Int]
  ipfsHash_gt: String
  subtitle_exists: Boolean
  height_gte: Int
  width_gt: Int
  role_exists: Boolean
  height_ne: Int
  weight_nin: [Int]
  height_gt: Int
  hash_gt: String
  weight_lte: Int
  hash_gte: String
  height_lt: Int
  role_gte: String
  role_lt: String
  weight_gt: Int
  width_lt: Int
  weight: Int
  hash: String
  subtitle: String
  mimetype_in: [String]
  mimetype_gte: String
  weight_ne: Int
  ipfsHash_lt: String
  ipfsHash: String
  mimetype_exists: Boolean
  subtitle_gt: String
  role: String
  weight_lt: Int
  mimetype_ne: String
  hash_lte: String
  mimetype_nin: [String]
  height_in: [Int]
  width_ne: Int
  ipfsHash_ne: String
  AND: [SeriesRawMediumQueryInput!]
  subtitle_lte: String
  ipfsHash_in: [String]
  hash_lt: String
  width_nin: [Int]
  hash_nin: [String]
  width_exists: Boolean
  role_in: [String]
  role_gt: String
  subtitle_in: [String]
  role_nin: [String]
  hash_ne: String
  mimetype: String
  height_nin: [Int]
  role_ne: String
  role_lte: String
  OR: [SeriesRawMediumQueryInput!]
}

input AskRawValueUpdateInput {
  askTime: Float
  askTime_inc: Float
  askTime_unset: Boolean
  askValue: String
  askValue_unset: Boolean
}

input TokenUpdateInput {
  raw: TokenRawUpdateInput
  tokenID_unset: Boolean
  raw_unset: Boolean
  tokenID: String
  updatedAt_unset: Boolean
  _id: ObjectId
  createdAt_inc: Float
  updatedAt: Float
  _id_unset: Boolean
  createdAt_unset: Boolean
  updatedAt_inc: Float
  deployed: TokenDeployedUpdateInput
  createdAt: Float
  deployed_unset: Boolean
}

input NetworkUpdateInput {
  _id_unset: Boolean
  integration: String
  integration_unset: Boolean
  name: String
  name_unset: Boolean
  type: String
  type_unset: Boolean
  _id: ObjectId
}

input AskDeployedValueInsertInput {
  askTime: Float
  askValue: String
}

input TokenRawMediumInsertInput {
  height: Int
  mimetype: String
  subtitle: String
  weight: Int
  width: Int
  role: String
  hash: String
  ipfsHash: String
}

type Event {
  _id: ObjectId
  blockNumber: Long
  blockchain: String
  createdAt: Float
  message: EventMessage
  parameters: EventParameter
  status: String
  topics: [String]
  updatedAt: Float
}

input OpendatumQueryInput {
  permissions_in: [OpendatumPermissionQueryInput]
  createdAt_nin: [Float]
  createdAt_exists: Boolean
  _id_nin: [ObjectId]
  key_exists: Boolean
  updatedAt_ne: Float
  OR: [OpendatumQueryInput!]
  updatedAt_lte: Float
  updatedAt_gte: Float
  permissions_nin: [OpendatumPermissionQueryInput]
  createdAt_gt: Float
  key_ne: String
  _id_in: [ObjectId]
  key_nin: [String]
  _id_lte: ObjectId
  _id_ne: ObjectId
  _id_exists: Boolean
  createdAt_lte: Float
  createdAt_ne: Float
  permissions_exists: Boolean
  key_gt: String
  _id: ObjectId
  createdAt_lt: Float
  updatedAt: Float
  updatedAt_lt: Float
  updatedAt_nin: [Float]
  _id_lt: ObjectId
  updatedAt_gt: Float
  key_lt: String
  _id_gt: ObjectId
  key_gte: String
  createdAt_gte: Float
  _id_gte: ObjectId
  updatedAt_in: [Float]
  createdAt: Float
  key: String
  key_lte: String
  createdAt_in: [Float]
  updatedAt_exists: Boolean
  permissions: [OpendatumPermissionQueryInput]
  AND: [OpendatumQueryInput!]
  key_in: [String]
}

input TriggerUpdateInput {
  _id: ObjectId
  _id_unset: Boolean
  name: String
  name_unset: Boolean
  lastDate: Float
  lastDate_inc: Float
  lastDate_unset: Boolean
}

input Col1InsertInput {
  mintCost: Int
  description: String
  creator: String
  seriesId: String
  layers: [Col1LayerInsertInput]
  maximum: Int
  createdAt: Float
  address: String
  updatedAt: Float
  _id: ObjectId
  name: String
  hash: String
  supply: Int
}

input Ui_chartQueryInput {
  updatedAt: Float
  updatedAt_nin: [Float]
  aggregationField_gte: String
  moduleID_exists: Boolean
  aggregationField_nin: [String]
  linkSuffix_nin: [String]
  name_gte: String
  sort_nin: [String]
  outputObject_lte: String
  linkSuffix_lte: String
  outputObject_nin: [String]
  name_lte: String
  createdAt_ne: Float
  moduleID_lt: String
  outputObject_gte: String
  sort_lte: String
  name_lt: String
  dataObject_lt: String
  limit_exists: Boolean
  _id: ObjectId
  airtableId_nin: [String]
  airtableId_ne: String
  function: String
  aggregationField_gt: String
  outputObject_lt: String
  limit_ne: Int
  dataObject_lte: String
  function_lt: String
  updatedAt_lte: Float
  field_ne: String
  createdAt_gte: Float
  _id_lte: ObjectId
  name: String
  outputObject: String
  linkSuffix: String
  dataObject: String
  outputObject_gt: String
  aggregationField_lt: String
  moduleID_lte: String
  createdAt: Float
  aggregationField_in: [String]
  sort_gt: String
  _id_lt: ObjectId
  dataObject_gt: String
  updatedAt_in: [Float]
  moduleID: String
  limit_in: [Int]
  airtableId_lte: String
  field_lte: String
  createdAt_lt: Float
  createdAt_lte: Float
  function_ne: String
  field_nin: [String]
  limit_gt: Int
  limit_lte: Int
  moduleID_gt: String
  moduleID_in: [String]
  sort: String
  name_nin: [String]
  function_in: [String]
  name_gt: String
  aggregationField_exists: Boolean
  airtableId_gte: String
  airtableId_lt: String
  dataObject_in: [String]
  limit: Int
  function_exists: Boolean
  sort_in: [String]
  _id_nin: [ObjectId]
  function_gte: String
  updatedAt_gte: Float
  airtableId_gt: String
  function_gt: String
  updatedAt_exists: Boolean
  moduleID_gte: String
  limit_lt: Int
  airtableId: String
  airtableId_exists: Boolean
  dataObject_exists: Boolean
  createdAt_in: [Float]
  sort_ne: String
  linkSuffix_lt: String
  createdAt_gt: Float
  createdAt_exists: Boolean
  dataObject_ne: String
  function_nin: [String]
  linkSuffix_gte: String
  field: String
  field_gt: String
  updatedAt_lt: Float
  _id_in: [ObjectId]
  updatedAt_ne: Float
  outputObject_in: [String]
  sort_exists: Boolean
  sort_gte: String
  aggregationField_ne: String
  name_ne: String
  outputObject_ne: String
  name_exists: Boolean
  linkSuffix_gt: String
  _id_exists: Boolean
  moduleID_ne: String
  createdAt_nin: [Float]
  aggregationField: String
  updatedAt_gt: Float
  _id_gte: ObjectId
  OR: [Ui_chartQueryInput!]
  limit_nin: [Int]
  AND: [Ui_chartQueryInput!]
  field_exists: Boolean
  dataObject_nin: [String]
  outputObject_exists: Boolean
  sort_lt: String
  dataObject_gte: String
  field_gte: String
  airtableId_in: [String]
  linkSuffix_in: [String]
  limit_gte: Int
  name_in: [String]
  linkSuffix_exists: Boolean
  aggregationField_lte: String
  _id_ne: ObjectId
  field_lt: String
  function_lte: String
  linkSuffix_ne: String
  _id_gt: ObjectId
  moduleID_nin: [String]
  field_in: [String]
}

input CollectionMediumInsertInput {
  height: Int
  mimetype: String
  role: String
  subtitle: String
  weight: Int
  width: Int
  hash: String
}

input ActionColActionAttributeInsertInput {
  actionCapture: String
}

input ActionColActionAttributeQueryInput {
  actionCapture_exists: Boolean
  actionCapture_gte: String
  actionCapture_lte: String
  actionCapture_nin: [String]
  actionCapture_gt: String
  actionCapture_lt: String
  AND: [ActionColActionAttributeQueryInput!]
  OR: [ActionColActionAttributeQueryInput!]
  actionCapture: String
  actionCapture_in: [String]
  actionCapture_ne: String
}

input Swift_messageParameterInsertInput {
  finalBidValue: String
  newManager: String
  startBid: String
  stepBid: String
  buyer: String
  endTime: String
  expirationTime: String
  askCreator: String
  auctionCreator: String
  id: String
  bidValue: String
  bidCreator: String
  startTime: String
  showcaseFees: String
  newOwner: String
  askValue: String
  seriesId: String
  tokenAddress: String
}

input AuctionDeployedQueryInput {
  startTime_ne: Float
  showcaseFee_lte: String
  startBid_lt: String
  tokenAddress_in: [String]
  startBid_gte: String
  status_gte: String
  bids_in: [AuctionDeployedBidQueryInput]
  tokenAddress: String
  finalBid_gt: String
  showcaseFee_lt: String
  finalBid_gte: String
  bidStep_gt: String
  endTime: Float
  tokenID_gte: String
  startTime_gt: Float
  AND: [AuctionDeployedQueryInput!]
  bidStep_lte: String
  startBid_gt: String
  bids_nin: [AuctionDeployedBidQueryInput]
  endTime_gte: Float
  finalBid: String
  showcaseFee_exists: Boolean
  startTime_lt: Float
  auctionAddress_gt: String
  startBid_ne: String
  bidStep: String
  tokenID_gt: String
  tokenID: String
  startTime_exists: Boolean
  superType_gte: String
  tokenID_lte: String
  bidStep_lt: String
  startTime_gte: Float
  bidStep_nin: [String]
  finalBid_in: [String]
  bids_exists: Boolean
  tokenID_ne: String
  status: String
  status_gt: String
  tokenID_in: [String]
  finalBid_nin: [String]
  superType_in: [String]
  startTime: Float
  tokenAddress_ne: String
  status_lt: String
  OR: [AuctionDeployedQueryInput!]
  bidStep_exists: Boolean
  superType_lte: String
  showcaseFee_gt: String
  startBid_exists: Boolean
  status_ne: String
  tokenAddress_exists: Boolean
  showcaseFee_gte: String
  auctionAddress: String
  showcaseFee_nin: [String]
  status_nin: [String]
  superType_nin: [String]
  showcaseFee_in: [String]
  tokenAddress_nin: [String]
  startBid: String
  bids: [AuctionDeployedBidQueryInput]
  endTime_exists: Boolean
  endTime_lt: Float
  endTime_ne: Float
  endTime_lte: Float
  tokenAddress_gt: String
  tokenAddress_lte: String
  tokenAddress_lt: String
  endTime_in: [Float]
  auctionAddress_in: [String]
  endTime_gt: Float
  superType: String
  bidStep_ne: String
  startBid_in: [String]
  superType_lt: String
  auctionAddress_exists: Boolean
  auctionAddress_ne: String
  auctionAddress_lte: String
  startTime_nin: [Float]
  status_in: [String]
  bidStep_gte: String
  bidStep_in: [String]
  showcaseFee: String
  finalBid_exists: Boolean
  auctionAddress_lt: String
  finalBid_lte: String
  tokenID_exists: Boolean
  superType_ne: String
  auctionAddress_gte: String
  startTime_in: [Float]
  tokenID_nin: [String]
  tokenAddress_gte: String
  superType_gt: String
  startBid_nin: [String]
  finalBid_ne: String
  status_exists: Boolean
  tokenID_lt: String
  auctionAddress_nin: [String]
  finalBid_lt: String
  startBid_lte: String
  superType_exists: Boolean
  endTime_nin: [Float]
  startTime_lte: Float
  showcaseFee_ne: String
  status_lte: String
}

input ActionUpdateInput {
  actionAttributes: ActionActionAttributeUpdateInput
  actionAttributes_unset: Boolean
  blockchain_unset: Boolean
  createdAt: Float
  message: ActionMessageUpdateInput
  blockchain: String
  createdAt_unset: Boolean
  updatedAt: Float
  updatedAt_inc: Float
  tokenAttributes_unset: Boolean
  tokenAttributes: ActionTokenAttributeUpdateInput
  createdAt_inc: Float
  updatedAt_unset: Boolean
  _id: ObjectId
  message_unset: Boolean
  _id_unset: Boolean
}

input AskUpdateInput {
  createdAt_unset: Boolean
  askID: String
  updatedAt_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  deployed_unset: Boolean
  updatedAt_inc: Float
  createdAt: Float
  updatedAt: Float
  createdAt_inc: Float
  raw: AskRawUpdateInput
  deployed: AskDeployedUpdateInput
  askID_unset: Boolean
  raw_unset: Boolean
}

type CollectionDeployed {
  address: String
  blockNumber: Long
  blockchain: String
  creator: String
  hash: String
  privacy: String
  superType: String
  supply: Int
  type: String
}

input HourlyInsertInput {
  time: Float
  blockchain: String
  USD: Float
  EVERtoUSD: Float
  BNBtoUSD: Float
  _id: ObjectId
}

input BlockchainNetworkTestUpdateInput {
  endpoint_unset: Boolean
  browser: String
  browser_unset: Boolean
  endpoint: String
}

enum Address_abiSortByInput {
  ADDRESS_DESC
  LEVEL_ASC
  LEVEL_DESC
  SUPERTYPE_ASC
  SUPERTYPE_DESC
  _ID_ASC
  _ID_DESC
  ADDRESS_ASC
}

type Session {
  _id: ObjectId
  accountNumberObject: User
  address: String
  confirmationHash: String
  cookiesHash: String
  createdAt: Float
  integrationCode: String
  isExpired: Boolean
  swiftMessageTime: Float
  updatedAt: Float
}

input AskRawQueryInput {
  tokenID_in: [String]
  currentAskValue_gt: String
  tokenAddress_lte: String
  tokenAddress_ne: String
  blockchain_gte: String
  showcaseFee_gt: String
  blockchain_nin: [String]
  showcaseFee_lte: String
  blockchain_lte: String
  superType_lte: String
  endTime_in: [Float]
  tokenAddress_nin: [String]
  endTime_ne: Float
  blockchain_gt: String
  OR: [AskRawQueryInput!]
  blockchain_exists: Boolean
  showcaseFee_ne: String
  endTime_exists: Boolean
  showcaseFee_nin: [String]
  currentAskValue: String
  endTime_gt: Float
  values_nin: [AskRawValueQueryInput]
  superType_nin: [String]
  AND: [AskRawQueryInput!]
  showcaseFee_lt: String
  askCreator_nin: [String]
  superType: String
  endTime_lt: Float
  tokenID_ne: String
  showcaseFee_exists: Boolean
  tokenAddress_gte: String
  tokenID_nin: [String]
  showcaseFee: String
  endTime_lte: Float
  superType_gt: String
  currentAskValue_in: [String]
  showcaseFee_in: [String]
  tokenAddress: String
  tokenID_gte: String
  endTime_nin: [Float]
  tokenID_lt: String
  tokenID: String
  endTime: Float
  askCreator_gte: String
  blockchain_ne: String
  askCreator_in: [String]
  values_exists: Boolean
  superType_gte: String
  currentAskValue_gte: String
  tokenAddress_gt: String
  tokenID_exists: Boolean
  endTime_gte: Float
  superType_exists: Boolean
  currentAskValue_lt: String
  tokenAddress_lt: String
  values: [AskRawValueQueryInput]
  askCreator_ne: String
  askCreator_exists: Boolean
  values_in: [AskRawValueQueryInput]
  showcaseFee_gte: String
  blockchain_in: [String]
  superType_lt: String
  blockchain_lt: String
  askCreator_gt: String
  askCreator: String
  currentAskValue_exists: Boolean
  tokenAddress_exists: Boolean
  tokenID_gt: String
  askCreator_lt: String
  tokenID_lte: String
  blockchain: String
  askCreator_lte: String
  superType_in: [String]
  currentAskValue_ne: String
  superType_ne: String
  tokenAddress_in: [String]
  currentAskValue_nin: [String]
  currentAskValue_lte: String
}

input TestCrossEndorsementQueryInput {
  mediaType_gt: String
  mediaType: String
  OR: [TestCrossEndorsementQueryInput!]
  masterID_lt: String
  mediaType_in: [String]
  mediaType_gte: String
  masterID: String
  mediaType_ne: String
  AND: [TestCrossEndorsementQueryInput!]
  masterID_gt: String
  masterID_gte: String
  mediaType_exists: Boolean
  masterID_exists: Boolean
  masterID_lte: String
  masterID_in: [String]
  masterID_nin: [String]
  mediaType_lt: String
  mediaType_lte: String
  masterID_ne: String
  mediaType_nin: [String]
}

input Col1LayerPointUpdateInput {
  hash: String
  hash_unset: Boolean
  point: Float
  point_inc: Float
  point_unset: Boolean
}

input AskDeployedValueUpdateInput {
  askTime_unset: Boolean
  askValue: String
  askValue_unset: Boolean
  askTime: Float
  askTime_inc: Float
}

input TestUpdateInput {
  _id: ObjectId
  _id_unset: Boolean
  crossEndorsement: TestCrossEndorsementUpdateInput
  crossEndorsement_unset: Boolean
  temporaryEndorsements: [TestTemporaryEndorsementUpdateInput]
  temporaryEndorsements_unset: Boolean
}

input TokenCount {
  isLiveBid: Boolean
  creator: String
  collectionID: String
  isOnSale: Boolean
  search: String
  created_lt: Float
  qualification_gte: Float
  type: String
  owner: String
}

input TokenDeployedOwnerObjectRelationInput {
  create: UserInsertInput
  link: String
}

input TestTemporaryEndorsementInsertInput {
  sealID: String
  expiresAt: Float
}

input EndorsementRawUpdateInput {
  cornerSE_unset: Boolean
  masterMediaType: String
  cornerNE: Boolean
  masterID_unset: Boolean
  tokenID_unset: Boolean
  creator: String
  expiresAt: Float
  cornerSW_unset: Boolean
  masterMediaType_unset: Boolean
  masterID: String
  value_unset: Boolean
  tokenID: String
  value: String
  blockchain_unset: Boolean
  cornerNW_unset: Boolean
  type_unset: Boolean
  cornerNW: Boolean
  cornerSW: Boolean
  blockchain: String
  sealID: String
  expiresAt_inc: Float
  expiresAt_unset: Boolean
  type: String
  sealID_unset: Boolean
  cornerNE_unset: Boolean
  superType_unset: Boolean
  cornerSE: Boolean
  superType: String
  creator_unset: Boolean
}

input UserMergedAccountQueryInput {
  status_gt: String
  accountNumber_lte: Int
  accountNumber_exists: Boolean
  accountNumber_nin: [Int]
  status_in: [String]
  status_exists: Boolean
  accountNumber_lt: Int
  accountNumber_ne: Int
  AND: [UserMergedAccountQueryInput!]
  accountNumber: Int
  status_lte: String
  status_ne: String
  status_nin: [String]
  accountNumber_gt: Int
  status_gte: String
  accountNumber_gte: Int
  accountNumber_in: [Int]
  status: String
  status_lt: String
  OR: [UserMergedAccountQueryInput!]
}

enum TestSortByInput {
  _ID_ASC
  _ID_DESC
}

type Ask {
  _id: ObjectId
  askID: String
  createdAt: Float
  deployed: AskDeployed
  raw: AskRaw
  updatedAt: Float
}

input CollectionRawMediumQueryInput {
  width_exists: Boolean
  height_nin: [Int]
  weight: Int
  hash_ne: String
  role_lt: String
  width_gte: Int
  OR: [CollectionRawMediumQueryInput!]
  weight_nin: [Int]
  role_lte: String
  hash_lt: String
  width_ne: Int
  height_ne: Int
  role_in: [String]
  weight_lte: Int
  mimetype_lte: String
  hash_gt: String
  subtitle_gte: String
  role_exists: Boolean
  height_lt: Int
  subtitle_exists: Boolean
  mimetype_gt: String
  role_gte: String
  weight_in: [Int]
  role_ne: String
  weight_lt: Int
  mimetype_in: [String]
  width_lt: Int
  width_nin: [Int]
  hash: String
  hash_exists: Boolean
  mimetype_gte: String
  width_lte: Int
  hash_nin: [String]
  weight_gte: Int
  hash_in: [String]
  height_exists: Boolean
  mimetype_lt: String
  mimetype_nin: [String]
  mimetype_exists: Boolean
  height_gt: Int
  subtitle_ne: String
  subtitle_lte: String
  role_gt: String
  width: Int
  role: String
  hash_lte: String
  subtitle_lt: String
  weight_gt: Int
  role_nin: [String]
  weight_ne: Int
  AND: [CollectionRawMediumQueryInput!]
  height_gte: Int
  mimetype_ne: String
  subtitle_gt: String
  subtitle_nin: [String]
  mimetype: String
  width_gt: Int
  width_in: [Int]
  subtitle: String
  height_lte: Int
  weight_exists: Boolean
  height_in: [Int]
  subtitle_in: [String]
  hash_gte: String
  height: Int
}

input OpendatumPermissionQueryInput {
  root_ne: String
  root_lt: String
  root_nin: [String]
  root_gte: String
  root_lte: String
  root_exists: Boolean
  functions_in: [String]
  root_gt: String
  functions: [String]
  AND: [OpendatumPermissionQueryInput!]
  functions_nin: [String]
  OR: [OpendatumPermissionQueryInput!]
  root: String
  root_in: [String]
  functions_exists: Boolean
}

type Ipf {
  _id: ObjectId
  createdAt: Float
  ipfsHash: String
  mediaHash: String
}

input Swift_codeUpdateInput {
  applicableBlockchains: [String]
  actorField_unset: Boolean
  additionalInfo: String
  additionalInfo_unset: Boolean
  description: String
  _id: ObjectId
  _id_unset: Boolean
  description_unset: Boolean
  code_unset: Boolean
  applicableBlockchains_unset: Boolean
  actionCapture_unset: Boolean
  applicableContractType: [String]
  actorField: String
  applicableContractType_unset: Boolean
  code: String
  actionCapture: String
}

enum SeriesPaginationSort {
  CREATED_ASC
  CREATED_DESC
}

input TokenPagination {
  owner: String
  isLiveBid: Boolean
  search: String
  skip: Float
  limit: Float
  collectionID: String
  qualification_gte: Float
  creator: String
  isOnSale: Boolean
  sort: TokenPaginationSort
  created_lt: Float
  type: String
}

enum Ui_moduleSortByInput {
  BUTTONNAME_ASC
  BUTTONNAME_DESC
  BUTTONTYPE_DESC
  STATUS_DESC
  AIRTABLEID_DESC
  MODULEID_ASC
  PAGE_ASC
  STATUS_ASC
  SCOPE_ASC
  SCOPE_DESC
  BUTTONACTION_ASC
  COMMENT_ASC
  COMMENT_DESC
  ITEMTYPE_ASC
  NAME_DESC
  PAGE_DESC
  SPECIALFEATURE_DESC
  UPDATEDAT_DESC
  AUTOFINISH_ASC
  AUTOFINISH_DESC
  BUTTONACTION_DESC
  _ID_DESC
  AUTOSTART_DESC
  NAME_ASC
  MODE_ASC
  MODULEID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  _ID_ASC
  AUTOSTART_ASC
  MANAGEMENTIDS_DESC
  BUTTONTYPE_ASC
  MAINLINK_DESC
  AIRTABLEID_ASC
  MAINLINK_ASC
  MANAGEMENTIDS_ASC
  MODE_DESC
  SPECIALFEATURE_ASC
  BUTTONLINK_ASC
  BUTTONLINK_DESC
  ITEMTYPE_DESC
}

input TokenRawUpdateInput {
  owner: String
  seriesID: String
  media: [TokenRawMediumUpdateInput]
  owner_unset: Boolean
  collectionID: String
  description_unset: Boolean
  width_unset: Boolean
  numberOfEditions_inc: Int
  creator_unset: Boolean
  blockchain: String
  qualification_inc: Int
  type_unset: Boolean
  collectionID_unset: Boolean
  creatorFees_unset: Boolean
  creator: String
  superType: String
  media_unset: Boolean
  description: String
  usersWhoShared_unset: Boolean
  hash_unset: Boolean
  qualification: Int
  hash: String
  title: String
  height: String
  qualification_unset: Boolean
  superType_unset: Boolean
  type: String
  height_unset: Boolean
  numberOfEditions_unset: Boolean
  usersWhoShared: [Int]
  seriesID_unset: Boolean
  creatorFees: String
  blockchain_unset: Boolean
  numberOfEditions: Int
  title_unset: Boolean
  width: String
}

type CollectionRawMedium {
  hash: String
  height: Int
  mimetype: String
  role: String
  subtitle: String
  weight: Int
  width: Int
}

input Contract_typeHashFieldLayerQueryInput {
  layerIndex_gte: String
  layerIndex_lte: String
  layerIndex_in: [String]
  OR: [Contract_typeHashFieldLayerQueryInput!]
  layerIndex_lt: String
  layerIndex_exists: Boolean
  layerIndex_ne: String
  layerIndex: String
  layerIndex_gt: String
  layerIndex_nin: [String]
  AND: [Contract_typeHashFieldLayerQueryInput!]
  images: Contract_typeHashFieldLayerImageQueryInput
  images_exists: Boolean
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Swift_message {
  _id: ObjectId
  createdAt: Float
  hash: String
  message: Swift_messageMessage
  parameters: Swift_messageParameter
  status: String
  updatedAt: Float
}

input ActionMessageUpdateInput {
  actionCode: ActionMessageActionCodeRelationInput
  time: Float
  senderID: String
  hash_unset: Boolean
  superType: String
  actionCode_unset: Boolean
  superType_unset: Boolean
  time_inc: Float
  senderAddress_unset: Boolean
  resolution_unset: Boolean
  resolution: String
  senderAddress: String
  senderID_unset: Boolean
  hash: String
  time_unset: Boolean
}

input AuctionRawBidUpdateInput {
  bidCreator: String
  bidCreator_unset: Boolean
  bidValue: String
  bidValue_unset: Boolean
}

input TestCrossEndorsementInsertInput {
  masterID: String
  mediaType: String
}

input TokenDeployedStampUpdateInput {
  tokenID: String
  tokenID_unset: Boolean
}

input AskDeployedValueQueryInput {
  askValue_gte: String
  askValue_lte: String
  askValue_in: [String]
  askTime_gt: Float
  askTime_in: [Float]
  askTime: Float
  askValue_gt: String
  OR: [AskDeployedValueQueryInput!]
  AND: [AskDeployedValueQueryInput!]
  askTime_gte: Float
  askTime_ne: Float
  askValue_exists: Boolean
  askTime_lte: Float
  askTime_nin: [Float]
  askValue_lt: String
  askValue_nin: [String]
  askTime_lt: Float
  askTime_exists: Boolean
  askValue_ne: String
  askValue: String
}

input New_sessionUpdateInput {
  _id_unset: Boolean
  token: String
  token_unset: Boolean
  walletAddress: String
  walletAddress_unset: Boolean
  _id: ObjectId
}

input CollectionRawQueryInput {
  hash_in: [String]
  type_lt: String
  blockchain_lte: String
  type_gte: String
  blockchain_gt: String
  creator_lte: String
  hash_ne: String
  txHash_ne: String
  privacy_gt: String
  hash_nin: [String]
  txHash_in: [String]
  blockchain_nin: [String]
  type_lte: String
  title_nin: [String]
  AND: [CollectionRawQueryInput!]
  type: String
  privacy_nin: [String]
  creator_in: [String]
  type_in: [String]
  about_exists: Boolean
  about_gte: String
  privacy_exists: Boolean
  creator_lt: String
  hash_gt: String
  creator_nin: [String]
  about_lte: String
  superType_nin: [String]
  title_exists: Boolean
  type_exists: Boolean
  hash_lt: String
  blockchain_lt: String
  title_in: [String]
  txHash_exists: Boolean
  about_nin: [String]
  blockchain: String
  title_ne: String
  creator: String
  hash_exists: Boolean
  superType_ne: String
  superType_lt: String
  superType_lte: String
  OR: [CollectionRawQueryInput!]
  superType: String
  title: String
  media_in: [CollectionRawMediumQueryInput]
  txHash_gte: String
  title_lt: String
  superType_gt: String
  about_in: [String]
  blockchain_ne: String
  privacy_lt: String
  privacy_ne: String
  superType_gte: String
  privacy_in: [String]
  txHash: String
  privacy_lte: String
  type_nin: [String]
  about_gt: String
  creator_gte: String
  about_ne: String
  privacy: String
  superType_in: [String]
  blockchain_exists: Boolean
  about: String
  hash: String
  creator_ne: String
  privacy_gte: String
  title_gte: String
  txHash_lte: String
  creator_exists: Boolean
  type_gt: String
  hash_gte: String
  media_exists: Boolean
  type_ne: String
  hash_lte: String
  about_lt: String
  title_gt: String
  superType_exists: Boolean
  media_nin: [CollectionRawMediumQueryInput]
  txHash_gt: String
  txHash_lt: String
  blockchain_gte: String
  blockchain_in: [String]
  txHash_nin: [String]
  media: [CollectionRawMediumQueryInput]
  title_lte: String
  creator_gt: String
}

type AskRaw {
  askCreator: String
  blockchain: String
  currentAskValue: String
  endTime: Float
  showcaseFee: String
  superType: String
  tokenAddress: String
  tokenID: String
  values: [AskRawValue]
}

input ActionColMessageInsertInput {
  senderID: String
  superType: String
  time: Float
  actionCode: String
  hash: String
  senderAddress: String
}

enum DailySortByInput {
  BLOCKCHAIN_DESC
  SALEMAX_DESC
  TOKENSSOLD_DESC
  TOKENSENDORSED_ASC
  CREATEDAT_ASC
  SALEMIN_ASC
  ENDORSEMENTAVERAGE_DESC
  BLOCKCHAIN_ASC
  TOTALENDORSEMENTSSUM_ASC
  _ID_ASC
  SALEMIN_DESC
  ENDORSEMENTMIN_ASC
  TOKENSENDORSED_DESC
  DATE_DESC
  SALEAVERAGE_ASC
  ENDORSEMENTMAX_DESC
  TOKENSCREATED_DESC
  _ID_DESC
  DATE_ASC
  TOTALSALESSUM_ASC
  UPDATEDAT_DESC
  ENDORSEMENTAVERAGE_ASC
  SALEAVERAGE_DESC
  ENDORSEMENTMAX_ASC
  TOKENSCREATED_ASC
  TOTALSUM_ASC
  TOTALSUM_DESC
  TOTALSALESSUM_DESC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  TOKENSSOLD_ASC
  TOTALENDORSEMENTSSUM_DESC
  SALEMAX_ASC
  ENDORSEMENTMIN_DESC
}

type Token {
  _id: ObjectId
  createdAt: Float
  deployed: TokenDeployed
  raw: TokenRaw
  tokenID: String
  updatedAt: Float
}

input LocaleInsertInput {
  createdAt: Float
  updatedAt: Float
  _id: ObjectId
  lang: String
  module: LocaleModuleRelationInput
  moduleName: String
  stringName: String
  string: String
}

input Col1LayerImageInsertInput {
  subtitle: String
  weight: Int
  width: Int
  hash: String
  height: Int
  mimetype: String
  rarity: Int
}

type Royalty {
  _id: ObjectId
  count: Int
  lowerValue: Float
  percentage: Float
  upperValue: Float
}

input LocaleUpdateInput {
  string_unset: Boolean
  updatedAt_inc: Float
  _id_unset: Boolean
  lang: String
  string: String
  moduleName: String
  _id: ObjectId
  stringName: String
  stringName_unset: Boolean
  module: LocaleModuleRelationInput
  updatedAt: Float
  moduleName_unset: Boolean
  lang_unset: Boolean
  module_unset: Boolean
  createdAt: Float
  createdAt_unset: Boolean
  updatedAt_unset: Boolean
  createdAt_inc: Float
}

input CollectionRawUpdateInput {
  title: String
  creator: String
  about: String
  txHash_unset: Boolean
  hash: String
  privacy_unset: Boolean
  blockchain: String
  privacy: String
  txHash: String
  type: String
  creator_unset: Boolean
  title_unset: Boolean
  media_unset: Boolean
  type_unset: Boolean
  media: [CollectionRawMediumUpdateInput]
  about_unset: Boolean
  blockchain_unset: Boolean
  hash_unset: Boolean
  superType: String
  superType_unset: Boolean
}

enum Ui_assetSortByInput {
  MANAGEMENTIDS_ASC
  TEXTLANDING_ASC
  AIRTABLEID_DESC
  _ID_DESC
  ASSETTITLE_ASC
  ASSETTITLE_DESC
  IMAGE_ASC
  IMAGELANDING_DESC
  UPDATEDAT_ASC
  ASSETID_ASC
  CREATEDAT_ASC
  MANAGEMENTIDS_DESC
  TEXTLANDING_DESC
  _ID_ASC
  ASSETID_DESC
  ASSETSUBTITLE_ASC
  ASSETSUBTITLE_DESC
  IMAGE_DESC
  IMAGELANDING_ASC
  AIRTABLEID_ASC
  CREATEDAT_DESC
  UPDATEDAT_DESC
}

input AuctionDeployedBidInsertInput {
  bidCreator: String
  bidStatus: String
  bidValue: String
}

enum UserSortByInput {
  WALLPAPERHASH_ASC
  ABOUT_ASC
  UPDATEDAT_DESC
  BLOCKCHAIN_ASC
  DEFAULTWALLET_ASC
  LANGUAGE_DESC
  PHOTOHASH_ASC
  UPDATEDAT_ASC
  USERNAME_ASC
  ACCOUNTNUMBER_DESC
  AVATARHASH_DESC
  WALLETADDRESS_ASC
  NICKNAME_DESC
  WALLETADDRESS_DESC
  BLOCKCHAIN_DESC
  MANAGINGACCOUNT_ASC
  AVATARHASH_ASC
  NICKNAME_ASC
  REGISTEREDWALLET_DESC
  _ID_ASC
  ABOUT_DESC
  MANAGINGACCOUNT_DESC
  PHOTOHASH_DESC
  _ID_DESC
  LANGUAGE_ASC
  QUALIFICATION_DESC
  USERNAME_DESC
  DEFAULTWALLET_DESC
  QUALIFICATION_ASC
  ACCOUNTNUMBER_ASC
  REGISTEREDWALLET_ASC
  WALLPAPERHASH_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

type Col1LayerPoint {
  hash: String
  point: Float
}

enum SubscriptionSortByInput {
  _ID_DESC
  LASTBLOCKREAD_ASC
  SUPERTYPE_ASC
  BLOCKCHAIN_ASC
  LASTBLOCKREAD_DESC
  STATUS_ASC
  STATUS_DESC
  SUPERTYPE_DESC
  _ID_ASC
  ABIFILEURL_ASC
  ABIFILEURL_DESC
  ADDRESS_DESC
  ADDRESS_ASC
  BLOCKCHAIN_DESC
}

input BidDeployedInsertInput {
  bidValue: String
  endTime: Float
  status: String
  superType: String
  tokenAddress: String
  tokenID: String
  bidAddress: String
  bidCreator: String
}

input ActionTokenAttributeUpdateInput {
  collectionID: String
  manager_unset: Boolean
  supply: Int
  tokenID: String
  tokenCreator_unset: Boolean
  tokenID_unset: Boolean
  hash_unset: Boolean
  creatorFees_unset: Boolean
  creatorFees: String
  ownerPublicKey: String
  seriesCreator: String
  manager: String
  hash: String
  oldOwner_unset: Boolean
  oldOwner: String
  newOwner_unset: Boolean
  collectionCreator: String
  owner: String
  tokenCreator: String
  collectionCreator_unset: Boolean
  supply_inc: Int
  supply_unset: Boolean
  maximum: Int
  maximum_inc: Int
  owner_unset: Boolean
  ownerPublicKey_unset: Boolean
  seriesCreator_unset: Boolean
  maximum_unset: Boolean
  collectionID_unset: Boolean
  seriesID_unset: Boolean
  newOwner: String
  seriesID: ActionTokenAttributeSeriesIDRelationInput
}

input AskRawValueQueryInput {
  askValue_in: [String]
  OR: [AskRawValueQueryInput!]
  askValue_nin: [String]
  askTime_in: [Float]
  askTime_nin: [Float]
  askValue_gt: String
  askTime_gt: Float
  askValue: String
  askTime: Float
  AND: [AskRawValueQueryInput!]
  askValue_ne: String
  askValue_gte: String
  askValue_lte: String
  askTime_ne: Float
  askTime_gte: Float
  askValue_exists: Boolean
  askValue_lt: String
  askTime_lt: Float
  askTime_lte: Float
  askTime_exists: Boolean
}

input Address_abiQueryInput {
  _id_gt: ObjectId
  address_in: [String]
  level_lte: String
  superType_gte: String
  level: String
  superType_exists: Boolean
  superType_lte: String
  _id_gte: ObjectId
  address_lt: String
  address: String
  superType: String
  _id_lte: ObjectId
  _id: ObjectId
  OR: [Address_abiQueryInput!]
  _id_in: [ObjectId]
  _id_exists: Boolean
  level_in: [String]
  level_lt: String
  level_exists: Boolean
  address_ne: String
  level_gt: String
  _id_ne: ObjectId
  level_gte: String
  _id_nin: [ObjectId]
  level_ne: String
  address_nin: [String]
  address_lte: String
  superType_ne: String
  superType_nin: [String]
  address_gt: String
  level_nin: [String]
  superType_in: [String]
  _id_lt: ObjectId
  superType_gt: String
  superType_lt: String
  AND: [Address_abiQueryInput!]
  address_gte: String
  address_exists: Boolean
}

input UserMergedAccountUpdateInput {
  accountNumber: Int
  accountNumber_inc: Int
  accountNumber_unset: Boolean
  status: String
  status_unset: Boolean
}

input PaginationUiChart {
  skip: Float
  limit: Float
}

input TokenDeployedQueryInput {
  foreverStatus_ne: String
  creator_exists: Boolean
  seriesObject: SeriesQueryInput
  index_lt: Int
  sealPosition_lt: String
  ownerObject_exists: Boolean
  foreverID_exists: Boolean
  seriesID: SeriesQueryInput
  index_gt: Int
  collectionID_gt: String
  stamps_nin: [TokenDeployedStampQueryInput]
  seal_ne: String
  managerExpirationTime: Float
  lastSalePrice_gt: Float
  foreverStatus_gt: String
  hash_ne: String
  superType_gt: String
  hash_gt: String
  sealPosition_exists: Boolean
  managerExpirationTime_ne: Float
  foreverStatus: String
  blockchain_in: [String]
  creatorFees_lte: String
  superType_exists: Boolean
  index_ne: Int
  lastSalePrice_lte: Float
  superType_in: [String]
  isEndorsed: Boolean
  owner_gte: String
  lastSaleTime_in: [Float]
  creator_in: [String]
  owner_gt: String
  sealPosition_ne: String
  lastSaleTime_exists: Boolean
  isEndorsed_exists: Boolean
  creatorFees_lt: String
  stamps_in: [TokenDeployedStampQueryInput]
  stamps: [TokenDeployedStampQueryInput]
  hash_nin: [String]
  foreverID_gt: String
  lastSalePrice_in: [Float]
  lastSaleTime_ne: Float
  index: Int
  address_nin: [String]
  managerExpirationTime_nin: [Float]
  address: String
  sealPosition_gte: String
  manager_lte: String
  lastSaleTime_gte: Float
  type_gt: String
  manager_exists: Boolean
  index_exists: Boolean
  address_in: [String]
  seal_lte: String
  foreverID_gte: String
  lastSaleTime_nin: [Float]
  type: String
  owner: String
  frontStatus_lte: String
  owner_exists: Boolean
  creatorFees: String
  frontStatus_exists: Boolean
  owner_lt: String
  collectionID: String
  manager_gte: String
  stamps_exists: Boolean
  frontStatus_ne: String
  superType_lt: String
  lastSalePrice_ne: Float
  creatorFees_nin: [String]
  foreverID_ne: String
  sealPosition_lte: String
  OR: [TokenDeployedQueryInput!]
  hash_gte: String
  creatorFees_gt: String
  foreverStatus_gte: String
  index_lte: Int
  type_nin: [String]
  seal: String
  superType_nin: [String]
  blockchain_exists: Boolean
  index_in: [Int]
  type_lt: String
  frontStatus_nin: [String]
  sealPosition_in: [String]
  sealPosition: String
  foreverID_in: [String]
  seriesID_exists: Boolean
  type_in: [String]
  foreverStatus_lt: String
  lastSaleTime: Float
  frontStatus_in: [String]
  index_gte: Int
  hash_exists: Boolean
  manager_nin: [String]
  address_gte: String
  superType_ne: String
  type_ne: String
  address_exists: Boolean
  type_lte: String
  hash_lt: String
  lastSalePrice_lt: Float
  managerExpirationTime_lte: Float
  address_lt: String
  blockchain_lt: String
  creator_gte: String
  address_ne: String
  ownerObject: UserQueryInput
  foreverID: String
  superType: String
  creatorFees_ne: String
  lastSaleTime_lte: Float
  address_gt: String
  creatorObject: UserQueryInput
  managerExpirationTime_lt: Float
  manager_in: [String]
  collectionID_in: [String]
  isEndorsed_ne: Boolean
  creatorFees_gte: String
  seal_gte: String
  foreverStatus_in: [String]
  lastSaleTime_lt: Float
  collectionID_lt: String
  address_lte: String
  blockchain_nin: [String]
  manager_ne: String
  manager_lt: String
  creatorFees_exists: Boolean
  owner_in: [String]
  hash: String
  seal_nin: [String]
  AND: [TokenDeployedQueryInput!]
  collectionID_lte: String
  managerExpirationTime_exists: Boolean
  foreverStatus_nin: [String]
  managerExpirationTime_in: [Float]
  seal_in: [String]
  creator_lt: String
  sealPosition_gt: String
  owner_ne: String
  owner_lte: String
  sealPosition_nin: [String]
  seriesObject_exists: Boolean
  collectionID_ne: String
  foreverID_lte: String
  frontStatus_gt: String
  creatorFees_in: [String]
  type_exists: Boolean
  seal_exists: Boolean
  manager_gt: String
  managerExpirationTime_gte: Float
  creator: String
  index_nin: [Int]
  creatorObject_exists: Boolean
  foreverStatus_exists: Boolean
  creator_gt: String
  blockchain: String
  seal_lt: String
  lastSalePrice: Float
  collectionID_nin: [String]
  creator_ne: String
  foreverStatus_lte: String
  type_gte: String
  seal_gt: String
  superType_lte: String
  frontStatus: String
  lastSalePrice_gte: Float
  frontStatus_lt: String
  hash_lte: String
  owner_nin: [String]
  blockchain_lte: String
  frontStatus_gte: String
  collectionID_gte: String
  blockchain_gte: String
  collectionID_exists: Boolean
  lastSaleTime_gt: Float
  lastSalePrice_exists: Boolean
  blockchain_gt: String
  managerExpirationTime_gt: Float
  manager: String
  blockchain_ne: String
  creator_lte: String
  lastSalePrice_nin: [Float]
  foreverID_lt: String
  superType_gte: String
  foreverID_nin: [String]
  creator_nin: [String]
  hash_in: [String]
}

type TokenRawMedium {
  hash: String
  height: Int
  ipfsHash: String
  mimetype: String
  role: String
  subtitle: String
  weight: Int
  width: Int
}

enum Swift_codeSortByInput {
  ACTIONCAPTURE_DESC
  ACTORFIELD_DESC
  ADDITIONALINFO_ASC
  ADDITIONALINFO_DESC
  CODE_ASC
  _ID_ASC
  ACTIONCAPTURE_ASC
  ACTORFIELD_ASC
  CODE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  _ID_DESC
}

type TestTemporaryEndorsement {
  expiresAt: Float
  sealID: String
}

type Daily {
  _id: ObjectId
  blockchain: String
  createdAt: Float
  date: Float
  endorsementAverage: Float
  endorsementMax: Float
  endorsementMin: Float
  saleAverage: Float
  saleMax: Float
  saleMin: Float
  tokensCreated: Int
  tokensEndorsed: Int
  tokensSold: Int
  totalEndorsementsSum: Float
  totalSalesSum: Float
  totalSum: Float
  updatedAt: Float
}

input New_sessionInsertInput {
  _id: ObjectId
  token: String
  walletAddress: String
}

enum LikeSortByInput {
  SERIESID_DESC
  TOKENID_ASC
  TOKENID_DESC
  USERACCOUNTNUMBER_ASC
  USERACCOUNTNUMBER_DESC
  _ID_ASC
  _ID_DESC
  SERIESID_ASC
}

input AuctionDeployedUpdateInput {
  endTime_inc: Float
  showcaseFee: String
  tokenID_unset: Boolean
  bidStep_unset: Boolean
  finalBid_unset: Boolean
  status_unset: Boolean
  bids_unset: Boolean
  showcaseFee_unset: Boolean
  auctionAddress: String
  auctionAddress_unset: Boolean
  finalBid: String
  bids: [AuctionDeployedBidUpdateInput]
  startTime: Float
  endTime: Float
  startTime_unset: Boolean
  status: String
  tokenAddress_unset: Boolean
  tokenID: String
  startTime_inc: Float
  endTime_unset: Boolean
  startBid: String
  startBid_unset: Boolean
  superType_unset: Boolean
  bidStep: String
  tokenAddress: String
  superType: String
}

enum TriggerSortByInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  LASTDATE_ASC
  LASTDATE_DESC
}

input Contract_typeHashFieldLayerImageQueryInput {
  hash_gt: String
  mimetype: String
  mimetype_exists: Boolean
  rarityWeight_nin: [String]
  hash_ne: String
  weight_nin: [String]
  imageIndex_gt: String
  hash_nin: [String]
  imageIndex_nin: [String]
  rarityWeight_exists: Boolean
  hash_gte: String
  imageIndex_lte: String
  mimetype_nin: [String]
  rarityWeight_in: [String]
  imageIndex_in: [String]
  imageIndex_lt: String
  hash_in: [String]
  mimetype_gte: String
  mimetype_lte: String
  weight_lte: String
  weight_ne: String
  AND: [Contract_typeHashFieldLayerImageQueryInput!]
  imageIndex_gte: String
  mimetype_lt: String
  hash_lt: String
  imageIndex_ne: String
  hash_exists: Boolean
  weight_gt: String
  imageIndex_exists: Boolean
  rarityWeight_ne: String
  mimetype_gt: String
  rarityWeight_gte: String
  weight_in: [String]
  mimetype_in: [String]
  imageIndex: String
  weight: String
  weight_lt: String
  OR: [Contract_typeHashFieldLayerImageQueryInput!]
  rarityWeight_lte: String
  hash: String
  rarityWeight_gt: String
  hash_lte: String
  weight_gte: String
  rarityWeight: String
  rarityWeight_lt: String
  weight_exists: Boolean
  mimetype_ne: String
}

input SessionAccountNumberObjectRelationInput {
  create: UserInsertInput
  link: Int
}

input SeriesRawInsertInput {
  creator: String
  description: String
  media: [SeriesRawMediumInsertInput]
  numberOfEditions: Int
  type: String
  creatorFees: String
  hash: String
  title: String
  blockchain: String
  qualification: Int
  collectionID: String
  usersWhoShared: [Int]
  superType: String
}

input EndorsementRawQueryInput {
  expiresAt_gt: Float
  value_lte: String
  creator: String
  OR: [EndorsementRawQueryInput!]
  tokenID: String
  type: String
  masterID: String
  sealID_ne: String
  blockchain_nin: [String]
  creator_exists: Boolean
  creator_lt: String
  type_ne: String
  tokenID_nin: [String]
  masterID_gte: String
  cornerSE_exists: Boolean
  creator_in: [String]
  masterMediaType_lt: String
  expiresAt_exists: Boolean
  value_gte: String
  masterID_lt: String
  superType_lte: String
  masterMediaType_exists: Boolean
  creator_gt: String
  expiresAt_nin: [Float]
  cornerNE_exists: Boolean
  cornerNW: Boolean
  value_gt: String
  value_nin: [String]
  sealID_nin: [String]
  creator_ne: String
  value_ne: String
  cornerNW_ne: Boolean
  expiresAt_lte: Float
  superType_lt: String
  type_gt: String
  creator_gte: String
  superType_exists: Boolean
  AND: [EndorsementRawQueryInput!]
  type_gte: String
  masterID_exists: Boolean
  sealID_in: [String]
  masterMediaType_gte: String
  superType: String
  cornerSE: Boolean
  sealID: String
  masterMediaType: String
  superType_gte: String
  tokenID_lte: String
  tokenID_in: [String]
  expiresAt_ne: Float
  masterMediaType_lte: String
  blockchain_lt: String
  sealID_gt: String
  creator_nin: [String]
  sealID_lte: String
  type_exists: Boolean
  cornerNE_ne: Boolean
  blockchain_gte: String
  value_exists: Boolean
  blockchain: String
  masterID_ne: String
  type_nin: [String]
  masterMediaType_in: [String]
  masterMediaType_ne: String
  expiresAt_lt: Float
  value_lt: String
  masterID_lte: String
  superType_nin: [String]
  type_lt: String
  masterID_gt: String
  masterID_in: [String]
  value: String
  cornerNE: Boolean
  cornerSW: Boolean
  blockchain_lte: String
  sealID_lt: String
  type_lte: String
  tokenID_exists: Boolean
  value_in: [String]
  creator_lte: String
  sealID_exists: Boolean
  blockchain_exists: Boolean
  cornerNW_exists: Boolean
  blockchain_ne: String
  blockchain_in: [String]
  masterID_nin: [String]
  tokenID_ne: String
  superType_ne: String
  blockchain_gt: String
  masterMediaType_nin: [String]
  tokenID_gt: String
  cornerSE_ne: Boolean
  superType_in: [String]
  expiresAt_gte: Float
  type_in: [String]
  expiresAt: Float
  cornerSW_exists: Boolean
  tokenID_gte: String
  sealID_gte: String
  masterMediaType_gt: String
  superType_gt: String
  cornerSW_ne: Boolean
  tokenID_lt: String
  expiresAt_in: [Float]
}

enum BidSortByInput {
  _ID_ASC
  _ID_DESC
  BIDID_ASC
  BIDID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
}

input Ui_moduleQueryInput {
  page_ne: String
  page_lt: String
  updatedAt_exists: Boolean
  buttonType_ne: String
  airtableId_lt: String
  buttonLink_lt: String
  scope: String
  moduleID_gte: String
  autoFinish_exists: Boolean
  createdAt_ne: Float
  status_exists: Boolean
  comment_gt: String
  comment_lt: String
  name_in: [String]
  name_nin: [String]
  managementIDs_in: [String]
  autoFinish_gte: Float
  OR: [Ui_moduleQueryInput!]
  managementIDs_gte: String
  _id_lt: ObjectId
  mainLink_in: [String]
  airtableId_ne: String
  name_gt: String
  createdAt_lte: Float
  buttonLink_gt: String
  page_gte: String
  buttonType: String
  scope_exists: Boolean
  buttonAction_lte: String
  mainLink_lte: String
  page_gt: String
  createdAt: Float
  updatedAt_gte: Float
  buttonType_in: [String]
  itemType_lt: String
  createdAt_nin: [Float]
  mainLink_gt: String
  itemType_nin: [String]
  buttonLink_gte: String
  specialFeature_lte: String
  itemType_gt: String
  name_exists: Boolean
  specialFeature_nin: [String]
  name_lt: String
  buttonName_lt: String
  status_gt: String
  airtableId: String
  buttonName_ne: String
  page_nin: [String]
  moduleID_lt: String
  timerVisible: Boolean
  buttonLink_ne: String
  status: String
  buttonAction_lt: String
  autoFinish_ne: Float
  buttonAction_nin: [String]
  mainLink_gte: String
  autoStart_gte: Float
  mode: String
  timerVisible_exists: Boolean
  updatedAt_lt: Float
  status_lte: String
  createdAt_in: [Float]
  autoStart_exists: Boolean
  itemType_gte: String
  updatedAt_in: [Float]
  specialFeature_gte: String
  status_nin: [String]
  moduleID_gt: String
  name_ne: String
  timerVisible_ne: Boolean
  name: String
  managementIDs: String
  mainLink_lt: String
  updatedAt_ne: Float
  autoFinish_in: [Float]
  airtableId_gte: String
  specialFeature: String
  itemType: String
  autoStart_lt: Float
  buttonLink_in: [String]
  comment: String
  managementIDs_gt: String
  managementIDs_lt: String
  specialFeature_exists: Boolean
  buttonName_exists: Boolean
  mainLink_ne: String
  moduleID_exists: Boolean
  buttonName_gt: String
  status_gte: String
  moduleID_nin: [String]
  scope_nin: [String]
  mainLink: String
  autoStart_nin: [Float]
  managementIDs_nin: [String]
  scope_lt: String
  buttonName_in: [String]
  mode_ne: String
  page_in: [String]
  buttonName_nin: [String]
  autoStart: Float
  name_gte: String
  buttonAction: String
  buttonType_gte: String
  autoStart_in: [Float]
  buttonName_gte: String
  mainLink_exists: Boolean
  buttonAction_ne: String
  managementIDs_ne: String
  autoFinish: Float
  managementIDs_exists: Boolean
  buttonAction_exists: Boolean
  moduleID_lte: String
  specialFeature_ne: String
  page: String
  _id: ObjectId
  itemType_ne: String
  mode_exists: Boolean
  mode_lte: String
  mode_nin: [String]
  comment_ne: String
  _id_exists: Boolean
  scope_gte: String
  specialFeature_in: [String]
  specialFeature_gt: String
  mode_gt: String
  buttonAction_in: [String]
  buttonLink: String
  scope_gt: String
  autoStart_gt: Float
  moduleID: String
  mode_gte: String
  itemType_exists: Boolean
  autoFinish_gt: Float
  updatedAt_nin: [Float]
  comment_exists: Boolean
  mode_in: [String]
  name_lte: String
  scope_lte: String
  page_exists: Boolean
  scope_ne: String
  _id_in: [ObjectId]
  airtableId_exists: Boolean
  moduleID_ne: String
  createdAt_gte: Float
  buttonType_gt: String
  itemType_in: [String]
  buttonName_lte: String
  specialFeature_lt: String
  buttonAction_gt: String
  scope_in: [String]
  _id_gt: ObjectId
  updatedAt_gt: Float
  updatedAt_lte: Float
  status_lt: String
  createdAt_exists: Boolean
  createdAt_lt: Float
  AND: [Ui_moduleQueryInput!]
  managementIDs_lte: String
  buttonType_lt: String
  autoFinish_nin: [Float]
  airtableId_in: [String]
  airtableId_lte: String
  comment_gte: String
  _id_lte: ObjectId
  mainLink_nin: [String]
  autoFinish_lt: Float
  airtableId_nin: [String]
  airtableId_gt: String
  comment_nin: [String]
  _id_nin: [ObjectId]
  comment_in: [String]
  buttonLink_nin: [String]
  createdAt_gt: Float
  page_lte: String
  buttonLink_lte: String
  buttonAction_gte: String
  comment_lte: String
  autoStart_ne: Float
  updatedAt: Float
  buttonType_lte: String
  autoStart_lte: Float
  status_in: [String]
  buttonName: String
  buttonType_nin: [String]
  status_ne: String
  buttonLink_exists: Boolean
  _id_gte: ObjectId
  moduleID_in: [String]
  _id_ne: ObjectId
  autoFinish_lte: Float
  mode_lt: String
  itemType_lte: String
  buttonType_exists: Boolean
}

input NetworkQueryInput {
  name_gt: String
  type_nin: [String]
  AND: [NetworkQueryInput!]
  name_ne: String
  name_nin: [String]
  type_exists: Boolean
  integration_in: [String]
  type_gt: String
  type_lte: String
  name_gte: String
  integration_nin: [String]
  name_exists: Boolean
  _id_lte: ObjectId
  type_gte: String
  integration: String
  integration_ne: String
  type: String
  name: String
  name_lte: String
  integration_exists: Boolean
  _id_nin: [ObjectId]
  type_in: [String]
  name_in: [String]
  _id_in: [ObjectId]
  integration_gt: String
  name_lt: String
  type_ne: String
  type_lt: String
  integration_lt: String
  integration_gte: String
  OR: [NetworkQueryInput!]
  _id: ObjectId
  integration_lte: String
  _id_gte: ObjectId
  _id_exists: Boolean
  _id_lt: ObjectId
  _id_ne: ObjectId
  _id_gt: ObjectId
}

type Module {
  _id: ObjectId
  createdAt: Float
  module: String
  nameType: String
  page: String
  type: String
  updatedAt: Float
}

input CollectionInsertInput {
  qualification: Int
  tokensInCollection: Int
  updatedAt: Float
  collectionID: String
  creator: String
  deployed: CollectionDeployedInsertInput
  raw: CollectionRawInsertInput
  _id: ObjectId
  createdAt: Float
  media: [CollectionMediumInsertInput]
  title: String
  creatorAccountNumber: Int
  about: String
}

input EventUpdateInput {
  topics: [String]
  blockchain_unset: Boolean
  _id_unset: Boolean
  message_unset: Boolean
  _id: ObjectId
  updatedAt_unset: Boolean
  blockNumber: Long
  createdAt_unset: Boolean
  status: String
  status_unset: Boolean
  blockchain: String
  blockNumber_unset: Boolean
  message: EventMessageUpdateInput
  updatedAt_inc: Float
  createdAt: Float
  updatedAt: Float
  parameters_unset: Boolean
  topics_unset: Boolean
  parameters: EventParameterUpdateInput
  createdAt_inc: Float
}

input Ui_assetInsertInput {
  airtableId: String
  createdAt: Float
  _id: ObjectId
  assetSubtitle: String
  updatedAt: Float
  assetTitle: String
  textLanding: String
  assetID: String
  image: String
  imageLanding: String
  managementIDs: String
}

input TestInsertInput {
  _id: ObjectId
  crossEndorsement: TestCrossEndorsementInsertInput
  temporaryEndorsements: [TestTemporaryEndorsementInsertInput]
}

input CollectionDeployedInsertInput {
  hash: String
  privacy: String
  blockNumber: Long
  blockchain: String
  type: String
  superType: String
  supply: Int
  address: String
  creator: String
}

type EndorsementRaw {
  blockchain: String
  cornerNE: Boolean
  cornerNW: Boolean
  cornerSE: Boolean
  cornerSW: Boolean
  creator: String
  expiresAt: Float
  masterID: String
  masterMediaType: String
  sealID: String
  superType: String
  tokenID: String
  type: String
  value: String
}

input UserSettingInsertInput {
  defaultWallet: String
  language: String
  notifiedOfCookies: Boolean
}

input AuctionInsertInput {
  deployed: AuctionDeployedInsertInput
  raw: AuctionRawInsertInput
  updatedAt: Float
  _id: ObjectId
  auctionID: String
  createdAt: Float
}

input ActionInsertInput {
  _id: ObjectId
  actionAttributes: ActionActionAttributeInsertInput
  blockchain: String
  createdAt: Float
  message: ActionMessageInsertInput
  tokenAttributes: ActionTokenAttributeInsertInput
  updatedAt: Float
}

input TokenRawInsertInput {
  superType: String
  title: String
  collectionID: String
  height: String
  creator: String
  type: String
  numberOfEditions: Int
  width: String
  owner: String
  creatorFees: String
  media: [TokenRawMediumInsertInput]
  seriesID: String
  usersWhoShared: [Int]
  blockchain: String
  qualification: Int
  description: String
  hash: String
}

input Swift_messageParameterUpdateInput {
  showcaseFees_unset: Boolean
  bidCreator: String
  bidCreator_unset: Boolean
  endTime_unset: Boolean
  id_unset: Boolean
  askValue: String
  newOwner_unset: Boolean
  seriesId: String
  startTime_unset: Boolean
  showcaseFees: String
  tokenAddress: String
  stepBid: String
  askValue_unset: Boolean
  startTime: String
  tokenAddress_unset: Boolean
  buyer: String
  newManager: String
  auctionCreator_unset: Boolean
  startBid: String
  finalBidValue: String
  askCreator: String
  newOwner: String
  bidValue: String
  expirationTime: String
  stepBid_unset: Boolean
  endTime: String
  expirationTime_unset: Boolean
  bidValue_unset: Boolean
  finalBidValue_unset: Boolean
  startBid_unset: Boolean
  seriesId_unset: Boolean
  newManager_unset: Boolean
  buyer_unset: Boolean
  askCreator_unset: Boolean
  auctionCreator: String
  id: String
}

input EndorsementQueryInput {
  updatedAt_lte: Float
  endorsementID_exists: Boolean
  endorsementID_ne: String
  createdAt: Float
  endorsementID_in: [String]
  raw_exists: Boolean
  createdAt_gte: Float
  deployed_exists: Boolean
  _id_gte: ObjectId
  createdAt_nin: [Float]
  updatedAt: Float
  endorsementID: String
  _id: ObjectId
  _id_gt: ObjectId
  raw: EndorsementRawQueryInput
  _id_exists: Boolean
  createdAt_lt: Float
  endorsementID_gte: String
  updatedAt_lt: Float
  _id_nin: [ObjectId]
  endorsementID_nin: [String]
  endorsementID_gt: String
  endorsementID_lt: String
  _id_in: [ObjectId]
  updatedAt_exists: Boolean
  updatedAt_in: [Float]
  _id_lt: ObjectId
  createdAt_lte: Float
  updatedAt_gte: Float
  _id_lte: ObjectId
  createdAt_ne: Float
  createdAt_exists: Boolean
  deployed: EndorsementDeployedQueryInput
  AND: [EndorsementQueryInput!]
  updatedAt_ne: Float
  createdAt_gt: Float
  updatedAt_gt: Float
  updatedAt_nin: [Float]
  OR: [EndorsementQueryInput!]
  _id_ne: ObjectId
  endorsementID_lte: String
  createdAt_in: [Float]
}

type TokenDeployedStamp {
  tokenID: String
}

input IntegrationUpdateInput {
  code_unset: Boolean
  name: String
  subType_unset: Boolean
  type: String
  _id_unset: Boolean
  blockchain: String
  subType: String
  name_unset: Boolean
  _id: ObjectId
  status_unset: Boolean
  blockchain_unset: Boolean
  code: String
  status: String
  type_unset: Boolean
}

type Commission {
  _id: ObjectId
  blockchain: String
  commissionId: String
  description: String
  type: String
  value: String
  valueBNB: String
}

type ActionTokenAttribute {
  collectionCreator: String
  collectionID: String
  creatorFees: String
  hash: String
  manager: String
  maximum: Int
  newOwner: String
  oldOwner: String
  owner: String
  ownerPublicKey: String
  seriesCreator: String
  seriesID: Series
  supply: Int
  tokenCreator: String
  tokenID: String
}

input SeriesRawMediumInsertInput {
  hash: String
  ipfsHash: String
  role: String
  height: Int
  mimetype: String
  subtitle: String
  weight: Int
  width: Int
}

input SeriesRawUpdateInput {
  creatorFees_unset: Boolean
  collectionID_unset: Boolean
  description_unset: Boolean
  blockchain: String
  usersWhoShared: [Int]
  numberOfEditions_inc: Int
  creator_unset: Boolean
  hash: String
  blockchain_unset: Boolean
  qualification_inc: Int
  type: String
  media_unset: Boolean
  numberOfEditions_unset: Boolean
  title_unset: Boolean
  title: String
  media: [SeriesRawMediumUpdateInput]
  collectionID: String
  description: String
  superType: String
  hash_unset: Boolean
  qualification_unset: Boolean
  creatorFees: String
  numberOfEditions: Int
  qualification: Int
  superType_unset: Boolean
  usersWhoShared_unset: Boolean
  type_unset: Boolean
  creator: String
}

input PaginationUser {
  limit: Float
  skip: Float
}

input AskDeployedInsertInput {
  tokenAddress: String
  values: [AskDeployedValueInsertInput]
  endTime: Float
  status: String
  showcaseFee: String
  askAddress: String
  askCreator: String
  currentAskValue: String
  blockchain: String
  superType: String
  tokenID: String
}

input Col1LayerUpdateInput {
  images_unset: Boolean
  layer: String
  layer_unset: Boolean
  points: [Col1LayerPointUpdateInput]
  points_unset: Boolean
  images: [Col1LayerImageUpdateInput]
}

input Ui_managementAssetIDRelationInput {
  create: Ui_assetInsertInput
  link: String
}

input ActionColInsertInput {
  _id: ObjectId
  actionAttributes: ActionColActionAttributeInsertInput
  message: ActionColMessageInsertInput
  tokenAttributes: ActionColTokenAttributeInsertInput
}

type Ui_module {
  _id: ObjectId
  airtableId: String
  autoFinish: Float
  autoStart: Float
  buttonAction: String
  buttonLink: String
  buttonName: String
  buttonType: String
  comment: String
  createdAt: Float
  itemType: String
  mainLink: String
  managementIDs: String
  mode: String
  moduleID: String
  name: String
  page: String
  scope: String
  specialFeature: String
  status: String
  timerVisible: Boolean
  updatedAt: Float
}

input Contract_typeQueryInput {
  frontendName_ne: String
  parameters_exists: Boolean
  objectType_lt: String
  status_exists: Boolean
  numberOfLevels_gt: String
  status_lte: String
  numberOfLevels_ne: String
  frontendName_nin: [String]
  numberOfLevels_lte: String
  longType_nin: [String]
  OR: [Contract_typeQueryInput!]
  abi: Contract_typeAbiQueryInput
  frontendName_gt: String
  longType: String
  status_nin: [String]
  numberOfLevels_in: [String]
  longType_exists: Boolean
  objectType_lte: String
  status_gte: String
  longType_lte: String
  objectType_exists: Boolean
  frontendName_lt: String
  frontendName: String
  objectType_in: [String]
  numberOfLevels_exists: Boolean
  status_ne: String
  status_gt: String
  parameters: Contract_typeParameterQueryInput
  numberOfLevels_nin: [String]
  _id: ObjectId
  objectType_ne: String
  frontendName_exists: Boolean
  numberOfLevels: String
  _id_lt: ObjectId
  AND: [Contract_typeQueryInput!]
  objectType_gte: String
  hashFields: Contract_typeHashFieldQueryInput
  collectionDeployAvailable_exists: Boolean
  numberOfLevels_lt: String
  applicableBlockchains: [String]
  collectionDeployAvailable: Boolean
  _id_gt: ObjectId
  _id_in: [ObjectId]
  frontendName_in: [String]
  longType_lt: String
  _id_exists: Boolean
  objectType_nin: [String]
  _id_gte: ObjectId
  longType_gte: String
  _id_lte: ObjectId
  _id_nin: [ObjectId]
  status_in: [String]
  applicableBlockchains_in: [String]
  objectType: String
  status: String
  frontendName_lte: String
  hashFields_exists: Boolean
  applicableBlockchains_nin: [String]
  longType_gt: String
  _id_ne: ObjectId
  numberOfLevels_gte: String
  frontendName_gte: String
  longType_in: [String]
  collectionDeployAvailable_ne: Boolean
  applicableBlockchains_exists: Boolean
  abi_exists: Boolean
  longType_ne: String
  status_lt: String
  objectType_gt: String
}

enum BlockchainSortByInput {
  NAME_DESC
  _ID_ASC
  _ID_DESC
  CONTRACTSREPO_ASC
  CONTRACTSREPO_DESC
  NAME_ASC
}

input Swift_messageQueryInput {
  createdAt_exists: Boolean
  hash_ne: String
  status_in: [String]
  updatedAt_nin: [Float]
  createdAt_in: [Float]
  updatedAt_exists: Boolean
  _id_exists: Boolean
  OR: [Swift_messageQueryInput!]
  parameters: Swift_messageParameterQueryInput
  _id_gt: ObjectId
  updatedAt: Float
  _id_nin: [ObjectId]
  updatedAt_ne: Float
  createdAt_nin: [Float]
  status_lt: String
  parameters_exists: Boolean
  hash_gte: String
  createdAt: Float
  _id_ne: ObjectId
  status_ne: String
  createdAt_lt: Float
  _id_gte: ObjectId
  hash_gt: String
  hash_lt: String
  createdAt_gt: Float
  status_exists: Boolean
  hash_in: [String]
  status: String
  updatedAt_gte: Float
  _id_in: [ObjectId]
  hash_exists: Boolean
  message_exists: Boolean
  _id: ObjectId
  updatedAt_in: [Float]
  _id_lt: ObjectId
  hash_nin: [String]
  status_nin: [String]
  status_gte: String
  message: Swift_messageMessageQueryInput
  AND: [Swift_messageQueryInput!]
  _id_lte: ObjectId
  updatedAt_lte: Float
  createdAt_lte: Float
  createdAt_ne: Float
  updatedAt_lt: Float
  updatedAt_gt: Float
  status_lte: String
  status_gt: String
  createdAt_gte: Float
  hash: String
  hash_lte: String
}

input Swift_messageParameterQueryInput {
  showcaseFees_exists: Boolean
  finalBidValue_lt: String
  id_lte: String
  newOwner_nin: [String]
  newOwner_ne: String
  stepBid: String
  showcaseFees_lt: String
  id_lt: String
  buyer_exists: Boolean
  bidCreator: String
  startTime_exists: Boolean
  newOwner_gte: String
  expirationTime_gte: String
  AND: [Swift_messageParameterQueryInput!]
  id_exists: Boolean
  tokenAddress: String
  tokenAddress_ne: String
  seriesId_gte: String
  bidValue_nin: [String]
  seriesId_ne: String
  newManager_gt: String
  stepBid_in: [String]
  startBid_nin: [String]
  startTime_lte: String
  auctionCreator_gt: String
  tokenAddress_gte: String
  newOwner: String
  stepBid_nin: [String]
  newOwner_in: [String]
  startBid_exists: Boolean
  tokenAddress_gt: String
  askCreator_gte: String
  showcaseFees_gte: String
  endTime_exists: Boolean
  finalBidValue: String
  askValue_nin: [String]
  OR: [Swift_messageParameterQueryInput!]
  bidCreator_in: [String]
  finalBidValue_lte: String
  expirationTime_ne: String
  bidValue_lt: String
  showcaseFees_ne: String
  stepBid_gt: String
  startTime_ne: String
  askCreator_exists: Boolean
  auctionCreator_in: [String]
  askCreator: String
  startBid_gt: String
  askValue_lt: String
  buyer_gte: String
  stepBid_exists: Boolean
  finalBidValue_ne: String
  expirationTime_nin: [String]
  bidCreator_exists: Boolean
  endTime_gte: String
  newManager: String
  askValue_lte: String
  newManager_ne: String
  bidValue: String
  bidValue_gte: String
  finalBidValue_gt: String
  seriesId_exists: Boolean
  askValue_in: [String]
  buyer: String
  id_in: [String]
  bidCreator_nin: [String]
  startBid_in: [String]
  id_gt: String
  askCreator_gt: String
  newOwner_gt: String
  startTime_gt: String
  endTime_in: [String]
  newManager_lt: String
  buyer_ne: String
  auctionCreator: String
  bidValue_ne: String
  endTime: String
  finalBidValue_exists: Boolean
  stepBid_lt: String
  expirationTime_gt: String
  bidValue_lte: String
  startTime_lt: String
  endTime_lte: String
  newOwner_lte: String
  buyer_lt: String
  askValue: String
  bidCreator_lte: String
  showcaseFees_nin: [String]
  tokenAddress_lte: String
  startTime: String
  id_gte: String
  askValue_gte: String
  showcaseFees_lte: String
  tokenAddress_exists: Boolean
  bidValue_exists: Boolean
  askValue_exists: Boolean
  seriesId_lt: String
  expirationTime: String
  newManager_in: [String]
  startBid: String
  newOwner_lt: String
  askCreator_ne: String
  seriesId_gt: String
  auctionCreator_exists: Boolean
  seriesId: String
  bidValue_gt: String
  startTime_gte: String
  seriesId_lte: String
  newManager_exists: Boolean
  auctionCreator_gte: String
  buyer_nin: [String]
  startBid_gte: String
  auctionCreator_lte: String
  bidValue_in: [String]
  startBid_lte: String
  tokenAddress_lt: String
  finalBidValue_nin: [String]
  bidCreator_lt: String
  showcaseFees: String
  buyer_gt: String
  auctionCreator_lt: String
  endTime_nin: [String]
  startTime_in: [String]
  newOwner_exists: Boolean
  auctionCreator_nin: [String]
  buyer_in: [String]
  expirationTime_lt: String
  stepBid_lte: String
  bidCreator_gt: String
  askCreator_lt: String
  endTime_gt: String
  expirationTime_exists: Boolean
  auctionCreator_ne: String
  endTime_lt: String
  showcaseFees_in: [String]
  id_ne: String
  startTime_nin: [String]
  endTime_ne: String
  tokenAddress_nin: [String]
  startBid_ne: String
  buyer_lte: String
  expirationTime_in: [String]
  showcaseFees_gt: String
  newManager_gte: String
  newManager_nin: [String]
  askCreator_nin: [String]
  bidCreator_gte: String
  askCreator_lte: String
  askValue_ne: String
  id_nin: [String]
  newManager_lte: String
  expirationTime_lte: String
  seriesId_nin: [String]
  askCreator_in: [String]
  finalBidValue_in: [String]
  id: String
  stepBid_gte: String
  startBid_lt: String
  bidCreator_ne: String
  finalBidValue_gte: String
  stepBid_ne: String
  tokenAddress_in: [String]
  seriesId_in: [String]
  askValue_gt: String
}

type Endorsement {
  _id: ObjectId
  createdAt: Float
  deployed: EndorsementDeployed
  endorsementID: String
  raw: EndorsementRaw
  updatedAt: Float
}

type BlockchainNetworkMain {
  browser: String
  endpoint: String
}

input AuctionDeployedBidQueryInput {
  bidCreator_ne: String
  bidCreator_exists: Boolean
  bidValue_lte: String
  bidCreator: String
  AND: [AuctionDeployedBidQueryInput!]
  bidStatus_in: [String]
  bidValue_in: [String]
  bidStatus_exists: Boolean
  OR: [AuctionDeployedBidQueryInput!]
  bidValue_ne: String
  bidCreator_in: [String]
  bidStatus_lte: String
  bidValue_gt: String
  bidValue_nin: [String]
  bidValue_exists: Boolean
  bidCreator_nin: [String]
  bidCreator_gte: String
  bidCreator_lt: String
  bidValue: String
  bidCreator_lte: String
  bidStatus_nin: [String]
  bidStatus_lt: String
  bidStatus_ne: String
  bidStatus_gte: String
  bidStatus_gt: String
  bidStatus: String
  bidValue_gte: String
  bidValue_lt: String
  bidCreator_gt: String
}

enum IpfSortByInput {
  MEDIAHASH_ASC
  MEDIAHASH_DESC
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  IPFSHASH_ASC
  IPFSHASH_DESC
}

type BidDeployed {
  bidAddress: String
  bidCreator: String
  bidValue: String
  endTime: Float
  status: String
  superType: String
  tokenAddress: String
  tokenID: String
}

enum TokenColSortByInput {
  MERGED_DESC
  ADDRESS_DESC
  TOKENID_ASC
  OWNER_ASC
  SERIESID_ASC
  MERGED_ASC
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  ADDRESS_ASC
  SERIESID_DESC
  TOKENID_DESC
  OWNER_DESC
  _ID_ASC
  _ID_DESC
}

input UserSettingUpdateInput {
  language_unset: Boolean
  notifiedOfCookies: Boolean
  notifiedOfCookies_unset: Boolean
  defaultWallet: String
  defaultWallet_unset: Boolean
  language: String
}

input SubscriptionUpdateInput {
  abiFileUrl: String
  blockchain: String
  status_unset: Boolean
  _id_unset: Boolean
  abiFileUrl_unset: Boolean
  address: String
  superType_unset: Boolean
  _id: ObjectId
  blockchain_unset: Boolean
  address_unset: Boolean
  status: String
  lastBlockRead: Long
  superType: String
  lastBlockRead_unset: Boolean
}

input EndorsementUpdateInput {
  endorsementID_unset: Boolean
  updatedAt_unset: Boolean
  createdAt_unset: Boolean
  endorsementID: String
  _id_unset: Boolean
  deployed_unset: Boolean
  updatedAt_inc: Float
  raw_unset: Boolean
  createdAt_inc: Float
  raw: EndorsementRawUpdateInput
  updatedAt: Float
  createdAt: Float
  _id: ObjectId
  deployed: EndorsementDeployedUpdateInput
}

input EventParameterUpdateInput {
  tokenNftId_unset: Boolean
  price_inc: Float
  sealNftId_unset: Boolean
  price: Float
  expiresAt_unset: Boolean
  tokenAddress: String
  tokenAddress_unset: Boolean
  sealPossibleCorners: Int
  sealPossibleCorners_inc: Int
  tokenNftId_inc: Int
  sealPossibleCorners_unset: Boolean
  sealAddress: String
  sealNftId_inc: Int
  masterNftId_inc: Int
  tokenNftId: Int
  masterAddress_unset: Boolean
  expiresAt: Float
  expiresAt_inc: Float
  masterNftId_unset: Boolean
  price_unset: Boolean
  sealAddress_unset: Boolean
  masterAddress: String
  sealNftId: Int
  masterNftId: Int
}

enum EventSortByInput {
  BLOCKNUMBER_ASC
  BLOCKNUMBER_DESC
  BLOCKCHAIN_ASC
  BLOCKCHAIN_DESC
  UPDATEDAT_ASC
  _ID_ASC
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_DESC
  STATUS_ASC
  STATUS_DESC
  _ID_DESC
}

input EventMessageQueryInput {
  time_lte: Float
  parsingTime_lte: Float
  senderAddress_lt: String
  time_exists: Boolean
  txHash_lte: String
  time_gt: Float
  txHash: String
  superType: String
  eventName: String
  superType_in: [String]
  txHash_nin: [String]
  eventName_lt: String
  eventName_exists: Boolean
  superType_gt: String
  senderAddress_lte: String
  eventName_lte: String
  senderAddress_gt: String
  superType_gte: String
  parsingTime_lt: Float
  parsingTime: Float
  senderAddress_exists: Boolean
  parsingTime_in: [Float]
  superType_exists: Boolean
  eventName_in: [String]
  parsingTime_gte: Float
  time_ne: Float
  parsingTime_ne: Float
  time_nin: [Float]
  time_lt: Float
  time_in: [Float]
  superType_lte: String
  AND: [EventMessageQueryInput!]
  superType_nin: [String]
  senderAddress_ne: String
  txHash_gt: String
  eventName_gte: String
  txHash_in: [String]
  eventName_nin: [String]
  parsingTime_nin: [Float]
  senderAddress_in: [String]
  txHash_lt: String
  eventName_gt: String
  senderAddress_gte: String
  txHash_ne: String
  superType_lt: String
  senderAddress: String
  superType_ne: String
  time_gte: Float
  eventName_ne: String
  txHash_exists: Boolean
  parsingTime_exists: Boolean
  txHash_gte: String
  OR: [EventMessageQueryInput!]
  parsingTime_gt: Float
  senderAddress_nin: [String]
  time: Float
}

type Ui_asset {
  _id: ObjectId
  airtableId: String
  assetID: String
  assetSubtitle: String
  assetTitle: String
  createdAt: Float
  image: String
  imageLanding: String
  managementIDs: String
  textLanding: String
  updatedAt: Float
}

input TokenDeployedUpdateInput {
  foreverID: String
  seal_unset: Boolean
  ownerObject_unset: Boolean
  lastSaleTime: Float
  creatorFees: String
  manager_unset: Boolean
  creator: String
  manager: String
  lastSalePrice_inc: Float
  address_unset: Boolean
  type_unset: Boolean
  creator_unset: Boolean
  lastSaleTime_unset: Boolean
  sealPosition: String
  foreverStatus: String
  type: String
  seriesObject: TokenDeployedSeriesObjectRelationInput
  foreverStatus_unset: Boolean
  superType_unset: Boolean
  frontStatus_unset: Boolean
  frontStatus: String
  isEndorsed: Boolean
  blockchain_unset: Boolean
  seriesID: TokenDeployedSeriesIDRelationInput
  foreverID_unset: Boolean
  hash: String
  managerExpirationTime: Float
  address: String
  seriesObject_unset: Boolean
  owner: String
  sealPosition_unset: Boolean
  creatorObject_unset: Boolean
  owner_unset: Boolean
  creatorFees_unset: Boolean
  managerExpirationTime_unset: Boolean
  seriesID_unset: Boolean
  index_unset: Boolean
  stamps: [TokenDeployedStampUpdateInput]
  blockchain: String
  lastSaleTime_inc: Float
  isEndorsed_unset: Boolean
  superType: String
  collectionID: String
  index: Int
  index_inc: Int
  creatorObject: TokenDeployedCreatorObjectRelationInput
  managerExpirationTime_inc: Float
  stamps_unset: Boolean
  ownerObject: TokenDeployedOwnerObjectRelationInput
  seal: String
  lastSalePrice: Float
  hash_unset: Boolean
  collectionID_unset: Boolean
  lastSalePrice_unset: Boolean
}

input TokenColQueryInput {
  images_in: [TokenColImageQueryInput]
  merged_gte: String
  _id: ObjectId
  address_gt: String
  merged_ne: String
  _id_in: [ObjectId]
  owner_gte: String
  owner_lte: String
  seriesId_exists: Boolean
  owner_lt: String
  tokenId_ne: String
  tokenId_nin: [String]
  createdAt_nin: [Float]
  address_in: [String]
  updatedAt_nin: [Float]
  seriesId_gte: String
  updatedAt_lte: Float
  address_nin: [String]
  seriesId_ne: String
  seriesId_gt: String
  OR: [TokenColQueryInput!]
  _id_gte: ObjectId
  createdAt_lt: Float
  _id_ne: ObjectId
  tokenId_exists: Boolean
  tokenId_lt: String
  _id_exists: Boolean
  createdAt_in: [Float]
  tokenId_gte: String
  merged_in: [String]
  updatedAt_gt: Float
  tokenId_lte: String
  owner_nin: [String]
  merged_nin: [String]
  address_exists: Boolean
  _id_nin: [ObjectId]
  createdAt_ne: Float
  merged_exists: Boolean
  createdAt_gte: Float
  seriesId_lte: String
  _id_lte: ObjectId
  seriesId_lt: String
  updatedAt_ne: Float
  seriesId_in: [String]
  updatedAt_exists: Boolean
  images_nin: [TokenColImageQueryInput]
  images: [TokenColImageQueryInput]
  _id_lt: ObjectId
  address: String
  seriesId: String
  createdAt: Float
  createdAt_lte: Float
  address_ne: String
  owner: String
  owner_exists: Boolean
  updatedAt_in: [Float]
  updatedAt_lt: Float
  images_exists: Boolean
  merged_lte: String
  _id_gt: ObjectId
  owner_gt: String
  merged: String
  address_lt: String
  tokenId_in: [String]
  merged_gt: String
  owner_in: [String]
  merged_lt: String
  createdAt_gt: Float
  updatedAt: Float
  owner_ne: String
  seriesId_nin: [String]
  tokenId_gt: String
  tokenId: String
  address_lte: String
  AND: [TokenColQueryInput!]
  createdAt_exists: Boolean
  address_gte: String
  updatedAt_gte: Float
}

type Address_abi {
  _id: ObjectId
  address: String
  level: String
  superType: String
}

input PaginationLocale {
  skip: Float
  limit: Float
}

input SessionQueryInput {
  swiftMessageTime_nin: [Float]
  swiftMessageTime_in: [Float]
  updatedAt_exists: Boolean
  address_exists: Boolean
  confirmationHash_gt: String
  integrationCode_nin: [String]
  accountNumberObject: UserQueryInput
  updatedAt_lt: Float
  _id_lte: ObjectId
  address: String
  updatedAt: Float
  address_ne: String
  confirmationHash_lt: String
  cookiesHash_nin: [String]
  cookiesHash_gte: String
  createdAt_nin: [Float]
  address_lt: String
  cookiesHash_lte: String
  integrationCode_ne: String
  createdAt_exists: Boolean
  cookiesHash_exists: Boolean
  confirmationHash_nin: [String]
  accountNumberObject_exists: Boolean
  _id_lt: ObjectId
  cookiesHash_lt: String
  _id_in: [ObjectId]
  confirmationHash_ne: String
  createdAt_gt: Float
  confirmationHash: String
  address_in: [String]
  isExpired: Boolean
  swiftMessageTime_ne: Float
  createdAt: Float
  _id_ne: ObjectId
  _id_gte: ObjectId
  confirmationHash_lte: String
  confirmationHash_gte: String
  createdAt_in: [Float]
  swiftMessageTime_gte: Float
  cookiesHash_gt: String
  swiftMessageTime_gt: Float
  swiftMessageTime_lt: Float
  address_gte: String
  cookiesHash: String
  isExpired_exists: Boolean
  createdAt_ne: Float
  createdAt_lt: Float
  confirmationHash_in: [String]
  cookiesHash_ne: String
  updatedAt_gte: Float
  AND: [SessionQueryInput!]
  swiftMessageTime_lte: Float
  address_lte: String
  createdAt_lte: Float
  isExpired_ne: Boolean
  _id_exists: Boolean
  updatedAt_nin: [Float]
  swiftMessageTime_exists: Boolean
  createdAt_gte: Float
  integrationCode: String
  swiftMessageTime: Float
  updatedAt_ne: Float
  cookiesHash_in: [String]
  confirmationHash_exists: Boolean
  integrationCode_gt: String
  updatedAt_gt: Float
  updatedAt_lte: Float
  address_gt: String
  integrationCode_lt: String
  _id_gt: ObjectId
  OR: [SessionQueryInput!]
  _id_nin: [ObjectId]
  integrationCode_gte: String
  address_nin: [String]
  _id: ObjectId
  integrationCode_in: [String]
  integrationCode_exists: Boolean
  integrationCode_lte: String
  updatedAt_in: [Float]
}

type Swift_code {
  _id: ObjectId
  actionCapture: String
  actorField: String
  additionalInfo: String
  applicableBlockchains: [String]
  applicableContractType: [String]
  code: String
  description: String
}

input Contract_typeInsertInput {
  collectionDeployAvailable: Boolean
  frontendName: String
  longType: String
  objectType: String
  abi: Contract_typeAbiInsertInput
  applicableBlockchains: [String]
  parameters: Contract_typeParameterInsertInput
  _id: ObjectId
  numberOfLevels: String
  status: String
  hashFields: Contract_typeHashFieldInsertInput
}

input PaginationUiModule {
  skip: Float
  limit: Float
}

input UserIntegrationUpdateInput {
  priority: Int
  priority_unset: Boolean
  priority_inc: Int
  shadowAddresses: [String]
  shadowAddresses_unset: Boolean
  name: String
  name_unset: Boolean
}

input LikeUpdateInput {
  tokenID: String
  tokenID_unset: Boolean
  userAccountNumber_inc: Int
  status: Boolean
  status_unset: Boolean
  seriesID_unset: Boolean
  userAccountNumber_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  userAccountNumber: Int
  seriesID: String
}

input Contract_typeHashFieldMediumInsertInput {
  hash: String
  height: String
  mimetype: String
  role: String
  subtitle: String
  weight: String
  width: String
}

type Swift_messageParameter {
  askCreator: String
  askValue: String
  auctionCreator: String
  bidCreator: String
  bidValue: String
  buyer: String
  endTime: String
  expirationTime: String
  finalBidValue: String
  id: String
  newManager: String
  newOwner: String
  seriesId: String
  showcaseFees: String
  startBid: String
  startTime: String
  stepBid: String
  tokenAddress: String
}

input SessionInsertInput {
  accountNumberObject: SessionAccountNumberObjectRelationInput
  _id: ObjectId
  address: String
  confirmationHash: String
  cookiesHash: String
  swiftMessageTime: Float
  updatedAt: Float
  createdAt: Float
  integrationCode: String
  isExpired: Boolean
}

input BlockchainInsertInput {
  _id: ObjectId
  contractsRepo: String
  name: String
  network: BlockchainNetworkInsertInput
}

input Contract_typeParameterUpdateInput {
  hashLevel: String
  hashLevel_unset: Boolean
  likesLevel: String
  likesLevel_unset: Boolean
  sharesLevel: String
  sharesLevel_unset: Boolean
}

input PaginationUiAsset {
  skip: Float
  limit: Float
}

input TokenQueryInput {
  updatedAt_in: [Float]
  createdAt: Float
  tokenID_exists: Boolean
  updatedAt_gt: Float
  deployed_exists: Boolean
  updatedAt_ne: Float
  _id_lte: ObjectId
  tokenID: String
  createdAt_gte: Float
  updatedAt_nin: [Float]
  _id_gt: ObjectId
  _id_gte: ObjectId
  createdAt_exists: Boolean
  createdAt_lt: Float
  tokenID_ne: String
  tokenID_gt: String
  _id: ObjectId
  raw_exists: Boolean
  deployed: TokenDeployedQueryInput
  _id_nin: [ObjectId]
  AND: [TokenQueryInput!]
  tokenID_lt: String
  updatedAt_lte: Float
  createdAt_nin: [Float]
  updatedAt: Float
  updatedAt_gte: Float
  _id_exists: Boolean
  _id_ne: ObjectId
  tokenID_gte: String
  createdAt_lte: Float
  createdAt_ne: Float
  createdAt_gt: Float
  updatedAt_lt: Float
  tokenID_nin: [String]
  updatedAt_exists: Boolean
  _id_in: [ObjectId]
  tokenID_in: [String]
  tokenID_lte: String
  raw: TokenRawQueryInput
  OR: [TokenQueryInput!]
  createdAt_in: [Float]
  _id_lt: ObjectId
}

input TriggerInsertInput {
  _id: ObjectId
  name: String
  lastDate: Float
}

input EventMessageUpdateInput {
  txHash: String
  senderAddress: String
  txHash_unset: Boolean
  senderAddress_unset: Boolean
  superType_unset: Boolean
  eventName: String
  parsingTime_inc: Float
  superType: String
  time: Float
  parsingTime_unset: Boolean
  eventName_unset: Boolean
  time_inc: Float
  time_unset: Boolean
  parsingTime: Float
}

input Col1LayerPointQueryInput {
  hash_nin: [String]
  point_nin: [Float]
  hash_gte: String
  point_lte: Float
  hash_ne: String
  point_gte: Float
  AND: [Col1LayerPointQueryInput!]
  point_exists: Boolean
  point_ne: Float
  hash_lt: String
  hash: String
  point_gt: Float
  hash_lte: String
  hash_gt: String
  point_lt: Float
  point_in: [Float]
  OR: [Col1LayerPointQueryInput!]
  hash_in: [String]
  hash_exists: Boolean
  point: Float
}

type Network {
  _id: ObjectId
  integration: String
  name: String
  type: String
}

type ActionMessage {
  actionCode: Swift_code
  hash: String
  resolution: String
  senderAddress: String
  senderID: String
  superType: String
  time: Float
}

type Trigger {
  _id: ObjectId
  lastDate: Float
  name: String
}

input ActionMessageActionCodeRelationInput {
  create: Swift_codeInsertInput
  link: String
}

type Query {
  action(query: ActionQueryInput): Action
  actionCol(query: ActionColQueryInput): ActionCol
  actionCols(query: ActionColQueryInput, limit: Int = 100, sortBy: ActionColSortByInput): [ActionCol]!
  actionCount: Int
  actions(limit: Int = 100, sortBy: ActionSortByInput, query: ActionQueryInput): [Action]!
  address_abi(query: Address_abiQueryInput): Address_abi
  address_abis(query: Address_abiQueryInput, limit: Int = 100, sortBy: Address_abiSortByInput): [Address_abi]!
  ask(query: AskQueryInput): Ask
  asks(query: AskQueryInput, limit: Int = 100, sortBy: AskSortByInput): [Ask]!
  auction(query: AuctionQueryInput): Auction
  auctions(query: AuctionQueryInput, limit: Int = 100, sortBy: AuctionSortByInput): [Auction]!
  bid(query: BidQueryInput): Bid
  bids(query: BidQueryInput, limit: Int = 100, sortBy: BidSortByInput): [Bid]!
  blockchain(query: BlockchainQueryInput): Blockchain
  blockchains(query: BlockchainQueryInput, limit: Int = 100, sortBy: BlockchainSortByInput): [Blockchain]!
  col1(query: Col1QueryInput): Col1
  col1s(query: Col1QueryInput, limit: Int = 100, sortBy: Col1SortByInput): [Col1]!
  collection(query: CollectionQueryInput): Collection
  collectionCount(input: CollectionCount): Int
  collections(query: CollectionQueryInput, limit: Int = 100, sortBy: CollectionSortByInput): [Collection]!
  commission(query: CommissionQueryInput): Commission
  commissions(query: CommissionQueryInput, limit: Int = 100, sortBy: CommissionSortByInput): [Commission]!
  contract(query: ContractQueryInput): Contract
  contract_type(query: Contract_typeQueryInput): Contract_type
  contract_types(query: Contract_typeQueryInput, limit: Int = 100, sortBy: Contract_typeSortByInput): [Contract_type]!
  contracts(query: ContractQueryInput, limit: Int = 100, sortBy: ContractSortByInput): [Contract]!
  dailies(query: DailyQueryInput, limit: Int = 100, sortBy: DailySortByInput): [Daily]!
  daily(query: DailyQueryInput): Daily
  distinctTokensProps(input: TokensDistinct): [String]
  endorsement(query: EndorsementQueryInput): Endorsement
  endorsements(query: EndorsementQueryInput, limit: Int = 100, sortBy: EndorsementSortByInput): [Endorsement]!
  event(query: EventQueryInput): Event
  events(sortBy: EventSortByInput, query: EventQueryInput, limit: Int = 100): [Event]!
  format(query: FormatQueryInput): Format
  formats(limit: Int = 100, sortBy: FormatSortByInput, query: FormatQueryInput): [Format]!
  getSession(input: GetSession): Session
  getSessions(input: GetSessionsIn): [Session]
  hourlies(query: HourlyQueryInput, limit: Int = 100, sortBy: HourlySortByInput): [Hourly]!
  hourly(query: HourlyQueryInput): Hourly
  integration(query: IntegrationQueryInput): Integration
  integrations(query: IntegrationQueryInput, limit: Int = 100, sortBy: IntegrationSortByInput): [Integration]!
  ipf(query: IpfQueryInput): Ipf
  ipfs(query: IpfQueryInput, limit: Int = 100, sortBy: IpfSortByInput): [Ipf]!
  like(query: LikeQueryInput): Like
  likes(query: LikeQueryInput, limit: Int = 100, sortBy: LikeSortByInput): [Like]!
  locale(query: LocaleQueryInput): Locale
  locales(query: LocaleQueryInput, limit: Int = 100, sortBy: LocaleSortByInput): [Locale]!
  module(query: ModuleQueryInput): Module
  modules(query: ModuleQueryInput, limit: Int = 100, sortBy: ModuleSortByInput): [Module]!
  network(query: NetworkQueryInput): Network
  networks(sortBy: NetworkSortByInput, query: NetworkQueryInput, limit: Int = 100): [Network]!
  new_session(query: New_sessionQueryInput): New_session
  new_sessions(query: New_sessionQueryInput, limit: Int = 100, sortBy: New_sessionSortByInput): [New_session]!
  opendata(query: OpendatumQueryInput, limit: Int = 100, sortBy: OpendatumSortByInput): [Opendatum]!
  opendatum(query: OpendatumQueryInput): Opendatum
  paginationAction(input: PaginationAction): [Action]
  paginationCollection(input: PaginationCollection): [Collection]
  paginationLocale(input: PaginationLocale): [Locale]
  paginationModule(input: PaginationModule): [Module]
  paginationUiAsset(input: PaginationUiAsset): [Ui_asset]
  paginationUiChart(input: PaginationUiChart): [Ui_chart]
  paginationUiManagement(input: PaginationUiManagement): [Ui_management]
  paginationUiModule(input: PaginationUiModule): [Ui_module]
  paginationUser(input: PaginationUser): [User]
  primary_json(query: Primary_jsonQueryInput): Primary_json
  primary_jsons(sortBy: Primary_jsonSortByInput, query: Primary_jsonQueryInput, limit: Int = 100): [Primary_json]!
  royalties(query: RoyaltyQueryInput, limit: Int = 100, sortBy: RoyaltySortByInput): [Royalty]!
  royalty(query: RoyaltyQueryInput): Royalty
  series(query: SeriesQueryInput): Series
  seriesCount(input: SeriesCount): Int
  seriesPagination(input: SeriesPagination): [Series]
  seriess(query: SeriesQueryInput, limit: Int = 100, sortBy: SeriesSortByInput): [Series]!
  session(query: SessionQueryInput): Session
  sessions(query: SessionQueryInput, limit: Int = 100, sortBy: SessionSortByInput): [Session]!
  subscription(query: SubscriptionQueryInput): Subscription
  subscriptions(query: SubscriptionQueryInput, limit: Int = 100, sortBy: SubscriptionSortByInput): [Subscription]!
  swift_code(query: Swift_codeQueryInput): Swift_code
  swift_codes(query: Swift_codeQueryInput, limit: Int = 100, sortBy: Swift_codeSortByInput): [Swift_code]!
  swift_message(query: Swift_messageQueryInput): Swift_message
  swift_messages(query: Swift_messageQueryInput, limit: Int = 100, sortBy: Swift_messageSortByInput): [Swift_message]!
  test(query: TestQueryInput): Test
  tests(limit: Int = 100, sortBy: TestSortByInput, query: TestQueryInput): [Test]!
  token(query: TokenQueryInput): Token
  tokenCol(query: TokenColQueryInput): TokenCol
  tokenCols(query: TokenColQueryInput, limit: Int = 100, sortBy: TokenColSortByInput): [TokenCol]!
  tokenCount(input: TokenCount): Int
  tokenPagination(input: TokenPagination): [Token]
  tokens(query: TokenQueryInput, limit: Int = 100, sortBy: TokenSortByInput): [Token]!
  trigger(query: TriggerQueryInput): Trigger
  triggers(query: TriggerQueryInput, limit: Int = 100, sortBy: TriggerSortByInput): [Trigger]!
  ui_asset(query: Ui_assetQueryInput): Ui_asset
  ui_assets(query: Ui_assetQueryInput, limit: Int = 100, sortBy: Ui_assetSortByInput): [Ui_asset]!
  ui_chart(query: Ui_chartQueryInput): Ui_chart
  ui_charts(query: Ui_chartQueryInput, limit: Int = 100, sortBy: Ui_chartSortByInput): [Ui_chart]!
  ui_management(query: Ui_managementQueryInput): Ui_management
  ui_managements(query: Ui_managementQueryInput, limit: Int = 100, sortBy: Ui_managementSortByInput): [Ui_management]!
  ui_module(query: Ui_moduleQueryInput): Ui_module
  ui_modules(query: Ui_moduleQueryInput, limit: Int = 100, sortBy: Ui_moduleSortByInput): [Ui_module]!
  user(query: UserQueryInput): User
  users(query: UserQueryInput, limit: Int = 100, sortBy: UserSortByInput): [User]!
}

enum ModuleSortByInput {
  PAGE_DESC
  UPDATEDAT_ASC
  PAGE_ASC
  NAMETYPE_ASC
  CREATEDAT_DESC
  MODULE_ASC
  MODULE_DESC
  NAMETYPE_DESC
  TYPE_ASC
  _ID_ASC
  TYPE_DESC
  CREATEDAT_ASC
  UPDATEDAT_DESC
  _ID_DESC
}

input UserSettingQueryInput {
  language: String
  language_gt: String
  language_lte: String
  notifiedOfCookies_exists: Boolean
  notifiedOfCookies_ne: Boolean
  defaultWallet_lt: String
  defaultWallet: String
  language_exists: Boolean
  defaultWallet_exists: Boolean
  notifiedOfCookies: Boolean
  defaultWallet_nin: [String]
  OR: [UserSettingQueryInput!]
  AND: [UserSettingQueryInput!]
  language_ne: String
  language_nin: [String]
  language_in: [String]
  defaultWallet_gt: String
  defaultWallet_in: [String]
  language_gte: String
  language_lt: String
  defaultWallet_ne: String
  defaultWallet_gte: String
  defaultWallet_lte: String
}

input Primary_jsonUpdateInput {
  createdAt_inc: Float
  createdAt_unset: Boolean
  hash_unset: Boolean
  _id: ObjectId
  hash: String
  _id_unset: Boolean
  createdAt: Float
  jsonString: String
  jsonString_unset: Boolean
}

input UserMergedAccountInsertInput {
  status: String
  accountNumber: Int
}

input SeriesInsertInput {
  updatedAt: Float
  _id: ObjectId
  createdAt: Float
  deployed: SeriesDeployedInsertInput
  raw: SeriesRawInsertInput
  seriesID: String
}

input EndorsementDeployedQueryInput {
  blockchain: String
  corner_in: [String]
  masterMediaType: String
  masterMediaType_gt: String
  corner_gt: String
  type_in: [String]
  superType_in: [String]
  masterID_gt: String
  masterID_gte: String
  type_lte: String
  creator_exists: Boolean
  requestedCorners_nin: [Int]
  value_nin: [String]
  tokenID_exists: Boolean
  superType_gte: String
  tokenID_gt: String
  sealID_exists: Boolean
  tokenID_in: [String]
  superType_exists: Boolean
  expiresAt_exists: Boolean
  expiresAt: Float
  creator: String
  requestedCorners_lte: Int
  status_gte: String
  sealID_ne: String
  value_in: [String]
  creator_in: [String]
  value: String
  masterID_exists: Boolean
  masterMediaType_in: [String]
  blockchain_lte: String
  corner_exists: Boolean
  superType_lte: String
  superType_nin: [String]
  superType: String
  masterID_ne: String
  type: String
  tokenID: String
  tokenID_lte: String
  corner_nin: [String]
  tokenID_lt: String
  AND: [EndorsementDeployedQueryInput!]
  sealID_gt: String
  value_lt: String
  status_nin: [String]
  creator_lte: String
  masterMediaType_lte: String
  superType_ne: String
  corner_lte: String
  masterID_lt: String
  requestedCorners: Int
  tokenID_ne: String
  sealID_gte: String
  blockchain_ne: String
  blockchain_in: [String]
  sealID_lte: String
  OR: [EndorsementDeployedQueryInput!]
  expiresAt_in: [Float]
  requestedCorners_ne: Int
  requestedCorners_in: [Int]
  creator_nin: [String]
  sealID: String
  corner: String
  masterID_in: [String]
  type_gte: String
  requestedCorners_gte: Int
  value_gte: String
  masterMediaType_ne: String
  status: String
  status_gt: String
  type_ne: String
  blockchain_lt: String
  corner_lt: String
  expiresAt_ne: Float
  blockchain_gt: String
  sealID_nin: [String]
  type_nin: [String]
  tokenID_gte: String
  corner_ne: String
  type_exists: Boolean
  corner_gte: String
  creator_lt: String
  masterID_nin: [String]
  masterID: String
  creator_gte: String
  expiresAt_gt: Float
  status_lt: String
  sealID_lt: String
  value_gt: String
  blockchain_nin: [String]
  blockchain_exists: Boolean
  requestedCorners_gt: Int
  type_gt: String
  creator_gt: String
  value_exists: Boolean
  masterMediaType_gte: String
  creator_ne: String
  masterMediaType_exists: Boolean
  expiresAt_lt: Float
  superType_gt: String
  sealID_in: [String]
  masterID_lte: String
  status_in: [String]
  tokenID_nin: [String]
  requestedCorners_lt: Int
  value_ne: String
  expiresAt_gte: Float
  value_lte: String
  superType_lt: String
  status_exists: Boolean
  status_ne: String
  expiresAt_lte: Float
  blockchain_gte: String
  type_lt: String
  masterMediaType_nin: [String]
  status_lte: String
  masterMediaType_lt: String
  requestedCorners_exists: Boolean
  expiresAt_nin: [Float]
}

input GetSessionsIn {
  confirmationHash: String
  cookiesHash: [String]
  swiftMessageTime: Float
}

type Contract_type {
  _id: ObjectId
  abi: Contract_typeAbi
  applicableBlockchains: [String]
  collectionDeployAvailable: Boolean
  frontendName: String
  hashFields: Contract_typeHashField
  longType: String
  numberOfLevels: String
  objectType: String
  parameters: Contract_typeParameter
  status: String
}

type BlockchainNetwork {
  main: BlockchainNetworkMain
  test: BlockchainNetworkTest
}

type BlockchainNetworkTest {
  browser: String
  endpoint: String
}

input SeriesCount {
  creator: String
  created_lt: Float
}

input TokenDeployedStampInsertInput {
  tokenID: String
}

scalar ObjectId

input ContractQueryInput {
  status_in: [String]
  abiFile_nin: [String]
  longType_lt: String
  longType_in: [String]
  superType_gte: String
  abiPath_in: [String]
  address: String
  _id_lt: ObjectId
  AND: [ContractQueryInput!]
  status_lt: String
  network_lte: String
  network_exists: Boolean
  privacy_lt: String
  privacy_lte: String
  longType: String
  environment_lte: String
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
  abiFile_ne: String
  privacy_ne: String
  longType_exists: Boolean
  abiFile_lt: String
  _id: ObjectId
  longType_gt: String
  _id_gte: ObjectId
  status_gte: String
  environment_nin: [String]
  abiFile_exists: Boolean
  status_gt: String
  status_nin: [String]
  privacy_in: [String]
  privacy_gte: String
  blockchain_nin: [String]
  abiFile: String
  network_gt: String
  superType: String
  abiPath_lt: String
  address_nin: [String]
  address_lt: String
  _id_gt: ObjectId
  privacy: String
  longType_lte: String
  privacy_exists: Boolean
  environment_gt: String
  abiFile_gte: String
  status: String
  abiPath_lte: String
  longType_nin: [String]
  network: String
  network_nin: [String]
  address_ne: String
  superType_ne: String
  blockchain_gte: String
  abiFile_in: [String]
  superType_lt: String
  address_lte: String
  status_exists: Boolean
  superType_nin: [String]
  abiPath_gt: String
  blockchain_gt: String
  privacy_gt: String
  abiFile_lte: String
  abiPath_ne: String
  address_gte: String
  network_in: [String]
  network_lt: String
  superType_in: [String]
  network_ne: String
  abiPath: String
  _id_exists: Boolean
  blockchain: String
  longType_ne: String
  abiFile_gt: String
  abiPath_gte: String
  address_exists: Boolean
  status_ne: String
  blockchain_in: [String]
  privacy_nin: [String]
  superType_gt: String
  abiPath_nin: [String]
  address_in: [String]
  environment_in: [String]
  abiPath_exists: Boolean
  network_gte: String
  environment_exists: Boolean
  OR: [ContractQueryInput!]
  superType_exists: Boolean
  environment_ne: String
  superType_lte: String
  address_gt: String
  environment_gte: String
  blockchain_lt: String
  blockchain_lte: String
  _id_ne: ObjectId
  status_lte: String
  blockchain_ne: String
  blockchain_exists: Boolean
  environment_lt: String
  longType_gte: String
  _id_lte: ObjectId
  environment: String
}

input EventQueryInput {
  blockNumber_in: [Long]
  message_exists: Boolean
  status_ne: String
  blockchain_gte: String
  updatedAt: Float
  updatedAt_in: [Float]
  blockchain_lte: String
  blockchain_ne: String
  _id_in: [ObjectId]
  status_lt: String
  AND: [EventQueryInput!]
  blockNumber_lte: Long
  blockchain_gt: String
  blockchain: String
  status_gt: String
  updatedAt_lte: Float
  createdAt_nin: [Float]
  message: EventMessageQueryInput
  _id_ne: ObjectId
  blockchain_in: [String]
  blockNumber_nin: [Long]
  _id_gte: ObjectId
  blockchain_exists: Boolean
  blockNumber_lt: Long
  _id_lt: ObjectId
  parameters: EventParameterQueryInput
  status_in: [String]
  _id_lte: ObjectId
  _id_gt: ObjectId
  blockNumber_ne: Long
  _id_nin: [ObjectId]
  updatedAt_nin: [Float]
  OR: [EventQueryInput!]
  createdAt_lte: Float
  createdAt_in: [Float]
  status_nin: [String]
  topics: [String]
  updatedAt_ne: Float
  updatedAt_exists: Boolean
  createdAt_gte: Float
  topics_in: [String]
  blockchain_lt: String
  blockchain_nin: [String]
  topics_nin: [String]
  createdAt_ne: Float
  parameters_exists: Boolean
  status_gte: String
  updatedAt_gt: Float
  createdAt: Float
  topics_exists: Boolean
  status_lte: String
  blockNumber_exists: Boolean
  status_exists: Boolean
  blockNumber_gt: Long
  createdAt_exists: Boolean
  createdAt_gt: Float
  updatedAt_lt: Float
  _id_exists: Boolean
  blockNumber: Long
  status: String
  createdAt_lt: Float
  blockNumber_gte: Long
  updatedAt_gte: Float
  _id: ObjectId
}

input EndorsementDeployedInsertInput {
  creator: String
  masterID: String
  blockchain: String
  requestedCorners: Int
  expiresAt: Float
  sealID: String
  superType: String
  corner: String
  status: String
  tokenID: String
  masterMediaType: String
  type: String
  value: String
}

input ActionTokenAttributeQueryInput {
  hash_in: [String]
  maximum_lt: Int
  owner_gte: String
  tokenCreator_nin: [String]
  seriesCreator_exists: Boolean
  collectionCreator_nin: [String]
  newOwner_gt: String
  collectionCreator_in: [String]
  newOwner_in: [String]
  ownerPublicKey_lt: String
  tokenCreator_ne: String
  supply_gt: Int
  supply_gte: Int
  newOwner_ne: String
  oldOwner_exists: Boolean
  manager_nin: [String]
  ownerPublicKey_ne: String
  collectionID_gt: String
  collectionID_exists: Boolean
  collectionCreator_gte: String
  supply_in: [Int]
  collectionCreator: String
  creatorFees: String
  creatorFees_gt: String
  oldOwner_lte: String
  supply_lt: Int
  newOwner_exists: Boolean
  supply_ne: Int
  tokenID_exists: Boolean
  collectionCreator_gt: String
  collectionID_lt: String
  seriesCreator_nin: [String]
  oldOwner_lt: String
  ownerPublicKey_lte: String
  tokenCreator_lt: String
  hash: String
  hash_nin: [String]
  tokenCreator: String
  owner_in: [String]
  newOwner_gte: String
  maximum_exists: Boolean
  creatorFees_gte: String
  manager_exists: Boolean
  owner_gt: String
  hash_ne: String
  supply_exists: Boolean
  manager: String
  OR: [ActionTokenAttributeQueryInput!]
  seriesCreator_gt: String
  newOwner_lt: String
  ownerPublicKey_nin: [String]
  collectionCreator_lte: String
  maximum: Int
  owner_lte: String
  maximum_ne: Int
  tokenID_lt: String
  tokenCreator_gte: String
  supply: Int
  manager_in: [String]
  newOwner_lte: String
  AND: [ActionTokenAttributeQueryInput!]
  seriesCreator_in: [String]
  ownerPublicKey_gt: String
  seriesCreator: String
  ownerPublicKey_in: [String]
  seriesCreator_ne: String
  creatorFees_lt: String
  supply_lte: Int
  manager_ne: String
  collectionID: String
  hash_gt: String
  owner_ne: String
  seriesID: SeriesQueryInput
  tokenID_nin: [String]
  owner: String
  tokenID_gte: String
  creatorFees_ne: String
  oldOwner_ne: String
  tokenCreator_in: [String]
  owner_exists: Boolean
  supply_nin: [Int]
  creatorFees_lte: String
  oldOwner_in: [String]
  collectionID_lte: String
  owner_lt: String
  ownerPublicKey_exists: Boolean
  maximum_in: [Int]
  collectionID_ne: String
  seriesID_exists: Boolean
  oldOwner_gt: String
  collectionCreator_lt: String
  tokenCreator_exists: Boolean
  tokenCreator_gt: String
  creatorFees_in: [String]
  newOwner: String
  tokenID_lte: String
  hash_lt: String
  manager_gt: String
  collectionID_in: [String]
  manager_gte: String
  creatorFees_exists: Boolean
  maximum_gt: Int
  maximum_nin: [Int]
  tokenID_gt: String
  seriesCreator_lt: String
  creatorFees_nin: [String]
  oldOwner: String
  tokenID_ne: String
  collectionCreator_ne: String
  collectionID_nin: [String]
  tokenCreator_lte: String
  ownerPublicKey: String
  collectionCreator_exists: Boolean
  collectionID_gte: String
  seriesCreator_gte: String
  oldOwner_gte: String
  manager_lt: String
  newOwner_nin: [String]
  hash_lte: String
  owner_nin: [String]
  tokenID: String
  hash_exists: Boolean
  tokenID_in: [String]
  maximum_lte: Int
  hash_gte: String
  seriesCreator_lte: String
  ownerPublicKey_gte: String
  oldOwner_nin: [String]
  maximum_gte: Int
  manager_lte: String
}

input OpendatumPermissionUpdateInput {
  root: String
  root_unset: Boolean
  functions: [String]
  functions_unset: Boolean
}

input RoyaltyUpdateInput {
  _id: ObjectId
  upperValue: Float
  count: Int
  lowerValue_inc: Float
  percentage: Float
  lowerValue_unset: Boolean
  count_inc: Int
  count_unset: Boolean
  lowerValue: Float
  _id_unset: Boolean
  upperValue_inc: Float
  percentage_inc: Float
  upperValue_unset: Boolean
  percentage_unset: Boolean
}

input ActionMessageInsertInput {
  hash: String
  superType: String
  time: Float
  actionCode: ActionMessageActionCodeRelationInput
  resolution: String
  senderAddress: String
  senderID: String
}

input EndorsementInsertInput {
  updatedAt: Float
  _id: ObjectId
  createdAt: Float
  deployed: EndorsementDeployedInsertInput
  endorsementID: String
  raw: EndorsementRawInsertInput
}

type TokenColImage {
  hash: String
  height: Int
  mimetype: String
  rarity: Int
  subtitle: String
  weight: Int
  width: Int
}

type UserIntegration {
  name: String
  priority: Int
  shadowAddresses: [String]
}

type UserSetting {
  defaultWallet: String
  language: String
  notifiedOfCookies: Boolean
}

input IpfInsertInput {
  _id: ObjectId
  createdAt: Float
  ipfsHash: String
  mediaHash: String
}

input BidRawUpdateInput {
  endTime_unset: Boolean
  superType_unset: Boolean
  bidCreator: String
  superType: String
  tokenAddress_unset: Boolean
  bidValue_unset: Boolean
  endTime_inc: Float
  bidValue: String
  endTime: Float
  tokenAddress: String
  tokenID_unset: Boolean
  tokenID: String
  bidCreator_unset: Boolean
}

enum CommissionSortByInput {
  _ID_ASC
  _ID_DESC
  COMMISSIONID_ASC
  COMMISSIONID_DESC
  VALUE_DESC
  BLOCKCHAIN_DESC
  TYPE_DESC
  VALUEBNB_DESC
  VALUEBNB_ASC
  BLOCKCHAIN_ASC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ASC
  VALUE_ASC
}

type ActionActionAttribute {
  actionCapture: String
  actionStatus: String
  askCreator: String
  askEndTime: Float
  askValue: String
  auctionCreator: String
  auctionEndTime: Float
  auctionStartTime: Float
  bidCreator: String
  bidEndTime: Float
  bidStep: String
  bidValue: String
  endorsementCreator: String
  finalBidValue: String
  managerExpirationTime: Float
  managerSuperType: String
  minimalBid: String
  releasedBidOwner: String
  releasedBidValue: String
  sealCreator: String
  showcaseFee: String
  submittedBidOwner: String
  submittedBidValue: String
  usdValue: Float
}

input FormatInsertInput {
  _id: ObjectId
  formatName: String
  height: Int
  width: Int
}

type TokenRaw {
  blockchain: String
  collectionID: String
  creator: String
  creatorFees: String
  description: String
  hash: String
  height: String
  media: [TokenRawMedium]
  numberOfEditions: Int
  owner: String
  qualification: Int
  seriesID: String
  superType: String
  title: String
  type: String
  usersWhoShared: [Int]
  width: String
}

input BlockchainUpdateInput {
  _id_unset: Boolean
  contractsRepo: String
  contractsRepo_unset: Boolean
  name: String
  name_unset: Boolean
  network: BlockchainNetworkUpdateInput
  network_unset: Boolean
  _id: ObjectId
}

type AuctionRaw {
  auctionCreator: String
  bidStep: String
  bids: [AuctionRawBid]
  endTime: Float
  showcaseFee: String
  startBid: String
  startTime: Float
  superType: String
  tokenAddress: String
  tokenID: String
}

input ActionActionAttributeQueryInput {
  bidStep_exists: Boolean
  auctionCreator_gte: String
  askValue_gte: String
  bidStep: String
  askEndTime_gte: Float
  showcaseFee_in: [String]
  auctionEndTime_ne: Float
  submittedBidValue_in: [String]
  releasedBidOwner_exists: Boolean
  bidEndTime_nin: [Float]
  askEndTime_ne: Float
  releasedBidValue_nin: [String]
  auctionCreator_lte: String
  submittedBidOwner_ne: String
  auctionStartTime_gte: Float
  askEndTime_gt: Float
  sealCreator_exists: Boolean
  submittedBidOwner_gte: String
  actionCapture_in: [String]
  auctionCreator: String
  auctionStartTime_nin: [Float]
  finalBidValue_ne: String
  bidValue: String
  showcaseFee_exists: Boolean
  askEndTime: Float
  auctionEndTime_nin: [Float]
  bidEndTime_exists: Boolean
  releasedBidValue_in: [String]
  managerExpirationTime_lt: Float
  submittedBidOwner: String
  releasedBidOwner_in: [String]
  submittedBidValue_lt: String
  askValue_ne: String
  actionCapture_lte: String
  showcaseFee_gte: String
  managerExpirationTime_gte: Float
  usdValue_exists: Boolean
  actionStatus_nin: [String]
  releasedBidValue_exists: Boolean
  bidEndTime_gt: Float
  sealCreator_lt: String
  endorsementCreator_lt: String
  releasedBidOwner_nin: [String]
  finalBidValue: String
  askEndTime_in: [Float]
  auctionEndTime_exists: Boolean
  actionStatus_ne: String
  askEndTime_lte: Float
  askCreator_gte: String
  submittedBidOwner_gt: String
  askCreator_exists: Boolean
  actionStatus_lte: String
  releasedBidOwner_lt: String
  managerExpirationTime_exists: Boolean
  submittedBidValue_exists: Boolean
  auctionCreator_nin: [String]
  askEndTime_exists: Boolean
  bidCreator_nin: [String]
  showcaseFee_lt: String
  auctionEndTime_gt: Float
  releasedBidOwner_ne: String
  actionCapture_gte: String
  bidCreator_lte: String
  auctionStartTime_lte: Float
  bidValue_lt: String
  bidCreator_gte: String
  endorsementCreator_nin: [String]
  auctionCreator_gt: String
  bidEndTime_gte: Float
  showcaseFee_lte: String
  finalBidValue_gte: String
  askCreator: String
  askValue_gt: String
  releasedBidValue_gte: String
  askValue_lt: String
  bidEndTime_in: [Float]
  managerSuperType: String
  managerExpirationTime_in: [Float]
  submittedBidOwner_exists: Boolean
  minimalBid: String
  finalBidValue_nin: [String]
  bidValue_gt: String
  auctionCreator_ne: String
  bidValue_exists: Boolean
  auctionEndTime_lte: Float
  actionCapture: String
  finalBidValue_in: [String]
  endorsementCreator: String
  bidCreator_gt: String
  releasedBidValue_lte: String
  sealCreator_nin: [String]
  auctionEndTime_in: [Float]
  managerSuperType_ne: String
  usdValue_gt: Float
  actionCapture_nin: [String]
  releasedBidValue_lt: String
  finalBidValue_gt: String
  endorsementCreator_lte: String
  bidValue_lte: String
  showcaseFee: String
  finalBidValue_lte: String
  actionStatus_gte: String
  bidValue_nin: [String]
  usdValue_lte: Float
  askCreator_lt: String
  finalBidValue_exists: Boolean
  releasedBidOwner_lte: String
  minimalBid_lte: String
  managerSuperType_exists: Boolean
  sealCreator_gt: String
  sealCreator: String
  sealCreator_in: [String]
  auctionStartTime_ne: Float
  auctionStartTime_exists: Boolean
  managerSuperType_gt: String
  minimalBid_ne: String
  finalBidValue_lt: String
  bidEndTime_lt: Float
  bidStep_ne: String
  bidStep_nin: [String]
  bidCreator_in: [String]
  usdValue_gte: Float
  bidStep_lt: String
  bidStep_gte: String
  releasedBidValue_gt: String
  submittedBidValue_nin: [String]
  managerSuperType_lte: String
  managerExpirationTime: Float
  managerExpirationTime_nin: [Float]
  actionCapture_gt: String
  endorsementCreator_exists: Boolean
  auctionEndTime_gte: Float
  bidCreator: String
  releasedBidOwner: String
  endorsementCreator_in: [String]
  submittedBidOwner_in: [String]
  managerExpirationTime_ne: Float
  askValue_in: [String]
  bidEndTime: Float
  sealCreator_ne: String
  auctionCreator_in: [String]
  usdValue_ne: Float
  showcaseFee_nin: [String]
  askValue_lte: String
  minimalBid_exists: Boolean
  releasedBidValue: String
  actionCapture_lt: String
  askCreator_nin: [String]
  usdValue_in: [Float]
  actionCapture_ne: String
  bidCreator_ne: String
  bidStep_in: [String]
  bidCreator_exists: Boolean
  askEndTime_lt: Float
  sealCreator_gte: String
  minimalBid_in: [String]
  releasedBidValue_ne: String
  usdValue: Float
  submittedBidValue_lte: String
  AND: [ActionActionAttributeQueryInput!]
  bidCreator_lt: String
  auctionStartTime_in: [Float]
  endorsementCreator_gte: String
  OR: [ActionActionAttributeQueryInput!]
  submittedBidValue_gte: String
  bidEndTime_ne: Float
  minimalBid_lt: String
  managerExpirationTime_lte: Float
  actionCapture_exists: Boolean
  managerSuperType_gte: String
  bidStep_gt: String
  releasedBidOwner_gte: String
  askValue_exists: Boolean
  showcaseFee_ne: String
  auctionCreator_exists: Boolean
  auctionCreator_lt: String
  minimalBid_nin: [String]
  askValue: String
  bidValue_gte: String
  askCreator_lte: String
  endorsementCreator_gt: String
  managerSuperType_nin: [String]
  bidValue_in: [String]
  usdValue_lt: Float
  askCreator_ne: String
  managerSuperType_lt: String
  sealCreator_lte: String
  actionStatus_in: [String]
  actionStatus: String
  usdValue_nin: [Float]
  auctionEndTime_lt: Float
  auctionStartTime_gt: Float
  auctionEndTime: Float
  askValue_nin: [String]
  submittedBidValue: String
  actionStatus_lt: String
  bidStep_lte: String
  askCreator_in: [String]
  managerExpirationTime_gt: Float
  askEndTime_nin: [Float]
  submittedBidOwner_lt: String
  bidEndTime_lte: Float
  releasedBidOwner_gt: String
  auctionStartTime_lt: Float
  showcaseFee_gt: String
  minimalBid_gte: String
  submittedBidOwner_nin: [String]
  minimalBid_gt: String
  bidValue_ne: String
  submittedBidValue_gt: String
  endorsementCreator_ne: String
  askCreator_gt: String
  submittedBidValue_ne: String
  actionStatus_exists: Boolean
  managerSuperType_in: [String]
  auctionStartTime: Float
  actionStatus_gt: String
  submittedBidOwner_lte: String
}

input Swift_messageInsertInput {
  parameters: Swift_messageParameterInsertInput
  status: String
  _id: ObjectId
  createdAt: Float
  updatedAt: Float
  hash: String
  message: Swift_messageMessageInsertInput
}

input Contract_typeHashFieldInsertInput {
  title: String
  type: String
  collectionID: String
  creatorFee: String
  height: String
  description: String
  layers: Contract_typeHashFieldLayerInsertInput
  minimalMintFee: String
  media: Contract_typeHashFieldMediumInsertInput
  numberOfEditions: String
  creator: String
  width: String
}

input TokenColImageInsertInput {
  hash: String
  height: Int
  mimetype: String
  rarity: Int
  subtitle: String
  weight: Int
  width: Int
}

type Col1LayerImage {
  hash: String
  height: Int
  mimetype: String
  rarity: Int
  subtitle: String
  weight: Int
  width: Int
}

input Contract_typeAbiQueryInput {
  trx_gte: String
  token_ne: String
  root_exists: Boolean
  root_lte: String
  series_lt: String
  root_nin: [String]
  token_nin: [String]
  series_lte: String
  series_in: [String]
  trx_nin: [String]
  token: String
  root: String
  token_exists: Boolean
  trx_lte: String
  trx_ne: String
  series_gte: String
  token_lte: String
  root_ne: String
  token_gte: String
  token_lt: String
  OR: [Contract_typeAbiQueryInput!]
  trx_exists: Boolean
  series: String
  token_gt: String
  trx_lt: String
  trx: String
  series_exists: Boolean
  root_gt: String
  AND: [Contract_typeAbiQueryInput!]
  series_gt: String
  trx_in: [String]
  root_gte: String
  series_ne: String
  series_nin: [String]
  trx_gt: String
  root_lt: String
  root_in: [String]
  token_in: [String]
}

type AuctionDeployedBid {
  bidCreator: String
  bidStatus: String
  bidValue: String
}

input SubscriptionQueryInput {
  abiFileUrl_lt: String
  lastBlockRead_gte: Long
  status_in: [String]
  _id_ne: ObjectId
  lastBlockRead_lt: Long
  lastBlockRead_in: [Long]
  address_lt: String
  superType_nin: [String]
  status_nin: [String]
  lastBlockRead_ne: Long
  status_gte: String
  abiFileUrl_ne: String
  abiFileUrl_in: [String]
  AND: [SubscriptionQueryInput!]
  lastBlockRead: Long
  lastBlockRead_nin: [Long]
  superType_lt: String
  status_exists: Boolean
  address: String
  address_nin: [String]
  blockchain_lt: String
  _id_lt: ObjectId
  superType_in: [String]
  abiFileUrl_nin: [String]
  _id_in: [ObjectId]
  status_lte: String
  superType_lte: String
  _id_lte: ObjectId
  status_lt: String
  address_gt: String
  abiFileUrl: String
  address_ne: String
  lastBlockRead_exists: Boolean
  blockchain_nin: [String]
  blockchain: String
  _id_exists: Boolean
  _id_gte: ObjectId
  superType_gt: String
  blockchain_gte: String
  abiFileUrl_exists: Boolean
  address_lte: String
  superType_exists: Boolean
  blockchain_in: [String]
  _id: ObjectId
  OR: [SubscriptionQueryInput!]
  status_gt: String
  _id_nin: [ObjectId]
  _id_gt: ObjectId
  address_gte: String
  abiFileUrl_gte: String
  blockchain_gt: String
  blockchain_exists: Boolean
  address_in: [String]
  status: String
  abiFileUrl_gt: String
  status_ne: String
  abiFileUrl_lte: String
  blockchain_lte: String
  superType_gte: String
  superType_ne: String
  superType: String
  blockchain_ne: String
  lastBlockRead_gt: Long
  lastBlockRead_lte: Long
  address_exists: Boolean
}

enum HourlySortByInput {
  USD_DESC
  EVERTOUSD_ASC
  BNBTOUSD_ASC
  BNBTOUSD_DESC
  _ID_ASC
  TIME_ASC
  BLOCKCHAIN_ASC
  USD_ASC
  TIME_DESC
  _ID_DESC
  BLOCKCHAIN_DESC
  EVERTOUSD_DESC
}

input ActionColMessageUpdateInput {
  time_inc: Float
  time: Float
  actionCode_unset: Boolean
  senderAddress: String
  superType_unset: Boolean
  senderAddress_unset: Boolean
  senderID_unset: Boolean
  hash: String
  hash_unset: Boolean
  senderID: String
  superType: String
  actionCode: String
  time_unset: Boolean
}

input TestTemporaryEndorsementQueryInput {
  sealID: String
  sealID_exists: Boolean
  expiresAt_in: [Float]
  sealID_in: [String]
  expiresAt_nin: [Float]
  expiresAt_lt: Float
  expiresAt_ne: Float
  AND: [TestTemporaryEndorsementQueryInput!]
  sealID_nin: [String]
  sealID_lte: String
  sealID_gte: String
  expiresAt_exists: Boolean
  OR: [TestTemporaryEndorsementQueryInput!]
  sealID_ne: String
  expiresAt_gte: Float
  sealID_lt: String
  expiresAt_gt: Float
  expiresAt_lte: Float
  expiresAt: Float
  sealID_gt: String
}

type TestCrossEndorsement {
  masterID: String
  mediaType: String
}

type EventParameter {
  expiresAt: Float
  masterAddress: String
  masterNftId: Int
  price: Float
  sealAddress: String
  sealNftId: Int
  sealPossibleCorners: Int
  tokenAddress: String
  tokenNftId: Int
}

type BidRaw {
  bidCreator: String
  bidValue: String
  endTime: Float
  superType: String
  tokenAddress: String
  tokenID: String
}

input SeriesDeployedQueryInput {
  owner_nin: [String]
  owner: String
  type_lte: String
  address_in: [String]
  maximum_exists: Boolean
  hash_exists: Boolean
  address_lte: String
  superType_exists: Boolean
  hash_gte: String
  superType_nin: [String]
  owner_in: [String]
  creator_lte: String
  address: String
  supply_in: [Int]
  creator_exists: Boolean
  hash_lt: String
  maximum_ne: Int
  hash_lte: String
  superType_ne: String
  owner_lt: String
  OR: [SeriesDeployedQueryInput!]
  address_gt: String
  maximum: Int
  maximum_lte: Int
  owner_ne: String
  supply_ne: Int
  blockchain_ne: String
  creator_lt: String
  blockchain_lt: String
  address_lt: String
  creatorFees_ne: String
  address_ne: String
  superType_lt: String
  blockchain_exists: Boolean
  type_in: [String]
  supply_lt: Int
  maximum_nin: [Int]
  maximum_lt: Int
  blockchain_lte: String
  owner_gt: String
  address_exists: Boolean
  supply: Int
  blockchain_gt: String
  type_lt: String
  hash_gt: String
  creatorFees_gt: String
  supply_exists: Boolean
  type_gte: String
  type: String
  creator_gte: String
  creatorFees: String
  creatorFees_gte: String
  superType_gte: String
  superType: String
  type_nin: [String]
  creator: String
  creatorFees_in: [String]
  owner_gte: String
  supply_gt: Int
  supply_gte: Int
  creatorFees_lt: String
  hash_ne: String
  blockchain_nin: [String]
  creatorFees_nin: [String]
  maximum_gte: Int
  owner_exists: Boolean
  blockchain_in: [String]
  superType_gt: String
  creator_ne: String
  blockchain: String
  supply_nin: [Int]
  address_gte: String
  superType_in: [String]
  creator_gt: String
  hash_nin: [String]
  type_ne: String
  owner_lte: String
  superType_lte: String
  maximum_gt: Int
  hash: String
  blockchain_gte: String
  creator_nin: [String]
  creator_in: [String]
  supply_lte: Int
  creatorFees_exists: Boolean
  type_gt: String
  maximum_in: [Int]
  AND: [SeriesDeployedQueryInput!]
  creatorFees_lte: String
  address_nin: [String]
  hash_in: [String]
  type_exists: Boolean
}

input AuctionRawBidQueryInput {
  bidValue_gt: String
  bidCreator_exists: Boolean
  bidValue_nin: [String]
  bidCreator_nin: [String]
  bidValue_gte: String
  bidValue_in: [String]
  bidCreator_ne: String
  bidCreator_gt: String
  bidCreator_lt: String
  bidValue_ne: String
  AND: [AuctionRawBidQueryInput!]
  bidValue: String
  bidValue_lte: String
  bidCreator_in: [String]
  bidValue_exists: Boolean
  bidCreator_lte: String
  bidCreator_gte: String
  bidCreator: String
  OR: [AuctionRawBidQueryInput!]
  bidValue_lt: String
}

input EventParameterInsertInput {
  sealAddress: String
  masterAddress: String
  sealNftId: Int
  tokenNftId: Int
  sealPossibleCorners: Int
  price: Float
  masterNftId: Int
  expiresAt: Float
  tokenAddress: String
}

type DeleteManyPayload {
  deletedCount: Int!
}

input Swift_messageMessageInsertInput {
  resolution: String
  senderAddress: String
  superType: String
  time: Float
  discoveryTime: Float
  parsingTime: Float
  actionCode: String
}

input CollectionUpdateInput {
  creatorAccountNumber: Int
  updatedAt: Float
  creator_unset: Boolean
  creator: String
  qualification_inc: Int
  collectionID: String
  deployed_unset: Boolean
  updatedAt_inc: Float
  title_unset: Boolean
  deployed: CollectionDeployedUpdateInput
  qualification: Int
  about: String
  collectionID_unset: Boolean
  createdAt_unset: Boolean
  raw: CollectionRawUpdateInput
  _id_unset: Boolean
  creatorAccountNumber_unset: Boolean
  createdAt: Float
  media_unset: Boolean
  tokensInCollection_inc: Int
  updatedAt_unset: Boolean
  title: String
  tokensInCollection: Int
  createdAt_inc: Float
  tokensInCollection_unset: Boolean
  creatorAccountNumber_inc: Int
  about_unset: Boolean
  _id: ObjectId
  media: [CollectionMediumUpdateInput]
  qualification_unset: Boolean
  raw_unset: Boolean
}

input Ui_managementQueryInput {
  visibilityStatus_lt: String
  updatedAt_nin: [Float]
  moduleScope_in: [String]
  moduleScope: String
  moduleScope_ne: String
  createdAt: Float
  moduleName_lt: String
  airtableId_nin: [String]
  moduleName: String
  moduleScope_gt: String
  visibilityStatus: String
  moduleName_gt: String
  image_gte: String
  moduleID_exists: Boolean
  recordID_exists: Boolean
  airtableId_exists: Boolean
  image_lt: String
  moduleScope_exists: Boolean
  tag_in: [String]
  image: String
  image_nin: [String]
  createdAt_lte: Float
  airtableId: String
  _id: ObjectId
  updatedAt_gt: Float
  tag: [String]
  createdAt_exists: Boolean
  moduleID: Ui_moduleQueryInput
  itemLink_ne: String
  airtableId_lt: String
  assetTitle_exists: Boolean
  moduleItemType_lte: String
  createdAt_in: [Float]
  updatedAt_lte: Float
  tag_exists: Boolean
  updatedAt_in: [Float]
  itemLink: String
  recordID_nin: [String]
  _id_in: [ObjectId]
  createdAt_ne: Float
  recordID_gte: String
  updatedAt_ne: Float
  moduleScope_lt: String
  moduleItemType_lt: String
  itemID_ne: String
  itemID_lte: String
  createdAt_gt: Float
  assetTitle_lte: String
  assetID: Ui_assetQueryInput
  itemID_gt: String
  OR: [Ui_managementQueryInput!]
  visibilityStatus_exists: Boolean
  itemLink_lt: String
  recordID_gt: String
  _id_lt: ObjectId
  _id_gt: ObjectId
  createdAt_nin: [Float]
  createdAt_gte: Float
  moduleItemType: String
  airtableId_gte: String
  recordID_in: [String]
  airtableId_lte: String
  itemID_lt: String
  recordID_lte: String
  visibilityStatus_in: [String]
  moduleItemType_in: [String]
  itemLink_in: [String]
  AND: [Ui_managementQueryInput!]
  updatedAt_lt: Float
  visibilityStatus_nin: [String]
  tag_nin: [String]
  visibilityStatus_ne: String
  visibilityStatus_gte: String
  updatedAt: Float
  airtableId_gt: String
  itemID_gte: String
  moduleItemType_gte: String
  itemLink_exists: Boolean
  visibilityStatus_lte: String
  image_lte: String
  recordID_lt: String
  assetTitle_ne: String
  moduleName_ne: String
  createdAt_lt: Float
  image_in: [String]
  image_ne: String
  moduleItemType_gt: String
  _id_nin: [ObjectId]
  moduleName_exists: Boolean
  itemID_nin: [String]
  updatedAt_gte: Float
  assetTitle_in: [String]
  _id_gte: ObjectId
  moduleItemType_exists: Boolean
  itemLink_gte: String
  _id_ne: ObjectId
  moduleName_nin: [String]
  moduleName_gte: String
  recordID: String
  updatedAt_exists: Boolean
  assetTitle: String
  assetTitle_lt: String
  _id_lte: ObjectId
  moduleItemType_nin: [String]
  itemID: String
  moduleScope_lte: String
  assetTitle_gt: String
  moduleScope_nin: [String]
  itemLink_nin: [String]
  itemLink_gt: String
  airtableId_in: [String]
  image_exists: Boolean
  moduleName_lte: String
  moduleItemType_ne: String
  itemID_in: [String]
  assetID_exists: Boolean
  itemID_exists: Boolean
  image_gt: String
  itemLink_lte: String
  assetTitle_nin: [String]
  _id_exists: Boolean
  airtableId_ne: String
  moduleScope_gte: String
  assetTitle_gte: String
  moduleName_in: [String]
  visibilityStatus_gt: String
  recordID_ne: String
}

input Ui_managementUpdateInput {
  createdAt: Float
  visibilityStatus: String
  itemLink_unset: Boolean
  itemLink: String
  image: String
  tag: [String]
  moduleName: String
  image_unset: Boolean
  moduleID_unset: Boolean
  moduleItemType: String
  itemID: String
  moduleName_unset: Boolean
  assetID: Ui_managementAssetIDRelationInput
  recordID_unset: Boolean
  _id: ObjectId
  moduleID: Ui_managementModuleIDRelationInput
  updatedAt_inc: Float
  airtableId_unset: Boolean
  assetTitle: String
  tag_unset: Boolean
  recordID: String
  updatedAt_unset: Boolean
  moduleItemType_unset: Boolean
  _id_unset: Boolean
  visibilityStatus_unset: Boolean
  createdAt_unset: Boolean
  airtableId: String
  moduleScope_unset: Boolean
  assetID_unset: Boolean
  itemID_unset: Boolean
  createdAt_inc: Float
  moduleScope: String
  assetTitle_unset: Boolean
  updatedAt: Float
}

input Contract_typeHashFieldLayerInsertInput {
  layerIndex: String
  images: Contract_typeHashFieldLayerImageInsertInput
}

input TokenRawMediumUpdateInput {
  weight_inc: Int
  width: Int
  hash: String
  height_inc: Int
  height_unset: Boolean
  width_unset: Boolean
  subtitle_unset: Boolean
  width_inc: Int
  mimetype_unset: Boolean
  subtitle: String
  height: Int
  ipfsHash: String
  role: String
  role_unset: Boolean
  weight_unset: Boolean
  weight: Int
  hash_unset: Boolean
  ipfsHash_unset: Boolean
  mimetype: String
}

type Format {
  _id: ObjectId
  formatName: String
  height: Int
  width: Int
}

type EndorsementDeployed {
  blockchain: String
  corner: String
  creator: String
  expiresAt: Float
  masterID: String
  masterMediaType: String
  requestedCorners: Int
  sealID: String
  status: String
  superType: String
  tokenID: String
  type: String
  value: String
}

input Contract_typeHashFieldQueryInput {
  minimalMintFee_gt: String
  creatorFee_in: [String]
  creator: String
  width_lte: String
  width_exists: Boolean
  type_lt: String
  height_ne: String
  creatorFee_lt: String
  width_in: [String]
  width_ne: String
  height_exists: Boolean
  title_in: [String]
  numberOfEditions_ne: String
  description_ne: String
  media: Contract_typeHashFieldMediumQueryInput
  creator_nin: [String]
  collectionID_gt: String
  collectionID_nin: [String]
  title: String
  height_nin: [String]
  numberOfEditions_gt: String
  collectionID_gte: String
  description_lte: String
  minimalMintFee_gte: String
  width_gte: String
  title_nin: [String]
  width_nin: [String]
  description_gt: String
  creator_gt: String
  creatorFee: String
  height_lte: String
  height_lt: String
  creatorFee_exists: Boolean
  layers_exists: Boolean
  width_lt: String
  type_gte: String
  collectionID: String
  minimalMintFee_lte: String
  width_gt: String
  minimalMintFee_ne: String
  creatorFee_lte: String
  collectionID_exists: Boolean
  title_exists: Boolean
  type: String
  description_lt: String
  height_in: [String]
  collectionID_lte: String
  numberOfEditions_lte: String
  minimalMintFee_lt: String
  collectionID_lt: String
  type_gt: String
  height_gt: String
  type_lte: String
  description_gte: String
  creatorFee_gt: String
  collectionID_in: [String]
  description_exists: Boolean
  creator_in: [String]
  OR: [Contract_typeHashFieldQueryInput!]
  title_ne: String
  minimalMintFee: String
  creator_exists: Boolean
  numberOfEditions: String
  creator_lt: String
  minimalMintFee_in: [String]
  creator_ne: String
  collectionID_ne: String
  layers: Contract_typeHashFieldLayerQueryInput
  description: String
  height: String
  type_nin: [String]
  numberOfEditions_exists: Boolean
  type_ne: String
  title_gte: String
  media_exists: Boolean
  creatorFee_ne: String
  numberOfEditions_in: [String]
  title_lte: String
  numberOfEditions_nin: [String]
  numberOfEditions_lt: String
  creatorFee_nin: [String]
  height_gte: String
  AND: [Contract_typeHashFieldQueryInput!]
  creator_gte: String
  minimalMintFee_nin: [String]
  description_in: [String]
  numberOfEditions_gte: String
  title_gt: String
  type_in: [String]
  title_lt: String
  creatorFee_gte: String
  creator_lte: String
  minimalMintFee_exists: Boolean
  description_nin: [String]
  type_exists: Boolean
  width: String
}

input BlockchainNetworkInsertInput {
  main: BlockchainNetworkMainInsertInput
  test: BlockchainNetworkTestInsertInput
}

input EventMessageInsertInput {
  superType: String
  time: Float
  txHash: String
  parsingTime: Float
  eventName: String
  senderAddress: String
}

scalar Long

enum NetworkSortByInput {
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  _ID_ASC
  _ID_DESC
  INTEGRATION_ASC
  INTEGRATION_DESC
}

input AskDeployedQueryInput {
  status_exists: Boolean
  currentAskValue: String
  askAddress_lte: String
  askAddress_exists: Boolean
  askAddress_in: [String]
  blockchain_lte: String
  values_exists: Boolean
  endTime_lte: Float
  blockchain_lt: String
  status_gt: String
  status: String
  tokenAddress_in: [String]
  status_lte: String
  tokenAddress_lt: String
  tokenID_gt: String
  askCreator_ne: String
  askCreator_lt: String
  askAddress_ne: String
  superType_in: [String]
  tokenAddress_ne: String
  currentAskValue_ne: String
  superType_exists: Boolean
  endTime: Float
  tokenAddress_gte: String
  tokenAddress_gt: String
  endTime_ne: Float
  askAddress_lt: String
  askCreator_nin: [String]
  tokenID_exists: Boolean
  blockchain: String
  status_nin: [String]
  tokenID_ne: String
  showcaseFee_lt: String
  endTime_gte: Float
  blockchain_ne: String
  currentAskValue_lt: String
  superType_lte: String
  endTime_lt: Float
  blockchain_in: [String]
  AND: [AskDeployedQueryInput!]
  tokenID: String
  superType_gte: String
  endTime_exists: Boolean
  tokenAddress: String
  values_in: [AskDeployedValueQueryInput]
  showcaseFee_ne: String
  status_in: [String]
  tokenAddress_lte: String
  showcaseFee_exists: Boolean
  superType: String
  currentAskValue_lte: String
  superType_ne: String
  showcaseFee_gte: String
  askAddress_gt: String
  blockchain_exists: Boolean
  tokenAddress_exists: Boolean
  endTime_in: [Float]
  status_gte: String
  currentAskValue_in: [String]
  askCreator_lte: String
  tokenID_gte: String
  OR: [AskDeployedQueryInput!]
  askCreator_gt: String
  tokenAddress_nin: [String]
  currentAskValue_gt: String
  superType_gt: String
  tokenID_in: [String]
  askCreator: String
  tokenID_nin: [String]
  showcaseFee_lte: String
  values_nin: [AskDeployedValueQueryInput]
  askAddress: String
  endTime_gt: Float
  blockchain_nin: [String]
  blockchain_gt: String
  endTime_nin: [Float]
  tokenID_lt: String
  tokenID_lte: String
  status_ne: String
  showcaseFee_gt: String
  askCreator_exists: Boolean
  askAddress_nin: [String]
  showcaseFee_nin: [String]
  blockchain_gte: String
  showcaseFee_in: [String]
  askCreator_in: [String]
  superType_nin: [String]
  values: [AskDeployedValueQueryInput]
  status_lt: String
  currentAskValue_gte: String
  currentAskValue_nin: [String]
  askCreator_gte: String
  showcaseFee: String
  askAddress_gte: String
  superType_lt: String
  currentAskValue_exists: Boolean
}

input AuctionDeployedBidUpdateInput {
  bidStatus_unset: Boolean
  bidValue: String
  bidValue_unset: Boolean
  bidCreator: String
  bidCreator_unset: Boolean
  bidStatus: String
}

input TokenDeployedCreatorObjectRelationInput {
  link: String
  create: UserInsertInput
}

input IpfUpdateInput {
  mediaHash_unset: Boolean
  createdAt_inc: Float
  ipfsHash: String
  _id_unset: Boolean
  createdAt: Float
  createdAt_unset: Boolean
  ipfsHash_unset: Boolean
  mediaHash: String
  _id: ObjectId
}

input TestCrossEndorsementUpdateInput {
  masterID: String
  masterID_unset: Boolean
  mediaType: String
  mediaType_unset: Boolean
}

enum SeriesSortByInput {
  CREATEDAT_DESC
  SERIESID_ASC
  SERIESID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
}

enum ContractSortByInput {
  ABIPATH_ASC
  ADDRESS_DESC
  BLOCKCHAIN_ASC
  LONGTYPE_DESC
  PRIVACY_ASC
  PRIVACY_DESC
  ABIFILE_ASC
  ABIPATH_DESC
  LONGTYPE_ASC
  NETWORK_DESC
  _ID_ASC
  _ID_DESC
  ABIFILE_DESC
  BLOCKCHAIN_DESC
  ENVIRONMENT_ASC
  ENVIRONMENT_DESC
  NETWORK_ASC
  STATUS_ASC
  ADDRESS_ASC
  STATUS_DESC
  SUPERTYPE_ASC
  SUPERTYPE_DESC
}

input Ui_assetUpdateInput {
  imageLanding: String
  managementIDs_unset: Boolean
  managementIDs: String
  _id_unset: Boolean
  assetID: String
  assetSubtitle_unset: Boolean
  assetTitle: String
  textLanding_unset: Boolean
  image: String
  updatedAt: Float
  airtableId_unset: Boolean
  updatedAt_inc: Float
  assetID_unset: Boolean
  assetSubtitle: String
  image_unset: Boolean
  createdAt: Float
  imageLanding_unset: Boolean
  assetTitle_unset: Boolean
  createdAt_inc: Float
  _id: ObjectId
  createdAt_unset: Boolean
  airtableId: String
  updatedAt_unset: Boolean
  textLanding: String
}

input FormatQueryInput {
  formatName: String
  formatName_lte: String
  formatName_lt: String
  OR: [FormatQueryInput!]
  width_gt: Int
  width_lte: Int
  formatName_ne: String
  _id_nin: [ObjectId]
  height_nin: [Int]
  height_in: [Int]
  _id_exists: Boolean
  _id_gt: ObjectId
  formatName_gt: String
  _id_in: [ObjectId]
  formatName_exists: Boolean
  height_gte: Int
  height_lte: Int
  _id_lt: ObjectId
  _id: ObjectId
  width_nin: [Int]
  formatName_gte: String
  height_ne: Int
  _id_ne: ObjectId
  width_gte: Int
  AND: [FormatQueryInput!]
  width_ne: Int
  _id_gte: ObjectId
  height_exists: Boolean
  height: Int
  height_gt: Int
  _id_lte: ObjectId
  height_lt: Int
  formatName_in: [String]
  width_lt: Int
  width: Int
  width_in: [Int]
  formatName_nin: [String]
  width_exists: Boolean
}

input Contract_typeHashFieldMediumQueryInput {
  mimetype_lte: String
  width_nin: [String]
  AND: [Contract_typeHashFieldMediumQueryInput!]
  role_gte: String
  hash_gt: String
  height: String
  height_gt: String
  hash: String
  role_nin: [String]
  subtitle_ne: String
  OR: [Contract_typeHashFieldMediumQueryInput!]
  mimetype_gt: String
  height_exists: Boolean
  weight_lte: String
  weight_nin: [String]
  role_in: [String]
  width_lte: String
  weight_gte: String
  subtitle_lte: String
  weight_gt: String
  height_nin: [String]
  role_lt: String
  subtitle_lt: String
  weight_in: [String]
  hash_lte: String
  width_in: [String]
  mimetype_ne: String
  subtitle_gte: String
  height_in: [String]
  weight_ne: String
  role_ne: String
  hash_exists: Boolean
  role_exists: Boolean
  weight_exists: Boolean
  hash_gte: String
  height_gte: String
  width_ne: String
  hash_lt: String
  role_gt: String
  width_gt: String
  mimetype_in: [String]
  mimetype_lt: String
  weight_lt: String
  subtitle_nin: [String]
  subtitle: String
  mimetype_gte: String
  subtitle_gt: String
  hash_ne: String
  height_lte: String
  hash_nin: [String]
  subtitle_in: [String]
  hash_in: [String]
  height_lt: String
  mimetype: String
  mimetype_exists: Boolean
  width_lt: String
  role: String
  height_ne: String
  weight: String
  width: String
  mimetype_nin: [String]
  width_exists: Boolean
  role_lte: String
  subtitle_exists: Boolean
  width_gte: String
}

type AskRawValue {
  askTime: Float
  askValue: String
}

enum Ui_managementSortByInput {
  ASSETID_DESC
  ITEMID_ASC
  MODULESCOPE_ASC
  AIRTABLEID_DESC
  ASSETTITLE_ASC
  ITEMLINK_DESC
  MODULENAME_ASC
  VISIBILITYSTATUS_DESC
  ASSETID_ASC
  MODULEID_ASC
  MODULEID_DESC
  _ID_DESC
  IMAGE_ASC
  RECORDID_ASC
  RECORDID_DESC
  ASSETTITLE_DESC
  MODULEITEMTYPE_ASC
  ITEMID_DESC
  ITEMLINK_ASC
  MODULEITEMTYPE_DESC
  MODULESCOPE_DESC
  CREATEDAT_ASC
  _ID_ASC
  IMAGE_DESC
  MODULENAME_DESC
  AIRTABLEID_ASC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  VISIBILITYSTATUS_ASC
  CREATEDAT_DESC
}

input AuctionDeployedInsertInput {
  tokenAddress: String
  finalBid: String
  superType: String
  tokenID: String
  auctionAddress: String
  status: String
  bids: [AuctionDeployedBidInsertInput]
  showcaseFee: String
  startBid: String
  bidStep: String
  endTime: Float
  startTime: Float
}

input CommissionInsertInput {
  description: String
  type: String
  value: String
  valueBNB: String
  _id: ObjectId
  blockchain: String
  commissionId: String
}

input TokenDeployedStampQueryInput {
  tokenID_in: [String]
  tokenID_ne: String
  AND: [TokenDeployedStampQueryInput!]
  tokenID_lte: String
  tokenID_nin: [String]
  tokenID_exists: Boolean
  OR: [TokenDeployedStampQueryInput!]
  tokenID_gt: String
  tokenID_lt: String
  tokenID: String
  tokenID_gte: String
}

type Swift_messageMessage {
  actionCode: String
  discoveryTime: Float
  parsingTime: Float
  resolution: String
  senderAddress: String
  superType: String
  time: Float
}

type Like {
  _id: ObjectId
  seriesID: String
  status: Boolean
  tokenID: String
  userAccountNumber: Int
}

input SeriesUpdateInput {
  deployed: SeriesDeployedUpdateInput
  _id_unset: Boolean
  seriesID_unset: Boolean
  createdAt_inc: Float
  updatedAt: Float
  seriesID: String
  _id: ObjectId
  raw: SeriesRawUpdateInput
  updatedAt_unset: Boolean
  createdAt_unset: Boolean
  deployed_unset: Boolean
  createdAt: Float
  raw_unset: Boolean
  updatedAt_inc: Float
}

input ActionColQueryInput {
  _id_exists: Boolean
  _id_lt: ObjectId
  _id_gt: ObjectId
  _id: ObjectId
  _id_nin: [ObjectId]
  _id_ne: ObjectId
  tokenAttributes_exists: Boolean
  _id_in: [ObjectId]
  tokenAttributes: ActionColTokenAttributeQueryInput
  _id_lte: ObjectId
  OR: [ActionColQueryInput!]
  AND: [ActionColQueryInput!]
  actionAttributes_exists: Boolean
  _id_gte: ObjectId
  message: ActionColMessageQueryInput
  actionAttributes: ActionColActionAttributeQueryInput
  message_exists: Boolean
}

input BlockchainQueryInput {
  contractsRepo_lt: String
  name_lt: String
  contractsRepo_in: [String]
  OR: [BlockchainQueryInput!]
  contractsRepo_exists: Boolean
  _id_in: [ObjectId]
  name_exists: Boolean
  _id: ObjectId
  network_exists: Boolean
  name_lte: String
  contractsRepo_gt: String
  _id_ne: ObjectId
  _id_gt: ObjectId
  _id_gte: ObjectId
  _id_nin: [ObjectId]
  contractsRepo_nin: [String]
  name_in: [String]
  name_gte: String
  name_gt: String
  contractsRepo_lte: String
  _id_lte: ObjectId
  name_nin: [String]
  AND: [BlockchainQueryInput!]
  name_ne: String
  name: String
  network: BlockchainNetworkQueryInput
  contractsRepo_ne: String
  contractsRepo_gte: String
  _id_lt: ObjectId
  contractsRepo: String
  _id_exists: Boolean
}

input EventInsertInput {
  blockNumber: Long
  topics: [String]
  parameters: EventParameterInsertInput
  status: String
  createdAt: Float
  blockchain: String
  message: EventMessageInsertInput
  _id: ObjectId
  updatedAt: Float
}

type SeriesRawMedium {
  hash: String
  height: Int
  ipfsHash: String
  mimetype: String
  role: String
  subtitle: String
  weight: Int
  width: Int
}

input Contract_typeParameterQueryInput {
  likesLevel_gte: String
  hashLevel_gt: String
  likesLevel_lte: String
  sharesLevel_ne: String
  sharesLevel_nin: [String]
  likesLevel_lt: String
  hashLevel: String
  likesLevel_in: [String]
  hashLevel_lt: String
  hashLevel_nin: [String]
  hashLevel_in: [String]
  likesLevel: String
  hashLevel_exists: Boolean
  hashLevel_gte: String
  likesLevel_exists: Boolean
  likesLevel_ne: String
  OR: [Contract_typeParameterQueryInput!]
  hashLevel_lte: String
  sharesLevel_lte: String
  sharesLevel_gt: String
  sharesLevel_in: [String]
  sharesLevel: String
  likesLevel_nin: [String]
  AND: [Contract_typeParameterQueryInput!]
  hashLevel_ne: String
  sharesLevel_exists: Boolean
  sharesLevel_lt: String
  sharesLevel_gte: String
  likesLevel_gt: String
}

input SeriesDeployedUpdateInput {
  owner: String
  supply_inc: Int
  maximum_unset: Boolean
  type: String
  address_unset: Boolean
  superType_unset: Boolean
  supply: Int
  type_unset: Boolean
  creatorFees_unset: Boolean
  address: String
  maximum: Int
  maximum_inc: Int
  creator_unset: Boolean
  hash_unset: Boolean
  superType: String
  supply_unset: Boolean
  owner_unset: Boolean
  creator: String
  creatorFees: String
  blockchain: String
  blockchain_unset: Boolean
  hash: String
}
